[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "# Eva"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Eva is a desktop app for human resource management, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Eva can get your human resource management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## More Information"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* [Product website](https://ay2021s1-cs2103t-w13-1.github.io/tp/)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-w13-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-w13-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " * Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " * This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 12,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "mainClassName \u003d \u0027com.eva.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    archiveName \u003d \u0027Eva.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "Ben-Hanan": 4,
      "-": 70,
      "Hou-Rui": 2,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "You can reach us at the email `u_nikhila@comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "### Ben-Hanan Choong See Kaay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cimg src\u003d\"images/ben-hanan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[github](http://github.com/Ben-Hanan)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[portfolio](team/Ben-Hanan.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "### Hou Rui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cimg src\u003d\"images/hou-rui.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[github](http://github.com/Hou-Rui)] "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[portfolio](team/Hou-Rui.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "### Royce Ho Shou Yee"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cimg src\u003d\"images/thespacecuber.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[github](http://github.com/TheSpaceCuber)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[portfolio](team/TheSpaceCuber.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "### Tin Kah Ong Isaac"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cimg src\u003d\"images/isaactin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[github](http://github.com/IsaacTin)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[portfolio](team/IsaacTin.md)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "### Udayagiri Nikhila Sai"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cimg src\u003d\"images/nikhilalalalala.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[github](http://github.com/Nikhilalalalala)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "[[portfolio](team/Nikhilalalalala.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "Nikhilalalalala": 23
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **1. Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **2. Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1 Architecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "The rest of the App consists of four main components."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* [**`Logic`**](#logic-component): The command parser and executor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1.1 UI component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/ui/Ui.java)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1.2 Logic component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/logic/Logic.java)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a staff)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delstaff 1\")` API call."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1.3 Model component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/model/Model.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* stores the staff and applicant data."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStaff\u003e` and an `ObservableList\u003cApplicant\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `EvaStorage`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1.4 Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W13-1/tp/tree/master/src/main/java/com/eva/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* can save the Eva staff and applicant data in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 2.1.5 Common classes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Classes used by multiple components are in the `com.eva.commons` package."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **3. Implementation**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 3.1 \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#### 3.1.1 Proposed Implementation"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current eva database state in its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous eva database state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone eva database state from its history."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial eva database state, and the `currentStatePointer` pointing to that single eva database state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the eva database. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the eva database after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted eva database state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified eva database state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the eva database state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous eva database state, and restores the eva database to that state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the eva database to that state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest eva database state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the eva database, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all eva database states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#### 3.1.2 Design consideration:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire eva database."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 3.2 \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **4. Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **5. Appendix: Requirements**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 5.1 Product scope"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* works in small business/startup (5-30 headcount)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* prefers desktop apps over other types of apps"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* prefers typing inputs compared to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**Value proposition**: Simple and lightweight application that handles HR related administrative tasks, like manage staff performance and recruitment applicants, faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 5.3 User stories"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------   | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `* * *`  | first timer                                | be able to use software straight away without configuring complex settings |                              |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `* * *`  | HR manager                                 | store information about all the staff in my company like their role, designation and their project team name, etc.|   |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `* * *`  | Director of Human Resources                | I want to have quick and easy access to all HR information|                                               |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `* * *`  | organised HR manager                       | add data of applicants           | have these data at one place in a neat manner                          |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `* *`    | organised HR manager                       | delete data of applicants        | have these data at one place in a neat manner                          |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "| `*`      |                                            |                                  |                                                  |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 5.3 Use cases"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "(For all use cases below, the **System** is the `Eva` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "(Optional fields are given in square bracket e.g \\[t/TAG\\])"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "***Use case: UC01 - Adding a Record of staff***"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "1.  User types in `add s- n/\u003cstaffname\u003e a/address e/\u003cemail\u003e p/\u003cphoneno\u003e c/\u003ccomments\u003e`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "2.  Eva adds in the staff record"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "3.  Eva displays the staff record added to User"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1a. Eva detects missing fields"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a3  User enters new data."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1b. Eva detects invalid email, phone number or comment."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b1. Eva shows the valid format to key in the relevant field."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b3. User enters new data."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "***Use case: UC02 - Deleting a Record of staff***"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "1. User types in `delete \u003cindex_of_staff\u003e s-`. "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "2. Eva deletes the staff record permanently."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "3. Eva displays the confirmed message of deletion of that staff record.  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1a. Eva does not find staff record with the keyed in index."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a1. Eva informs the user that there are no such records."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a3  User types in `delete \u003cindex_of_staff\u003e s-` with correct index of staff"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1b. Eva does not detect any input for \u003cindex\u003e."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b1. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b2. User types in the new command `delete \u003cindex_of_staff\u003e s-`.    "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use Case UC03 - Edit a Record of staff***"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC04 - Adding a Comment on staff***"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "1. User types in `add \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e d:\u003cdate\u003e desc:\u003cdescription_of_comment\u003e`. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "2. Eva adds the comment to staff record permanently."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "3. Eva displays the confirmed message of addition of comment to that staff record.  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1a. Eva does not find staff record with the keyed in index."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a1. Eva informs the user that there are no such records."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a3  User types in `add \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e d:\u003cdate\u003e desc:\u003cdescription_of_comment\u003e` with correct index of staff"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1b. Eva does not detect any input for \u003cindex\u003e."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b1. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b2. User types in the new command `add \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e d:\u003cdate\u003e desc:\u003cdescription_of_comment\u003e`.    "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1c. Eva detects missing fields"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c3  User enters new data."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1c1-1c3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC05 - Deleting a Comment on staff***"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "1. User types in `delete \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e`. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "2. Eva deletes the comment with entered `\u003ctitle\u003e` from staff record permanently."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "3. Eva displays the confirmed message of deletion of comment from staff record.  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1a. Eva does not find staff record with the keyed in index."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a1. Eva informs the user that there are no such records."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1a3  User types in `delete \u003cindex_of_staff\u003e  s- c- t:\u003ctitle\u003e` with correct index of staff"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1b. Eva does not detect any input for \u003cindex\u003e."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b1. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1b2. User types in the new command `delete \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e`.    "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* 1c. Eva detects missing fields"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    * 1c3  User enters new data."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Steps 1c1-1c3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC06 - Adding a leave record to staff***"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "1.  User types in addleave \u003cindex\u003e l/d:DATE \\[d:DATE\\]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "2.  Eva adds in the leave to staff record based on index"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "3.  Eva displays the updated staff to User"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1a. Eva detects missing fields or more fields than expected."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a3  User enters new data."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1b. Eva detects invalid date."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b1. Eva shows the valid format to key in the relevant field."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b3. User enters new data."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1c. Eva detects conflict in leave dates within the specified staff record."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a1. Eva informs the user that there are conflicting records."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a3  User types in a new leave date."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC07 - Deleting a leave record from staff***"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "1.  User types in deleteleave \u003cindex\u003e d:DATE"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "2.  Eva deletes the leave containing specified date from index specified staff record"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "3.  Eva displays the updated staff to User"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1a. Eva detects missing fields or more fields than expected."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a3  User enters new data."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1b. Eva detects invalid date."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b1. Eva shows the valid format to key in the relevant field."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1b3. User enters new data."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* 1c. Eva detects no leave in index specified staff record containing specified date."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a1. Eva informs the user that there are no exiting record containing specified date."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    * 1a3  User types in a new leave date."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC08 - Adding a record of applicant***"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "1.  User types in addapplicant n/\u003capplicant_name\u003e e/\u003cemail\u003e p/\u003cphoneno\u003e a/\u003caddress\u003e id/22/11/2020 "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "2.  Eva adds in the applicant record"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "3.  Eva displays the applicant record added to User"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* 1a. Eva detects missing compulsory fields (name, email, address, phone)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a1. Eva shows the correct format to key in data."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a3  User enters new data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* 1b. Eva detects invalid email, phone number or interview date."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1b1. Eva shows the valid format to key in the relevant field."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1b2. Eva requests the user to add in data again."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1b3. User enters new data."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC09 - Deleting a Record of Applicant***"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "1. User types in delete \u003capplicant_name\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "2. Eva shows all matched staff records to the \u003capplicant_name\u003e with indexes beside."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "3. User types in the index to delete"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "4. Eva deletes the applicant record and all related information permanently."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "5. Eva displays the confirmed message of deletion of that applicant record.  "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* 1a. Eva does not find any staff record with the keyed in staff_name ."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a1. Eva informs the user that there are no such records."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a2. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1a3  User types in the new applicant_name of delete \u003capplicant_name\u003e."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* 1b. Eva does not detect any input for \u003capplicant_name\u003e."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1b1. Eva requests the user to type the command in again. "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    * 1b2. User types in the new applicant_name of delete \u003capplicant_name\u003e.    "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use Case UC10 - Edit a Record of applicant***"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use Case UC11 - Set the application status of an applicant***"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC12 - Adding an applicant to record quickly***"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Similar to Use Case 01, except that instead of s-, key in a-."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Example: `add a- n/\u003capplicantname\u003e a/address e/\u003cemail\u003e p/\u003cphoneno\u003e c/\u003ccomments\u003e`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC13 - Deleting an applicant from record quickly***"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Similar to Use Case 02, except that instead of s-, key in a-."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Example: `delete \u003cindex_of_applicant\u003e a-`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC14 - Adding a Comment on applicant quickly***"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Similar to Use Case 03, just that instead of s-, key in a-."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Example: `add \u003cindex_of_staff\u003e s- c- t:\u003ctitle\u003e d:\u003cdate\u003e desc:\u003cdescription_of_comment\u003e`    "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC15 - Deleting a Comment on applicant quickly***"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Similar to Use Case 04 except that instead of s-, key in a-."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Example: `delete \u003cindex_of_applicant\u003e a- c- t:\u003ctitle\u003e`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC16 - Adding a staff to record quickly***"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC17 - Deleting a staff to record quickly***"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC18 - Adding a Comment on staff quickly***"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC19 - Deleting a Comment on staff quickly***"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC20 - Adding an application to a applicant***"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "1. User types in `addapplication \u003cindex_of_applicant\u003e \u003cfilepath_of_resume\u003e`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "2. Eva inserts the resume data into storage, under the applicant indicated."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* 1a. Eva does not find any file (resume) specified."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    * 1a1. Eva informs the user that the file cannot be found."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC21 - Deleting an application from an applicant***"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC22 - list all staff records***"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "1. User types in list"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "2. Eva shows all staff records with indexes beside."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* 1a. Eva does not find any staff records."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    * 1a1. Eva informs the user that no records exist."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC23 - list all applicant records***"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC24 - find staff records by name***"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC25 - find applicant records by name***"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC26 - viewing staff profile***"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC27 - viewing applicant profile***"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC28 - help***"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC29 - clear***"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "***Use case: UC30 - Exiting the program***"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "1. User types in exit"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "2. Eva exits"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 5.4 Non-Functional Requirements"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "2.  Should be able to hold up to 1000 records of staff and applications without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands in Eva than using the mouse."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 5.5 Glossary"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## **6. Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 6.1 Launch and shutdown"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 6.2 Deleting a person"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "### 6.3 Saving data"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 124,
      "Ben-Hanan": 99,
      "TheSpaceCuber": 99,
      "-": 285,
      "Hou-Rui": 15,
      "Nikhilalalalala": 71
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "   e.g. `com.eva.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "   e.g. `com.eva.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "   e.g. `com.eva.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "- [2. Getting Started](#2-getting-started)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.1. Common Commands](#31-common-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.1.1. View](#311-view)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.1.2. Listing all persons : `list`](#312-listing-all-persons----list-)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.1.3. Find](#313-find)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.2. General Commands](#32-general-commands)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.2.1. Clearing all entries : `clear`](#321-clearing-all-entries----clear-)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.2.2. Finding help : `help`](#322-finding-help----help-)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.2.3. Exiting the program : `exit`](#323-exiting-the-program----exit-)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.3. Staff commands](#33-staff-commands)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.3.1. Adding a staff: `addstaff`](#331-adding-a-staff---addstaff-)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.3.2. Deleting a staff: `delstaff`](#332-deleting-a-staff---delstaff-)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.3.3. Record leave taken by staff: `addleave`](#333-record-leave-taken-by-staff---addleave-)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.3.4. Delete leave taken by staff: `deleteleave`](#334-delete-leave-taken-by-staff---deleteleave-)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.3.5. Edit leave taken by staff: `editleave`](#335-edit-leave-taken-by-staff---editleave-)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.4. Applicant commands](#34-applicant-commands)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.4.1 Adding an applicant: `addapplicant`](#341-adding-an-applicant---addapplicant-)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.4.2. Deleting an applicant:](#342-deleting-an-applicant-)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.4.3. Adding an application: `addapplication`](#343-adding-an-application---addapplication-)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.4.4. Deleting an application: `deleteapplication`](#344-deleting-an-application---deleteapplication-)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.5. Centralised Add (Experienced users): `add`](#35-centralised-add--experienced-users----add-)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.5.1. Add a staff to application: `add s-`](#351-add-a-staff-to-application---add-s--)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.5.2. Add a applicant to application: `add a-`](#352-add-a-applicant-to-application---add-a--)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.5.3. Add a comment to staff in application: `add \u003cindex\u003e s- c-`](#353-add-a-comment-to-staff-in-application---add--index--s--c--)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.5.4. Add a comment to applicant in application: `add \u003cindex\u003e a- c-`](#354-add-a-comment-to-applicant-in-application---add--index--a--c--)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.5.5. Add leave to staff in application: `add \u003cindex\u003e l/ `](#355-add-leave-to-staff-in-application---add--index--l---)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.6. Centralised Delete (Experienced Users): `delete`](#36-centralised-delete--experienced-users----delete-)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.6.1. Delete a staff from application: `delete \u003cindex_of_staff\u003e s-`](#361-delete-a-staff-from-application---delete--index-of-staff--s--)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.6.2. Delete a applicant from application: `delete \u003cindex_of_applicant\u003e a-`](#362-delete-a-applicant-from-application---delete--index-of-applicant--a--)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.6.3. Delete a comment from staff in application: `delete \u003cindex\u003e s- c-`](#363-delete-a-comment-from-staff-in-application---delete--index--s--c--)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.6.4. Delete a comment from applicant in application: `delete \u003cindex\u003e a- c-`](#364-delete-a-comment-from-applicant-in-application---delete--index--a--c--)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    + [3.6.5. Delete leave from staff in application: `delete \u003cindex\u003e l/ `](#365-delete-leave-from-staff-in-application---delete--index--l---)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [3.7. Archiving data files `[coming in v2.0]`](#37-archiving-data-files---coming-in-v20--)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "- [4. FAQ](#4-faq)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "- [5. Command summary](#5-command-summary)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [5.1. Common](#51-common)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [5.2. General](#52-general)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [5.3. Staff](#53-staff)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "  * [5.4. Applicant](#54-applicant)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Eva is a simple and lightweight application that **handles HR related administrative tasks**, "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "like managing staff performance and recruitment of applicants, faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "This user guide takes you through the basics of Eva and helps you get moving straightaway."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## 2. Getting Started"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "1. Download the latest `eva.jar` from [here](https://github.com/AY2021S1-CS2103T-W13-1/tp/releases)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Eva."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   \u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   **:information_source: Note:**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   Eva launches into the Staff List Panel."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`list -applicant`** : Lists all applicants."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "   * **`addapplicant`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a staff named `John Doe` to the application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "   "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`list -staff`** : Lists all staffs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`addstaff`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a staff named `John Doe` to the application."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "   * **`delstaff`**`3` : Deletes the 3rd staff shown in the staff list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`addleave`**`2 l/d:08/10/2020 d:10/10/2020 l/d:20/10/2020` : Adds two leave records with dates `08/10/2020 to 10/10/2020` and `20/10/2020` to the 2nd staff shown in the current list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`deleteleave`**`1 10/10/2020` : Deletes the leave record containing the date `10/10/2020` from the 1st person in the current list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "   * **`clear`** : Clears the database."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Note: Once any change is made to the data from the commands below, the data is saved in the hard disk. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.1. Common Commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#### 3.1.1. View : `view`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Brings user to the profile panel of the staff, if on the staff list, or applicant, if on the applicant list, at the specified index. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `view 1`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.1.2. Listing all persons : `list`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Shows a list of all persons in the application."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Format: `list -LIST_TYPE`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `list -staff`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `list -applicant`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.1.3. Find"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.2. General Commands"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.2.1. Clearing all entries : `clear`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Clears all entries from the application."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.2.2. Finding help : `help`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.2.3. Exiting the program : `exit`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Exits the program. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.3. Staff commands"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.3.1. Adding a staff: `addstaff`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Adds a staff to the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​[c/COMMENTS]…`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " - A staff can have any number of tags (including 0) \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " - A staff can have any number of comments (including 0) \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `addstaff n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "* `addstaff n/Betsy Crowe t/friend e/betsycrowe@example.com a/Betsy street, block 123, #01-01 p/1234567 t/Role: Developer`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.3.2. Deleting a staff: `delstaff`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Deletes a staff from the application. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Format: `delstaff INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* `delstaff 1`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.3.3. Record leave taken by staff: `addleave`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Records leave taken by a staff that is in the eva database."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Format: `addleave INDEX l/d/DATE [d/DATE]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* Addition of multiple leaves using the same command is supported. A leave can have either one (single day) or two dates (start and end inclusive)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* Dates can be input in any order. Eva will sort the leaves and dates according to which date comes first."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `list` followed by `addleave 2 l/d/20/10/2020` adds the leave record with the given date(s) to the 2nd person in the shown list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `find Betsy` followed by `addleave 1 l/d/20/10/2020` adds the leave to the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `addleave 1 l/d/08/10/2020 d/10/10/2020 l/d/20/10/2020`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `addleave 2 l/d/10/10/2020 d/08/10/2020 l/d/09/09/2020`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.3.4. Delete leave taken by staff: `deleteleave`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Removes record of leave taken by staff."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Format: `deleteleave INDEX d/DATE`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `list` followed by `deleteleave 2 d/09/09/2020` deletes the leave record of which the given date coincides with from the 2nd person in shown list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `find Betsy` followed by `deleteleave 1 d/09/09/2020` deletes the leave from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* `deleteleave 2 d/09/09/2020`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.3.5. Edit leave taken by staff: `editleave`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.4. Applicant commands"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.4.1 Adding an applicant: `addapplicant`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Adds an applicant to the Eva."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Format: `addapplicant n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [id/INTERVIEW_DATE] [t/TAG]…​[c/COMMENTS]…`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " - An applicant can have any number of tags (including 0) \u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " - An applicant can have any number of comments (including 0) \u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " - The interview date has to be in DD/MM/YYYY format \u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " - :bulb: **Tip** The interview date is optional. If an interview date is not fixed yet, you can leave it and set it later. \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* `addapplicant n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 id/22/11/2020`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* `addapplicant n/Betsy Crowe t/friend e/betsycrowe@example.com a/Betsy street, block 123, #01-01 p/1234567 t/Role: Developer`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.4.2. Deleting an applicant:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.4.3. Adding an application: `addapplication`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Adds an application to an applicant under Eva."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Format: `addapplication INDEX [filepath]`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " - An applicant should be created prior to the addition of its application."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* `addapplication 1 C:\\Users\\Public\\Downloads\\resume.txt`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.4.4. Deleting an application: `deleteapplication`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Deletes an application from an applicant under Eva."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Format: `deleteapplication INDEX`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* `deleteapplication 1`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.5. Centralised Add (Experienced users): `add`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.5.1. Add a staff to application: `add s-`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add s- n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] [c/COMMENT] [l/LEAVE]`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.5.2. Add a applicant to application: `add a-`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add a- n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] [c/COMMENT] [id/INTERVIEW_DATE]`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.5.3. Add a comment to staff in application: `add \u003cindex\u003e s- c-`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add \u003cindex_of_staff\u003e s- c- t:\u003cTITLE\u003e d:\u003cDATE IN DD/MM/YYYY\u003e desc:\u003cDESCRIPTION\u003e`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.5.4. Add a comment to applicant in application: `add \u003cindex\u003e a- c-`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add \u003cindex_of_applicant\u003e a- c- t:\u003cTITLE\u003e d:\u003cDATE IN DD/MM/YYYY\u003e desc:\u003cDESCRIPTION\u003e`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.5.5. Add leave to staff in application: `add \u003cindex\u003e l/ `"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `add \u003cindex_of_staff\u003e l/ d:\u003cDATE IN DD/MM/YYYY\u003e`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.6. Centralised Delete (Experienced Users): `delete`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.6.1. Delete a staff from application: `delete \u003cindex_of_staff\u003e s-`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `delete \u003cindex_of_staff\u003e s-`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.6.2. Delete a applicant from application: `delete \u003cindex_of_applicant\u003e a-`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `delete \u003cindex_of_applicant\u003e a-`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.6.3. Delete a comment from staff in application: `delete \u003cindex\u003e s- c-`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `delete \u003cindex_of_staff\u003e s- c- t:\u003cTITLE\u003e`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.6.4. Delete a comment from applicant in application: `delete \u003cindex\u003e a- c-`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `delete \u003cindex_of_applicant\u003e a- c- t:\u003cTITLE\u003e`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "#### 3.6.5. Delete leave from staff in application: `delete \u003cindex\u003e l/ `"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Format: `delete \u003cindex_of_staff\u003e l/ d:\u003cDATE IN DD/MM/YYYY\u003e`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 3.7. Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Eva home folder."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 5.1. Common"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`|"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`|"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**List** | `list`\u003cbr\u003e e.g., `list -staff`|"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**View** | `view INDEX`\u003cbr\u003e e.g., `view 2`|"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 5.2. General"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|Action | Format, Examples|"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**Clear** | `clear`|"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**Help** | `help` |"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**Exit** | `exit`|"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 5.3. Staff"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|Action | Format, Examples|"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**AddStaff** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `addstaff n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**DeleteStaff** | `delstaff INDEX`\u003cbr\u003e e.g., `delstaff 1`|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**AddLeave** | `addleave INDEX l/d/DATE [d/DATE]` \u003cbr\u003e e.g., `addleave 2 l/d/08/10/2020 d/10/10/2020 l/d/20/10/2020`|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**DeleteLeave** | `deleteleave INDEX d/DATE`\u003cbr\u003e e.g., `deleteleave 1 d/10/10/2020`|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "### 5.4. Applicant"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|Action | Format, Examples|"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**AddApplicant** | `to be updated` \u003cbr\u003e e.g., `addstaff n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`|"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**DeleteApplicant** | `to be updated` \u003cbr\u003e e.g., `addleave 2 l/d:08/10/2020 d:10/10/2020 l/d:20/10/2020`|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**AddApplication** | `addapplication INDEX [filepath]` \u003cbr\u003e e.g., `addapplication 1 C:\\Users\\Public\\Downloads\\resume.txt`|"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "|**DeleteApplication** | `deleteapplication INDEX` \u003cbr\u003e e.g., `deleteapplication 1`|"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 10,
      "Ben-Hanan": 65,
      "TheSpaceCuber": 116,
      "-": 115,
      "Nikhilalalalala": 42
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteStaff(staff)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveStaffDatabase(staffDatabase)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "EvaStorage *-right-\u003e \"2\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "EvaStorage *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "UniquePersonList o-down-\u003e Staff"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "UniquePersonList o-down-\u003e Applicant"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Staff .up.\u003e Person"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant .up.\u003e Person"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Person *--\u003e Comment"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Staff *--\u003e Leave"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant *--\u003e InterviewDate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant *--\u003e ApplicationStatus"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "Hou-Rui": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "participant \":DeleteStaffCommandParser\" as DeleteStaffCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "participant \"d:DeleteStaffCommand\" as DeleteStaffCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "[-\u003e LogicManager : execute(\"delstaff 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delstaff 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "create DeleteStaffCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "AddressBookParser -\u003e DeleteStaffCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "activate DeleteStaffCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "DeleteStaffCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 8,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "Class AddCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "Class DeleteCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "AddressBookParser ..\u003e AddCommandParser: creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "AddressBookParser ..\u003e DeleteCommandParser: creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "AddCommandParser ..\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "DeleteCommandParser ..\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 8,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Interface ReadOnlyEvaDatabase \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class EvaDatabase"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class ReadOnlyEvaDatabase"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Package Comment {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class Comment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Package Applicant {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class Applicant"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class InterviewDate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class ApplicationStatus"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Package Staff {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class Staff"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Package Leave {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class Leave"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "EvaDatabase .up.|\u003e ReadOnlyEvaDatabase"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "ModelManager o--\u003e \"1\" EvaDatabase"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Person *--\u003e Comment"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Person *--\u003e Tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "EvaDatabase *--\u003e \"2\" UniquePersonList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "UniquePersonList o--\u003e \"*\" Staff"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Staff .up.|\u003e Person"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Staff *--\u003e \"*\" Leave"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "UniquePersonList o--\u003e \"*\" Applicant"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant .up.|\u003e Person"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant *--\u003e \"0..1\" InterviewDate"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Applicant *--\u003e ApplicationStatus"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "ModelManager --\u003e\"1\" Staff : filtered list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "ModelManager --\u003e\"1\" Applicant : filtered list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "Hou-Rui": 39
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Interface EvaStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Class JsonEvaStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "StorageManager o--\u003e EvaStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonEvaStorage .left.|\u003e EvaStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonEvaStorage .down.\u003e JsonSerializableEvaStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonSerializableEvaStorage .down.\u003e JsonAdaptedStaff"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonSerializableEvaStorage .down.\u003e JsonAdaptedApplicant"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonAdaptedStaff o--\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonAdaptedStaff .left.\u003e JsonAdaptedLeave"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonAdaptedApplicant o--\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonAdaptedPerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "JsonAdaptedPerson .down.\u003e JsonAdaptedComment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Hou-Rui": 12
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Class StaffListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Class StaffCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Class ApplicantListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Class ApplicantCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "MainWindow *-down-\u003e StaffListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "MainWindow *-down-\u003e ApplicantListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "StaffListPanel -down-\u003e StaffCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "ApplicantListPanel -down-\u003e ApplicantCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "StaffListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "StaffCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "ApplicantListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "ApplicantCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "StaffCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "ApplicantCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "StaffListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "ApplicantListPanel -[hidden]left- StaffListPanel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 17,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":VersionedAddressBook\" as VersionedAddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -\u003e Model : undoAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Model -\u003e VersionedAddressBook : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "activate VersionedAddressBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "VersionedAddressBook -\u003e VersionedAddressBook :resetData(ReadOnlyEvaDatabase)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "VersionedAddressBook --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate VersionedAddressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "Hou-Rui": 1
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "!define COMMONS_COLOR #AFDFED"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "!define COMMONS_COLOR_T1 #72bdd4"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "title: Eva"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W13-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "**Eva is a desktop application for HR staff.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* If you are interested in using Eva, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* If you are interested about developing Eva, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/Ben-Hanan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "title: Ben-Hanan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "## Project: Eva"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "Eva is a desktop HR management application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5,
      "-": 19
    }
  },
  {
    "path": "docs/team/Hou-Rui.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "--"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "title: Hou Rui\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "## Project: Eva"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Eva is a desktop app for human resource management, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Eva can get your human resource management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **New Feature**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Code contributed**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Project management**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Enhancements to existing features**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Documentation**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Community**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "* **Tools**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 27
    }
  },
  {
    "path": "docs/team/IsaacTin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "title: Isaac Tin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "## Project: Eva"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "AddressBook - Level 3 is a desktop eva database application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "* **New Feature**: Added the ability to delete."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "-": 42,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "docs/team/Nikhilalalalala.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "title: Nikhilalalalala\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Project: Eva"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Eva is a desktop HR management application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "New Feature:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Code contributed:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Project management:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Enhancements to existing features:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Documentation:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Community:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "Tools:"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "Nikhilalalalala": 10
    }
  },
  {
    "path": "docs/team/TheSpaceCuber.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "title: TheSpaceCuber\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "## Project: Eva"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Eva is a desktop HR management application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 25
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their eva database and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Changes the remark of an existing person in the eva database."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/personDatabase.json` before running it! Not doing so will cause AddressBook to default to an empty eva database!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 391,
      "Nikhilalalalala": 3
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    * Converts a given {@code ReadOnlyEvaDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyEvaDatabase source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    3.  Save the eva database in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    6.  Add a new entity to the eva database"
      }
    ],
    "authorContributionMap": {
      "-": 246,
      "Hou-Rui": 2,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/eva/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 1,
      "Ben-Hanan": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/eva/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.EvaStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.JsonEvaStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EvaDatabase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaStorage evaStorage \u003d new JsonEvaStorage(userPrefs.getPersonDatabaseFilePath(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                userPrefs.getStaffDatabaseFilePath(), userPrefs.getApplicantDatabaseFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        storage \u003d new StorageManager(evaStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s eva database and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The data from the sample eva database will be used instead if {@code storage}\u0027s eva database is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * or an empty eva database will be used instead if errors occur when reading {@code storage}\u0027s eva database."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e personDatabaseOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ReadOnlyEvaDatabase\u003cPerson\u003e initialPersonData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e staffDatabaseOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ReadOnlyEvaDatabase\u003cStaff\u003e initialStaffData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e applicantDatabaseOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ReadOnlyEvaDatabase\u003cApplicant\u003e initialApplicantData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            personDatabaseOptional \u003d storage.readPersonDatabase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            staffDatabaseOptional \u003d storage.readStaffDatabase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            applicantDatabaseOptional \u003d storage.readApplicantDatabase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            if (personDatabaseOptional.isEmpty() || staffDatabaseOptional.isEmpty()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    || applicantDatabaseOptional.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EvaDatabase\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialPersonData \u003d personDatabaseOptional.orElseGet(SampleDataUtil::getSamplePersonDatabase);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialStaffData \u003d staffDatabaseOptional.orElseGet(SampleDataUtil::getSampleStaffDatabase);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialApplicantData \u003d applicantDatabaseOptional.orElseGet(SampleDataUtil::getSampleApplicantDatabase);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty EvaDatabase\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialPersonData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialStaffData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialApplicantData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EvaDatabase\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialPersonData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialStaffData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            initialApplicantData \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new ModelManager(initialPersonData, initialStaffData, initialApplicantData, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EvaDatabase\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.info(\"Starting EvaDatabase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping eva database ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 17,
      "-": 138,
      "Hou-Rui": 40,
      "Nikhilalalalala": 6
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.PanelState.STAFF_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 560;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final PanelState DEFAULT_PANEL \u003d STAFF_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private PanelState panelState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width, position and panel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        panelState \u003d DEFAULT_PANEL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width, position and panel."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition, PanelState panelState) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.panelState \u003d panelState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public PanelState getPanelState() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return panelState;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setPanelState(PanelState panelState) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.panelState \u003d panelState;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 panelState.equals(o.panelState);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates, panelState);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        sb.append(\"Panel State : \" + panelState.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 23,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_AT_PANEL \u003d \"You cannot perform this command here! \\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_INVALID_APPLICANT_DISPLAYED_INDEX \u003d \"The applicant index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "TheSpaceCuber": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/PanelState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public enum PanelState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    STAFF_LIST(\"Staff List\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    STAFF_PROFILE(\"Staff Profile\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    APPLICANT_LIST(\"Applicant List\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    APPLICANT_PROFILE(\"Applicant Profile\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final String panelState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    PanelState(String panelState) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.panelState \u003d panelState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return panelState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 19
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/com/eva/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/eva/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/eva/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 40
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Given date could not be parsed.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Date should be in the format: dd/MM/yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if the given date matches the format required according to {@code VALIDATION_REGEX}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param test date to test. Cannot be empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a parsed LocalDate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param dateStr The str to be parsed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static LocalDate dateParsed(String dateStr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        checkArgument(isValidDate(dateStr), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return LocalDate.parse(dateStr, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a parsed LocalDate."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param dateStr The str to be parsed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if {@code dateStr} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static LocalDate dateParsed(String dateStr, String errorMessage) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            checkArgument(isValidDate(dateStr), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return LocalDate.parse(dateStr, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a list of parsed LocalDates."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param dateStrings The list of strings to be parsed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static List\u003cLocalDate\u003e datesParsed(List\u003cString\u003e dateStrings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        dateStrings.forEach(str -\u003e checkArgument(isValidDate(str), MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return dateStrings.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .map(str -\u003e LocalDate.parse(str, DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns the string representation of a LocalDate using {@code DATE_TIME_FORMATTER}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param date the LocalDate to be converted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static String dateToString(LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return date.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the number of days elapsed between two dates."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param start cannot be empty, inclusive."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param end cannot be empty, inclusive."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static int getDaysBetween(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(start, end);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Period.between(start, end).getDays() + 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a list of LocalDates between the two given {@code dates}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param start cannot be empty"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param end cannot be empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static List\u003cLocalDate\u003e getDatesBetween(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(start, end);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cLocalDate\u003e out \u003d start.datesUntil(end).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        out.add(end);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 84,
      "Hou-Rui": 9
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/IntegerUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class IntegerUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if the integer given is positive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param test int to test. Cannot be empty."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static void requirePositive(int test) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        checkArgument(test \u003e 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if the integer given is positive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param test int to test. Cannot be empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static void requirePositive(int test, String errorMessage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        checkArgument(test \u003e 0, errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 23
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.LogsCenter.getLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final Logger logger \u003d getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 138
    }
  },
  {
    "path": "src/main/java/com/eva/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Formats the given string for tokenizer to recognize it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static String formatForParse(String s) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return \" \" + s;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 9,
      "-": 66
    }
  },
  {
    "path": "src/main/java/com/eva/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, FileNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns the EvaDatabase."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see com.eva.model.Model#getEvaDatabase()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    ReadOnlyEvaDatabase\u003cPerson\u003e getEvaDatabase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns the StaffDatabase."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @see com.eva.model.Model#getStaffDataBase()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    ReadOnlyEvaDatabase\u003cStaff\u003e getStaffDataBase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of staff */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    ObservableList\u003cStaff\u003e getFilteredStaffList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of applicants */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    ObservableList\u003cApplicant\u003e getFilteredApplicantList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns the user prefs\u0027 persons data file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getEvaDatabaseFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns the user prefs\u0027 staff data file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Path getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current PanelState."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    PanelState getPanelState();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current staff being viewed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    CurrentViewStaff getCurrentViewStaff();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current staff being viewed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    CurrentViewApplicant getCurrentViewApplicant();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 28,
      "TheSpaceCuber": 2,
      "-": 36,
      "Hou-Rui": 4,
      "Nikhilalalalala": 19
    }
  },
  {
    "path": "src/main/java/com/eva/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.parser.EvaParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final EvaParser evaParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        evaParser \u003d new EvaParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Command command \u003d evaParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            storage.savePersonDatabase(model.getPersonDatabase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            storage.saveStaffDatabase(model.getStaffDatabase());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            storage.saveApplicantDatabase(model.getApplicantDatabase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ReadOnlyEvaDatabase\u003cPerson\u003e getEvaDatabase() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return model.getPersonDatabase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ReadOnlyEvaDatabase\u003cStaff\u003e getStaffDataBase() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return model.getStaffDatabase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return model.getFilteredStaffList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ObservableList\u003cApplicant\u003e getFilteredApplicantList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getEvaDatabaseFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return model.getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return model.getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public PanelState getPanelState() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return model.getPanelState();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewStaff getCurrentViewStaff() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return model.getCurrentViewStaff();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewApplicant getCurrentViewApplicant() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return model.getCurrentViewApplicant();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 34,
      "TheSpaceCuber": 2,
      "-": 61,
      "Nikhilalalalala": 24,
      "Hou-Rui": 5
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddApplicantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class AddApplicantCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addapplicant\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a applicant to Eva. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENT]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"[\" + PREFIX_DATE + \" INTERVIEW DATE]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_TAG + \"role:business dev\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_COMMENT + \"t: Good applicant d: {Date} desc: has knowledge on business model frameworks\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New applicant added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This applicant already exists in the eva database\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final Applicant toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Staff}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public AddApplicantCommand(Applicant applicant) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(applicant);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        toAdd \u003d applicant;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (model.hasApplicant(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        model.addApplicant(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 58
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddApplicationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class AddApplicationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addapplication\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an application to an applicant. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_USAGE_2 \u003d COMMAND_WORD + \" Adds an application to an applicant. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"FILEPATH \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"C://Users...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Application added to applicant: %1$s \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_OVERRIDE \u003d \"Application overridden for applicant.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final Application applicationToAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Creates an AddApplicationCommand to add an application specified {@code Applicant}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public AddApplicationCommand(Index index, Application application) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(application);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        applicationToAdd \u003d application;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        // if (model.hasApplication(toAdd)) // MESSAGE_OVERRIDE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        List\u003cApplicant\u003e lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPLICANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        Applicant applicantToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        model.addApplicantApplication(applicantToUpdate, applicationToAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, applicationToAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 57
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Adds a person to eva database."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_USAGE_2 \u003d COMMAND_WORD + \": Adds staff, applicant or comment. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"Index \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + PREFIX_STAFF + \" / \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + PREFIX_APPLICANT + \" / \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"or to add only comment, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + PREFIX_COMMENT"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"t: title\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"d: 2010-10-10\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"desc: comment\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the eva database. \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the eva database\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 14,
      "Ben-Hanan": 9,
      "-": 53,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddCommentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_APPLICANTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class AddCommentCommand extends CommentCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String personType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates an addcommentcommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param commentPersonDescriptor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param personType"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public AddCommentCommand(Index index, CommentCommand.CommentPersonDescriptor commentPersonDescriptor,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                             String personType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(index, commentPersonDescriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.personType \u003d personType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        //for now is staff because we only working with staff for now"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003c? extends Person\u003e lastShownList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (this.personType.equals(\"applicant\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        //for now staff"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person editedPerson \u003d createAddEditedPerson(personToEdit, commentPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (editedPerson instanceof Staff) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.setStaff((Staff) personToEdit, (Staff) editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.setApplicant((Applicant) personToEdit, (Applicant) editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_COMMENT_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static Person createAddEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                                CommentCommand.CommentPersonDescriptor commentPersonDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Name updatedName \u003d commentPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Phone updatedPhone \u003d commentPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Email updatedEmail \u003d commentPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Address updatedAddress \u003d commentPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d commentPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e updatedCommentsCommands \u003d commentPersonDescriptor.getComments();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e updatedComments \u003d personToEdit.getComments();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (Comment comment: updatedCommentsCommands) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            updatedComments.add(new Comment(comment.getDate(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    comment.getDescription(), comment.getTitle().getTitle()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (personToEdit instanceof Staff) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cLeave\u003e updatedLeaves \u003d ((Staff) personToEdit).getLeaves();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Staff(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedAddress, updatedTags, updatedLeaves, updatedComments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (personToEdit instanceof Applicant) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            ApplicationStatus applicationStatus \u003d ((Applicant) personToEdit).getApplicationStatus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Optional\u003cInterviewDate\u003e interviewDate \u003d ((Applicant) personToEdit).getInterviewDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Applicant(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedTags, updatedComments, interviewDate, applicationStatus);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedComments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 109
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Adds the given leave period to an existing staff member."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class AddLeaveCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addleave\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \": Adds specified leave(s) taken to the record of the staff taking leave \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_LEAVE + PREFIX_DATE + \"LEAVE START DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_DATE + \"LEAVE END DATE (optional)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_LEAVE + PREFIX_DATE + \"08/10/2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_DATE + \"10/10/2020 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_LEAVE + PREFIX_DATE + \"20/10/2020 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Leave recorded: %1$s took %2$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This staff: %s \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"has overlapping leave date during this period: %s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final List\u003cLeave\u003e toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates an AddLeaveCommand to add the given leave to the {@code Staff} identified by the given index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public AddLeaveCommand(Index targetIndex, List\u003cLeave\u003e leave) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(targetIndex, leave);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.toAdd \u003d leave;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    // TODO checks for leave balance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Staff staffToTakeLeave \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (Leave leave : toAdd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (model.hasStaffLeave(staffToTakeLeave, leave)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    || model.hasLeavePeriod(staffToTakeLeave, leave)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        String.format(MESSAGE_DUPLICATE_RECORD, staffToTakeLeave.getName(), leave.toErrorMessage()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.addStaffLeave(staffToTakeLeave, leave);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            sb.append(leave.toString()).append(\", \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, staffToTakeLeave.getName(), sb));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 78
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/AddStaffCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class AddStaffCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstaff\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a staff to Eva. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_TAG + \"Team:business dev \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_TAG + \"performing well\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + PREFIX_COMMENT + \"t: Leave Request d: {12/02/2020} desc: pending\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New staff added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This staff already exists in the eva database\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final Staff toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Staff}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public AddStaffCommand(Staff staff) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        toAdd \u003d staff;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (model.hasStaff(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        model.addStaff(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                || (other instanceof AddStaffCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStaffCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 8,
      "Nikhilalalalala": 56
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Clears the eva database."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"eva database has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model.setPersonDatabase(new EvaDatabase\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 17,
      "Hou-Rui": 2,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /** The application needs to switch pages. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final boolean changePanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean changePanel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.changePanel \u003d changePanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean isChangePanel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return changePanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/CommentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class CommentCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"comment\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds or delete comment to person\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"To add: key in \u0027-a t: {Title} d: {Date} desc: {Description}\u0027\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"and to delete, key in \u0027-d t:{TitletoDelete}\u0027\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_ADD_COMMENT_SUCCESS \u003d \"Commented on Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the eva database.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_DELETE_COMMENT_SUCCESS \u003d \"Deleted comment on Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public final CommentCommand.CommentPersonDescriptor commentPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates CommentCommand object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param index index of person being commented on"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param commentPersonDescriptor details of person once comments are done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommentCommand(Index index,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                          CommentCommand.CommentPersonDescriptor commentPersonDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(commentPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.commentPersonDescriptor \u003d new CommentCommand.CommentPersonDescriptor(commentPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, commentPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_COMMENT_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates and returns a {@code Person} with"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * the details of {@code personToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                             CommentCommand.CommentPersonDescriptor commentPersonDescriptor)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        throw new CommandException(\"Shouldn\u0027t come here\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static class CommentPersonDescriptor {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private ApplicationStatus applicationStatus;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private InterviewDate interviewDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Set\u003cComment\u003e comments;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Set\u003cLeave\u003e leaves;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public CommentPersonDescriptor() {}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public CommentPersonDescriptor(CommentCommand.CommentPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setApplicationStatus(toCopy.applicationStatus);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setInterviewDate(toCopy.interviewDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setComments(toCopy.comments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setLeaves(toCopy.leaves);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cApplicationStatus\u003e getApplicationStatus() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(applicationStatus);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setApplicationStatus(ApplicationStatus applicationStatus) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.applicationStatus \u003d applicationStatus;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cInterviewDate\u003e getInterviewDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.ofNullable(interviewDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setInterviewDate(InterviewDate interviewDate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setComments(Set\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.comments \u003d (comments !\u003d null) ? new HashSet\u003c\u003e(comments) : null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Set\u003cComment\u003e getComments() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (comments !\u003d null) ? comments : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setLeaves(Set\u003cLeave\u003e leaves) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.leaves \u003d (leaves !\u003d null) ? new HashSet\u003c\u003e(leaves) : null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Set\u003cLeave\u003e getLeaves() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (leaves !\u003d null) ? leaves : new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            EditCommand.EditPersonDescriptor e \u003d (EditCommand.EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 235,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/DeleteApplicantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Executes the deletion of the specified applicant."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class DeleteApplicantCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delapplicant\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \": Deletes the applicant identified by the index number used in the displayed applicant list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DELETE_APPLICANT_SUCCESS \u003d \"Deleted Applicant: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public DeleteApplicantCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        List\u003cApplicant\u003e lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // cannot cast"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Applicant applicantToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        model.deleteApplicant(applicantToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_APPLICANT_SUCCESS, applicantToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return other \u003d\u003d this // short circuit if same obj"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                || (other instanceof DeleteApplicantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteApplicantCommand) other).targetIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 60
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the eva database."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \": \\nto delete comment, type \u0027delete \u003cindex\u003e \u003c\u0027a-\u0027 or \u0027s-\u0027\u003e c- t:\u003ctitle_to_delete\u003e\u0027\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"to delete leave, type \u0027delete \u003cindex_of_staff\u003e l/ d:\u003cdate_in_dd/mm/yyyy\u003e\u0027\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"to delete staff/applicant, type \u0027delete \u003cindex_of_staff/applicant\u003e \u003c\u0027s-\u0027 or \u0027a-\u0027\u003e\u0027\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "Ben-Hanan": 6,
      "-": 43,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/DeleteCommentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_APPLICANTS;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DeleteCommentCommand extends CommentCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static final String NO_TITLE_MESSAGE \u003d \"No such title. To delete comment, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"type: \" + DeleteCommand.COMMAND_WORD + \" INDEX c- t:\u003cTITLE\u003e\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String personType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates delete comment command object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param commentPersonDescriptor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param personType"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public DeleteCommentCommand(Index index, CommentCommand.CommentPersonDescriptor commentPersonDescriptor,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                String personType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(index, commentPersonDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.personType \u003d personType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003c? extends Person\u003e lastShownList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (this.personType.equals(\"applicant\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Person editedPerson \u003d createDeleteEditedPerson(personToEdit, commentPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (editedPerson instanceof Staff) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                model.setStaff((Staff) personToEdit, (Staff) editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                model.setApplicant((Applicant) personToEdit, (Applicant) editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                model.updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_COMMENT_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(NO_TITLE_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates and returns a {@code Person} with"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static Person createDeleteEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                                   CommentCommand.CommentPersonDescriptor commentPersonDescriptor)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean hasTitle \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Name updatedName \u003d commentPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Phone updatedPhone \u003d commentPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Email updatedEmail \u003d commentPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Address updatedAddress \u003d commentPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d commentPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e updatedCommentsCommands \u003d commentPersonDescriptor.getComments();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e updatedComments \u003d personToEdit.getComments();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (Comment comment: updatedCommentsCommands) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            for (Comment commentToDelete : updatedComments) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (commentToDelete.getTitle().equals(comment.getTitle())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    hasTitle \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedComments.remove(commentToDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasTitle) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new CommandException(NO_TITLE_MESSAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (personToEdit instanceof Staff) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cLeave\u003e updatedLeaves \u003d ((Staff) personToEdit).getLeaves();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Staff(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedAddress, updatedTags, updatedLeaves, updatedComments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (personToEdit instanceof Applicant) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            ApplicationStatus applicationStatus \u003d ((Applicant) personToEdit).getApplicationStatus();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Optional\u003cInterviewDate\u003e interviewDate \u003d ((Applicant) personToEdit).getInterviewDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Applicant(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedTags, updatedComments, interviewDate, applicationStatus);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedComments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getPersonType() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.personType;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 128
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/DeleteLeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.dateToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Deletes leave from the given staff according to the given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DeleteLeaveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteleave\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \": Deletes specified leave of a staff identified by the index number and leave date \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"used in the displayed staff list\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + PREFIX_DATE + \"10/10/2020\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Leave: %1$s from %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_NO_RECORD \u003d \"This staff: %s \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"has not taken any leave during any period containing this date: %s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a DeleteLeaveCommand to delete leave according to the date supplied"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * from the {@code Staff} identified by the given index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DeleteLeaveCommand(Index targetIndex, LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(targetIndex, date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Staff target \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Optional\u003cLeave\u003e removedLeave \u003d model.hasLeaveDate(target, date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (removedLeave.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.deleteStaffLeave(target, removedLeave.get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, removedLeave.get(), target.getName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_RECORD, target.getName(), dateToString(date)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 2,
      "Ben-Hanan": 70
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/DeleteStaffCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Executes the deletion of the specified staff."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class DeleteStaffCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delstaff\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \": Deletes the staff identified by the index number used in the displayed staff list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_DELETE_STAFF_SUCCESS \u003d \"Deleted Staff: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public DeleteStaffCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        // cannot cast"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        Staff staffToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        model.deleteStaff(staffToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STAFF_SUCCESS, staffToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return other \u003d\u003d this // short circuit if same obj"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                || (other instanceof DeleteStaffCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStaffCommand) other).targetIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 57,
      "Nikhilalalalala": 3
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_APPLICANTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Edits the details of an existing person in the eva database."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the eva database.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String MESSAGE_NO_APPLICANTORSTAFF \u003d \"Please key in s- or a- to indicate \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            + \"if you want to edit applicant or staff\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String personType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                       String personType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.personType \u003d personType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003c? extends Person\u003e lastShownList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (this.personType.equals(\"staff\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (this.personType.equals(\"staff\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.setStaff((Staff) personToEdit, (Staff) editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.setApplicant((Applicant) personToEdit, (Applicant) editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            model.updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e editedComments \u003d editPersonDescriptor.getComments();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e currentComments \u003d personToEdit.getComments();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e newComments \u003d updateComments(editedComments, currentComments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (personToEdit instanceof Staff) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cLeave\u003e updatedLeaves \u003d ((Staff) personToEdit).getLeaves();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Staff(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedAddress, updatedTags, updatedLeaves, newComments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (personToEdit instanceof Applicant) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            ApplicationStatus applicationStatus \u003d ((Applicant) personToEdit).getApplicationStatus();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Optional\u003cInterviewDate\u003e updatedInterviewDate \u003d editPersonDescriptor.getInterviewDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Applicant(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    updatedTags, newComments, updatedInterviewDate, applicationStatus);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, newComments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Updates Comments"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param editedComments"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param currentComments"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static Set\u003cComment\u003e updateComments(Set\u003cComment\u003e editedComments, Set\u003cComment\u003e currentComments) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (editedComments !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            for (Comment comment: currentComments) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                for (Comment editedComment : editedComments) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (editedComment.getTitle().equals(comment.getTitle())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            \u0026\u0026 editedComment.getDate().equals(comment.getDate())) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        comment.update(editedComment.getDescription());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return currentComments;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Set\u003cComment\u003e comments;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Set\u003cLeave\u003e leaves;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private Optional\u003cInterviewDate\u003e interviewDate;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        private ApplicationStatus applicationStatus;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setComments(toCopy.comments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setLeaves(toCopy.leaves);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setInterviewDate(toCopy.interviewDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            setApplicationStatus(toCopy.applicationStatus);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, comments,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    leaves, applicationStatus, interviewDate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setComments(Set\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.comments \u003d (comments !\u003d null) ? new HashSet\u003c\u003e(comments) : null;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Set\u003cComment\u003e getComments() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (comments !\u003d null) ? comments : null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setLeaves(Set\u003cLeave\u003e leaves) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.leaves \u003d (leaves !\u003d null) ? new HashSet\u003c\u003e(leaves) : null;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Set\u003cLeave\u003e getLeaves() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (leaves !\u003d null) ? leaves : new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setInterviewDate(Optional\u003cInterviewDate\u003e interviewDate) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (interviewDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                this.interviewDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public Optional\u003cInterviewDate\u003e getInterviewDate() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return this.interviewDate;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public void setApplicationStatus(ApplicationStatus applicationStatus) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.applicationStatus \u003d applicationStatus;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        public ApplicationStatus getApplicationStatus() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return this.applicationStatus;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 109,
      "Ben-Hanan": 18,
      "-": 200,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting eva database as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 15,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/FindApplicantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Finds and lists all persons in eva database whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class FindApplicantCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"Parameters: -a|-s KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cApplicant\u003e predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public FindApplicantCommand(NameContainsKeywordsPredicate\u003cApplicant\u003e predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model.updateFilteredApplicantList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredApplicantList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                || (other instanceof FindApplicantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindApplicantCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 44
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Finds and lists all persons in eva database whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"Parameters: -a|-s KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this(null); // for inheritance"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 33,
      "Hou-Rui": 10,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/FindStaffCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Finds and lists all persons in eva database whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class FindStaffCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"Parameters: -a|-s KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cStaff\u003e predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public FindStaffCommand(NameContainsKeywordsPredicate\u003cStaff\u003e predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model.updateFilteredStaffList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStaffList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                || (other instanceof FindStaffCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStaffCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 44
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_APPLICANTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_STAFFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Lists all staffs or applicants in the eva database to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \": brings up list view of all staffs or applicants.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"parameters: -LIST_TYPE\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"-staff\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all staffs\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final boolean isStaffList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ListCommand(boolean isStaffList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.isStaffList \u003d isStaffList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the command and returns the command result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (isStaffList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.setPanelState(PanelState.STAFF_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.setPanelState(PanelState.APPLICANT_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            model.updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 30,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \": Brings user to the profile card of the person identified by the index number \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"used in the displayed staff or applicant list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_SUCCESS \u003d \"Viewing %1$s: %2$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_CHANGE_PANEL \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \"Please enter the view command at either the staff or applicant lists!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the command and returns the command message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        PanelState panelState \u003d model.getPanelState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String viewing;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (panelState.equals(PanelState.STAFF_LIST)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                viewing \u003d executeViewStaff(model).toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            } else if (panelState.equals(PanelState.APPLICANT_LIST)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                executeViewApplicant(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                viewing \u003d executeViewStaff(model).toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        String.format(Messages.MESSAGE_INVALID_COMMAND_AT_PANEL, MESSAGE_CHANGE_PANEL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                            MESSAGE_VIEW_PERSON_SUCCESS, model.getPanelState().toString(), viewing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    ), false, false, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(ce.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the logic to view Staff and returns the staff being viewed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Staff executeViewStaff(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assert (model !\u003d null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Staff staffToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        model.setPanelState(PanelState.STAFF_PROFILE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        model.setCurrentViewStaff(new CurrentViewStaff(staffToView));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return staffToView;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the logic to view Applicant and returns the Applicant being viewed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Applicant executeViewApplicant(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assert (model !\u003d null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cApplicant\u003e lastShownList \u003d model.getFilteredApplicantList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Applicant applicantToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        model.setPanelState(PanelState.APPLICANT_PROFILE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        model.setCurrentViewApplicant(new CurrentViewApplicant(applicantToView));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return applicantToView;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 96
    }
  },
  {
    "path": "src/main/java/com/eva/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/AddApplicantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.AddApplicantCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.AddStaffCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class AddApplicantCommandParser implements Parser\u003cAddApplicantCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public AddApplicantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMMENT, PREFIX_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // compulsory information of a applicant"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                    AddStaffCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Set\u003cComment\u003e commentList \u003d ParserUtil.parseComments(argMultimap.getAllValues(PREFIX_COMMENT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        ApplicationStatus applicationStatus \u003d new ApplicationStatus(\"received\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Optional\u003cInterviewDate\u003e interviewDate \u003d arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                ? Optional.of(ParserUtil.parseInterviewDate(argMultimap.getValue(PREFIX_DATE).get()))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Applicant applicant \u003d new Applicant(name, phone, email, address, tagList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                commentList, interviewDate, applicationStatus);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new AddApplicantCommand(applicant);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 66
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/AddApplicationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.commands.AddApplicationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Education;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Experience;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class AddApplicationCommandParser implements Parser\u003cAddApplicationCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public AddApplicationCommand parse(String userInput) throws ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            String[] substrings \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            if (substrings.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                        AddApplicationCommand.MESSAGE_USAGE_2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            String indexNo \u003d substrings[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            String filePath \u003d substrings[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            List\u003cEducation\u003e eduList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            List\u003cExperience\u003e expList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            // Name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            String name \u003d sc.nextLine().split(\":\")[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            sc.nextLine(); // read blank line"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            // Education"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                // System.out.println(line.split(\" \")[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                if (line.equals(\"Experience:\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                if (line.length() \u003e 6 \u0026\u0026 line.substring(0, 6).equals(\"School\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    String schoolName \u003d line.split(\" \")[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    String startDate \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    String endDate \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    Education edu \u003d new Education(startDate, endDate, schoolName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    eduList.add(edu);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            // Experience"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                sc.nextLine(); // this should be number"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String company \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String position \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                // take note of semi colon, as 2nd element needs to be entire desc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String description \u003d sc.nextLine().split(\":\")[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String startDate \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                String endDate \u003d sc.nextLine().split(\" \")[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                Experience exp \u003d new Experience(startDate, endDate, company, position, description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                expList.add(exp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            Application application \u003d new Application(name, expList, eduList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(indexNo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return new AddApplicationCommand(index, application);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    AddApplicationCommand.MESSAGE_USAGE_2), pe);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 82
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDORDELETE_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.comment.AddCommentCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.leave.AddLeaveCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class AddCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses Add command: \u0027c-\u0027 for comment, \u0027s-\u0027 for staff, \u0027a-\u0027 for applicant."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException when there are missing fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Command parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STAFF, PREFIX_APPLICANT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        PREFIX_ADDORDELETE_COMMENT, PREFIX_LEAVE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e addStaffCommand \u003d argMultimap.getValue(PREFIX_STAFF);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e addApplicantCommand \u003d argMultimap.getValue(PREFIX_APPLICANT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e addCommentCommand \u003d argMultimap.getValue(PREFIX_ADDORDELETE_COMMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e addLeaveCommand \u003d argMultimap.getValue(PREFIX_LEAVE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!addApplicantCommand.isEmpty() \u0026\u0026 !addCommentCommand.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_2), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommandParser().parse(\" \" + index.getOneBased() + \" a- c- \" + addCommentCommand.get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!addStaffCommand.isEmpty() \u0026\u0026 !addCommentCommand.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            System.out.println(\"in here\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_2), pe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommandParser().parse(\" \" + index.getOneBased() + \" s- c- \" + addCommentCommand.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!addStaffCommand.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddStaffCommandParser().parse(\" \" + addStaffCommand.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!addApplicantCommand.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddApplicantCommandParser().parse(\" \" + addApplicantCommand.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!addLeaveCommand.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_2), pe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddLeaveCommandParser().parse(\" \" + index.getOneBased()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \" l/ \" + addLeaveCommand.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!addCommentCommand.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_2), pe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommandParser().parse(\" \" + index.getOneBased() + \" c- \" + addCommentCommand.get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return this.addParse(args);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public AddCommand addParse(String args) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e commentList \u003d ParserUtil.parseComments(argMultimap.getAllValues(PREFIX_COMMENT));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, commentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 79,
      "Ben-Hanan": 16,
      "-": 28,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/AddStaffCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.AddStaffCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class AddStaffCommandParser implements Parser\u003cAddStaffCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public AddStaffCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // compulsory information of a staff"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                    AddStaffCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Set\u003cComment\u003e commentList \u003d ParserUtil.parseComments(argMultimap.getAllValues(PREFIX_COMMENT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Staff staff \u003d new Staff(name, phone, email, address, tagList, commentList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new AddStaffCommand(staff);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 6,
      "Nikhilalalalala": 53
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns {@code true} if argMultimap is empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final Prefix PREFIX_LEAVE \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_STAFF \u003d new Prefix(\"s-\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_APPLICANT \u003d new Prefix(\"a-\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_ADDORDELETE_COMMENT \u003d new Prefix(\"c-\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEW_DATE \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final Prefix PREFIX_STAFF_LIST \u003d new Prefix(\"-staff\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final Prefix PREFIX_APPLICANT_LIST \u003d new Prefix(\"-applicant\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 4,
      "Ben-Hanan": 3,
      "-": 13,
      "Nikhilalalalala": 3
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/DeleteApplicantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.DeleteApplicantCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Parses input arguments and creates a new DeleteApplicantCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class DeleteApplicantCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteApplicantCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * and returns a DeleteApplicantCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public DeleteApplicantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return new DeleteApplicantCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteApplicantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 27
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDORDELETE_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.comment.DeleteCommentCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.leave.DeleteLeaveCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Command parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STAFF, PREFIX_APPLICANT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        PREFIX_ADDORDELETE_COMMENT, PREFIX_LEAVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Optional\u003cString\u003e deleteStaffCommand \u003d argMultimap.getValue(PREFIX_STAFF);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Optional\u003cString\u003e deleteApplicantCommand \u003d argMultimap.getValue(PREFIX_APPLICANT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e deleteCommentCommand \u003d argMultimap.getValue(PREFIX_ADDORDELETE_COMMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Optional\u003cString\u003e deleteLeaveCommand \u003d argMultimap.getValue(PREFIX_LEAVE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!deleteApplicantCommand.isEmpty() \u0026\u0026 !deleteCommentCommand.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteCommentCommandParser()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parse(\" \" + index.getOneBased() + \" a- c- \" + deleteCommentCommand.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!deleteStaffCommand.isEmpty() \u0026\u0026 !deleteCommentCommand.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteCommentCommandParser()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parse(\" \" + index.getOneBased() + \" s- c- \" + deleteCommentCommand.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!deleteStaffCommand.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteStaffCommandParser()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parse(\" \" + index.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!deleteLeaveCommand.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteLeaveCommandParser()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parse(\" \" + index.getOneBased()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            + \" \" + deleteLeaveCommand.get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 38,
      "Ben-Hanan": 11,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/DeleteStaffCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Parses input arguments and creates a new DeleteStaffCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class DeleteStaffCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStaffCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * and returns a DeleteStaffCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public DeleteStaffCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return new DeleteStaffCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "TheSpaceCuber": 24,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.commands.EditCommand.MESSAGE_NO_APPLICANTORSTAFF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap typeMap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APPLICANT, PREFIX_STAFF);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean isApplicant \u003d (!typeMap.getValue(PREFIX_APPLICANT).isEmpty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean isStaff \u003d (!typeMap.getValue(PREFIX_STAFF).isEmpty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (isApplicant) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            PREFIX_ADDRESS, PREFIX_TAG, PREFIX_APPLICANT, PREFIX_COMMENT, PREFIX_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            PREFIX_ADDRESS, PREFIX_TAG, PREFIX_STAFF, PREFIX_COMMENT, PREFIX_LEAVE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        parseCommentsForEdit(argMultimap.getAllValues(PREFIX_COMMENT)).ifPresent(editPersonDescriptor::setComments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            editPersonDescriptor.setInterviewDate(Optional.ofNullable(ParserUtil"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parseInterviewDate(argMultimap.getValue(PREFIX_DATE).get())));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_LEAVE).size() \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            editPersonDescriptor.setLeaves((Set\u003cLeave\u003e) ParserUtil"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .parseLeaveArgs(argMultimap.getAllValues(PREFIX_LEAVE)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_APPLICANT).isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            ApplicationStatus applicationStatus \u003d new ApplicationStatus(\"received\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            editPersonDescriptor.setApplicationStatus(applicationStatus);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new EditCommand(index, editPersonDescriptor, \"applicant\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_STAFF).isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new EditCommand(index, editPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(MESSAGE_NO_APPLICANTORSTAFF);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Optional\u003cSet\u003cComment\u003e\u003e parseCommentsForEdit(Collection\u003cString\u003e comments) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert comments !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Collection\u003cString\u003e commentSet \u003d comments.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 comments.contains(\"\") ? Collections.emptySet() : comments;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return Optional.of(ParserUtil.parseComments(commentSet));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 59,
      "Ben-Hanan": 13,
      "-": 64
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/EvaParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.AddApplicantCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.logic.commands.AddApplicationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddLeaveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddStaffCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.logic.commands.DeleteApplicantCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteLeaveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.comment.CommentCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.leave.AddLeaveCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.leave.DeleteLeaveCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class EvaParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        case AddStaffCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return new AddStaffCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case DeleteStaffCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new DeleteStaffCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case CommentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new CommentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case AddLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new AddLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case DeleteLeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new DeleteLeaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        case AddApplicantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return new AddApplicantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        case DeleteApplicantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return new DeleteApplicantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case AddApplicationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return new AddApplicationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 41,
      "TheSpaceCuber": 6,
      "-": 55,
      "Nikhilalalalala": 12
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.logic.commands.FindApplicantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.logic.commands.FindStaffCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String[] shiftedNameKeywords \u003d Arrays.copyOfRange(nameKeywords, 1, nameKeywords.length);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        switch (nameKeywords[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return new FindApplicantCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(shiftedNameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"-s\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return new FindStaffCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(shiftedNameKeywords)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 23,
      "Hou-Rui": 11
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STAFF_LIST, PREFIX_APPLICANT_LIST);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (argMultimap.isEmpty()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STAFF_LIST).isPresent()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ListCommand(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_APPLICANT_LIST).isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ListCommand(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 31
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    T parse(String userInput) throws ParseException, FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "TheSpaceCuber": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.StringUtil.formatForParse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "//import static com.eva.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddLeaveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses the commands inside comment input"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param comment comment input"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return Comment object created with input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static Comment parseComment(String comment) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String trimmedComment \u003d comment.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!Comment.isValidComment(trimmedComment)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(\" \" + comment,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                PREFIX_DATE, PREFIX_TITLE, PREFIX_DESC);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (argMultiMap.getAllValues(PREFIX_DATE).size() !\u003d 0"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 argMultiMap.getAllValues(PREFIX_TITLE).size() !\u003d 0"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 argMultiMap.getAllValues(PREFIX_DESC).size() !\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String date \u003d argMultiMap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            if (!DateUtil.isValidDate(date)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                throw new ParseException(DateUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String title \u003d argMultiMap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String desc \u003d argMultiMap.getValue(PREFIX_DESC).get();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return new Comment(DateUtil.dateParsed(date), desc, title);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String title \u003d argMultiMap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new Comment(title);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Parses {@code String leaveDates} into a {@code Leave}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Assumption: no more than 2 leave dates are entered."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if the given {@code leaveDate} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static Leave parseLeave(List\u003cString\u003e leaveDates) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(leaveDates);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (leaveDates.size() \u003e 2 || leaveDates.size() \u003c 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException(AddLeaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        String trimmedDate \u003d leaveDates.get(0).trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!DateUtil.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new ParseException(DateUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (leaveDates.size() \u003e 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String trimmedEndDate \u003d leaveDates.get(1).trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new Leave(trimmedDate, trimmedEndDate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new Leave(trimmedDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Parses the date arguments inside individual leave input"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param leaveArgsList add leave input"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return list of leaves created."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if the any leaveArgs in {@code leaveArgsList} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static List\u003cLeave\u003e parseLeaveArgs(List\u003cString\u003e leaveArgsList) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(leaveArgsList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ArrayList\u003cLeave\u003e leaves \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (String leaveArgs : leaveArgsList) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ArgumentMultimap dateArgMultimap \u003d ArgumentTokenizer.tokenize(formatForParse(leaveArgs), PREFIX_DATE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            List\u003cString\u003e leaveDates \u003d dateArgMultimap.getAllValues(PREFIX_DATE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Leave leave \u003d parseLeave(leaveDates);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            leaves.add(leave);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return leaves;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Converts string with details of comments into a Comment object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param comments strings of details"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return Set of comment objects"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static Set\u003cComment\u003e parseComments(Collection\u003cString\u003e comments) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(comments);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        final Set\u003cComment\u003e commentSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (String comment : comments) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            commentSet.add(parseComment(comment));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return commentSet;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses {@code String leaveDates} into a {@code Leave}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Assumption: no more than 2 leave dates are entered."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static InterviewDate parseInterviewDate(String value) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (!DateUtil.isValidDate(value.trim())) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new ParseException(DateUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new InterviewDate(value.trim());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 45,
      "Ben-Hanan": 67,
      "-": 115,
      "Nikhilalalalala": 18
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 28
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/comment/AddCommentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.logic.parser.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDORDELETE_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.AddCommentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.CommentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class AddCommentCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * For consolidated add commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return commentCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException when there are missing fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDORDELETE_COMMENT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        PREFIX_APPLICANT, PREFIX_STAFF);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CommentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        CommentCommand.CommentPersonDescriptor commentPersonDescriptor \u003d new CommentCommand.CommentPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        parseCommentsForEdit(argMultimap.getAllValues(PREFIX_ADDORDELETE_COMMENT))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .ifPresent(commentPersonDescriptor::setComments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!commentPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_APPLICANT).isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommand(index, commentPersonDescriptor, \"applicant\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_STAFF).isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new AddCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Optional\u003cSet\u003cComment\u003e\u003e parseCommentsForEdit(Collection\u003cString\u003e comments) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert comments !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Collection\u003cString\u003e commentSet \u003d comments.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 comments.contains(\"\") ? Collections.emptySet() : comments;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return Optional.of(ParserUtil.parseComments(commentSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 77
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/comment/CommentCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class CommentCliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"desc:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_ADD \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final Prefix PREFIX_DELETE \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 12,
      "Ben-Hanan": 1
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/comment/CommentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.AddCommentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.CommentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.DeleteCommentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class CommentCommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CommentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap addCommands \u003d ArgumentTokenizer.tokenize(args, PREFIX_ADD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap deleteCommands \u003d ArgumentTokenizer.tokenize(args, PREFIX_DELETE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        CommentCommand.CommentPersonDescriptor commentPersonDescriptor \u003d new CommentCommand.CommentPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        parseCommentsForEdit(argMultimap.getAllValues(PREFIX_COMMENT)).ifPresent(commentPersonDescriptor::setComments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!commentPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (addCommands.getAllValues(PREFIX_ADD).size() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new AddCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (deleteCommands.getAllValues(PREFIX_DELETE).size() !\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(\"Comment has no such commands.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Optional\u003cSet\u003cComment\u003e\u003e parseCommentsForEdit(Collection\u003cString\u003e comments) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert comments !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Collection\u003cString\u003e commentSet \u003d comments.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 comments.contains(\"\") ? Collections.emptySet() : comments;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return Optional.of(ParserUtil.parseComments(commentSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 71,
      "Ben-Hanan": 6
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/comment/DeleteCommentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.logic.parser.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDORDELETE_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_APPLICANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_STAFF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.CommentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.DeleteCommentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DeleteCommentCommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * For consolidated delete commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public CommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDORDELETE_COMMENT, PREFIX_APPLICANT, PREFIX_STAFF);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CommentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        CommentCommand.CommentPersonDescriptor commentPersonDescriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new CommentCommand.CommentPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        parseCommentsForEdit(argMultimap.getAllValues(PREFIX_ADDORDELETE_COMMENT))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .ifPresent(commentPersonDescriptor::setComments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!commentPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_APPLICANT).isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteCommentCommand(index, commentPersonDescriptor, \"applicant\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_STAFF).isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new DeleteCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new DeleteCommentCommand(index, commentPersonDescriptor, \"staff\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Optional\u003cSet\u003cComment\u003e\u003e parseCommentsForEdit(Collection\u003cString\u003e comments) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert comments !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Collection\u003cString\u003e commentSet \u003d comments.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 comments.contains(\"\") ? Collections.emptySet() : comments;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return Optional.of(ParserUtil.parseComments(commentSet));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 73
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/leave/AddLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.parseIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.parseLeaveArgs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddLeaveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Parses input and creates a new AddLeaveCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class AddLeaveCommandParser implements Parser\u003cAddLeaveCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLeaveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * and returns an AddLeaveCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public AddLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ArgumentMultimap leaveArgMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LEAVE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!arePrefixesPresent(leaveArgMultimap, PREFIX_LEAVE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || leaveArgMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Index index \u003d parseIndex(leaveArgMultimap.getPreamble()); // errors if index is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            List\u003cString\u003e leaveArgsList \u003d leaveArgMultimap.getAllValues(PREFIX_LEAVE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            List\u003cLeave\u003e leaves \u003d parseLeaveArgs(leaveArgsList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new AddLeaveCommand(index, leaves);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 52
    }
  },
  {
    "path": "src/main/java/com/eva/logic/parser/leave/DeleteLeaveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.comment.CommentCliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteLeaveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Parses input and creates a new DeleteLeaveCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DeleteLeaveCommandParser implements Parser\u003cDeleteLeaveCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteLeaveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * and returns an DeleteLeaveCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DeleteLeaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteLeaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble()); // errors if index is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            LocalDate delDate \u003d DateUtil.dateParsed(argMultimap.getValue(PREFIX_DATE).get(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new DeleteLeaveCommand(index, delDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 52
    }
  },
  {
    "path": "src/main/java/com/eva/model/EvaDatabase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class EvaDatabase\u003cP extends Person\u003e implements ReadOnlyEvaDatabase\u003cP\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final UniquePersonList\u003cP\u003e persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        persons \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Creates an EvaDatabase using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase(ReadOnlyEvaDatabase\u003cP\u003e toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersons(List\u003cP\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Resets the existing data of this {@code EvaDatabase} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void resetData(ReadOnlyEvaDatabase\u003cP\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the eva database."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean hasPerson(P person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Adds a person to the eva database."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person must not already exist in the eva database."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void addPerson(P p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code target} must exist in the eva database."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the eva database."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPerson(P target, P editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Removes {@code key} from this {@code EvaDatabase}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code key} must exist in the eva database."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void removePerson(P key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ObservableList\u003cP\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                || (other instanceof EvaDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 persons.equals(((EvaDatabase\u003c?\u003e) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "TheSpaceCuber": 1,
      "-": 93,
      "Hou-Rui": 17,
      "Nikhilalalalala": 6
    }
  },
  {
    "path": "src/main/java/com/eva/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Predicate\u003cStaff\u003e PREDICATE_SHOW_ALL_STAFFS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Predicate\u003cApplicant\u003e PREDICATE_SHOW_ALL_APPLICANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current PanelState."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    PanelState getPanelState();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Sets the current panelState according to what the user is viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void setPanelState(PanelState panelState);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Sets the currentViewStaff to the staff the user is currently viewing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void setCurrentViewStaff(CurrentViewStaff currentViewStaff);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Sets the currentViewApplicant to the applicant the user is currently viewing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void setCurrentViewApplicant(CurrentViewApplicant currentViewStaff);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current staff being viewed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    CurrentViewStaff getCurrentViewStaff();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the current applicant being viewed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    CurrentViewApplicant getCurrentViewApplicant();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns the user prefs\u0027 persons data file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns the user prefs\u0027 staff data file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    Path getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns the user prefs\u0027 applicant data file path."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getApplicantDatabaseFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Sets the user prefs\u0027 person database file path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setPersonDatabaseFilePath(Path evaDatabaseFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Sets the user prefs\u0027 staff database file path."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    void setStaffDatabaseFilePath(Path staffDatabaseFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Sets the user prefs\u0027 applicant database file path."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setApplicantDatabaseFilePath(Path applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Replaces eva database data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setPersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e personDatabase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /** Returns the EvaDatabase */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ReadOnlyEvaDatabase\u003cPerson\u003e getPersonDatabase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the eva database."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person must exist in the eva database."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code person} must not already exist in the eva database."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds the given leave to the given staff."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code leave} must not already exist in the staff\u0027s {@code leaves}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void addStaffLeave(Staff target, Leave leave);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Deletes the given leave from the given staff."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code leave} must already exist in the staff\u0027s {@code leaves}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void deleteStaffLeave(Staff target, Leave leave);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if a staff with the same identity as {@code staff} has the same leave as {@code leave}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    boolean hasStaffLeave(Staff target, Leave leave);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the conflicting leave if a staff with the same identity as {@code staff}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * has the same leave period as {@code leave}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Optional\u003cLeave\u003e hasLeaveDate(Staff target, LocalDate date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if a staff with the same identity as {@code staff}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * has the same leave period as {@code leave}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    boolean hasLeavePeriod(Staff target, Leave leave);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code target} must exist in the eva database."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the eva database."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Replaces eva database data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e personDatabase);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the EvaDatabase."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ReadOnlyEvaDatabase\u003cStaff\u003e getStaffDatabase();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the eva database."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    boolean hasStaff(Staff person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Deletes the given staff."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The staff must exist in the eva database."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void deleteStaff(Staff target);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code person} must not already exist in the eva database."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void addStaff(Staff person);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code target} must exist in the eva database."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the eva database."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setStaff(Staff target, Staff editedPerson);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ObservableList\u003cStaff\u003e getFilteredStaffList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Replaces eva database data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e personDatabase);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /** Returns the EvaDatabase */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ReadOnlyEvaDatabase\u003cApplicant\u003e getApplicantDatabase();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the eva database."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    boolean hasApplicant(Applicant person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person must exist in the eva database."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void deleteApplicant(Applicant target);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code person} must not already exist in the eva database."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void addApplicant(Applicant person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Adds the given leave to the given staff."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * {@code leave} must not already exist in the staff\u0027s {@code leaves}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    void addApplicantApplication(Applicant target, Application toAdd);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code target} must exist in the eva database."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the eva database."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void setApplicant(Applicant target, Applicant editedPerson);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ObservableList\u003cApplicant\u003e getFilteredApplicantList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void updateFilteredApplicantList(Predicate\u003cApplicant\u003e predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 76,
      "TheSpaceCuber": 7,
      "-": 73,
      "Hou-Rui": 87,
      "Nikhilalalalala": 27
    }
  },
  {
    "path": "src/main/java/com/eva/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents the in-memory model of the eva database data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final EvaDatabase\u003cPerson\u003e personDatabase;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final EvaDatabase\u003cStaff\u003e staffDatabase;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final EvaDatabase\u003cApplicant\u003e applicantDatabase;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final FilteredList\u003cStaff\u003e filteredStaffs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final FilteredList\u003cApplicant\u003e filteredApplicants;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private CurrentViewStaff currentViewStaff;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private CurrentViewApplicant currentViewApplicant;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ModelManager(ReadOnlyEvaDatabase\u003cPerson\u003e personDatabase, ReadOnlyEvaDatabase\u003cStaff\u003e staffDatabase,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                        ReadOnlyEvaDatabase\u003cApplicant\u003e applicantDatabase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireAllNonNull(personDatabase, staffDatabase, applicantDatabase, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.fine(\"Initializing with person database: \" + personDatabase"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                + \" and staff database: \" + staffDatabase"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                + \" and applicant database: \" + applicantDatabase"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.personDatabase \u003d new EvaDatabase\u003c\u003e(personDatabase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffDatabase \u003d new EvaDatabase\u003c\u003e(staffDatabase);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.applicantDatabase \u003d new EvaDatabase\u003c\u003e(applicantDatabase);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personDatabase.getPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        filteredStaffs \u003d new FilteredList\u003c\u003e(this.staffDatabase.getPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        filteredApplicants \u003d new FilteredList\u003c\u003e(this.applicantDatabase.getPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentViewStaff \u003d new CurrentViewStaff();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentViewApplicant \u003d new CurrentViewApplicant();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this(new EvaDatabase\u003c\u003e(), new EvaDatabase\u003c\u003e(), new EvaDatabase\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public PanelState getPanelState() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return userPrefs.getPanelState();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setPanelState(PanelState panelState) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        userPrefs.setPanelState(panelState);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setCurrentViewStaff(CurrentViewStaff currentViewStaff) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (currentViewStaff.getCurrentView().isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.currentViewStaff \u003d currentViewStaff;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new IllegalArgumentException(); // placeholder exception"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setCurrentViewApplicant(CurrentViewApplicant currentViewApplicant) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (currentViewApplicant.getCurrentView().isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.currentViewApplicant \u003d currentViewApplicant;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new IllegalArgumentException(); // placeholder exception"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getPersonDatabaseFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return userPrefs.getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return userPrefs.getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getApplicantDatabaseFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return userPrefs.getApplicantDatabaseFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersonDatabaseFilePath(Path evaDatabaseFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(evaDatabaseFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        userPrefs.setPersonDatabaseFilePath(evaDatabaseFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setStaffDatabaseFilePath(Path staffDatabaseFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(staffDatabaseFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        userPrefs.setStaffDatabaseFilePath(staffDatabaseFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setApplicantDatabaseFilePath(Path applicantDatabaseFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userPrefs.setStaffDatabaseFilePath(applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d person database \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e personDatabase) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.personDatabase.resetData(personDatabase);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ReadOnlyEvaDatabase\u003cPerson\u003e getPersonDatabase() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return personDatabase;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return personDatabase.hasPerson(person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        personDatabase.removePerson(target);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        personDatabase.addPerson(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void addStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        target.getLeaves().add(leave);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        target.getLeaveBalance().deductLeaveBalance(leave.getLeaveLength());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void deleteStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        target.getLeaves().remove(leave);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        target.getLeaveBalance().addLeaveBalance(leave.getLeaveLength());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean hasStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return target.getLeaves().contains(leave);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Optional\u003cLeave\u003e hasLeaveDate(Staff target, LocalDate date) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cLeave\u003e staffLeaves \u003d new ArrayList\u003c\u003e(target.getLeaves());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (Leave leave : staffLeaves) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            boolean dateOnStart \u003d leave.getStartDate().isEqual(date);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            boolean dateOnEnd \u003d leave.getEndDate().isEqual(date);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            boolean dateBetween \u003d leave.getStartDate().isBefore(date) \u0026\u0026 leave.getEndDate().isAfter(date);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (dateOnStart || dateOnEnd || dateBetween) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                return Optional.of(leave);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean hasLeavePeriod(Staff target, Leave toCheck) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cLocalDate\u003e leaveDates \u003d DateUtil.getDatesBetween(toCheck.getStartDate(), toCheck.getEndDate());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (LocalDate date : leaveDates) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (hasLeaveDate(target, date).isPresent()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        personDatabase.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d staff database \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e staffDatabase) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffDatabase.resetData(staffDatabase);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ReadOnlyEvaDatabase\u003cStaff\u003e getStaffDatabase() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return staffDatabase;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return staffDatabase.hasPerson(staff);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void deleteStaff(Staff target) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        staffDatabase.removePerson(target);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void addStaff(Staff staff) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        staffDatabase.addPerson(staff);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFFS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setStaff(Staff target, Staff editedStaff) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireAllNonNull(target, editedStaff);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        staffDatabase.setPerson(target, editedStaff);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d applicant database \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e applicantDatabase) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.applicantDatabase.resetData(applicantDatabase);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ReadOnlyEvaDatabase\u003cApplicant\u003e getApplicantDatabase() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return applicantDatabase;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean hasApplicant(Applicant applicant) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(applicant);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return applicantDatabase.hasPerson(applicant);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void deleteApplicant(Applicant target) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        applicantDatabase.removePerson(target);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void addApplicant(Applicant applicant) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicantDatabase.addPerson(applicant);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void addApplicantApplication(Applicant target, Application toAdd) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        target.setApplication(toAdd);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setApplicant(Applicant target, Applicant editedPerson) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        applicantDatabase.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Staff List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return filteredStaffs;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewStaff getCurrentViewStaff() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return currentViewStaff;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        filteredStaffs.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Applicant List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ObservableList\u003cApplicant\u003e getFilteredApplicantList() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return filteredApplicants;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewApplicant getCurrentViewApplicant() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return currentViewApplicant;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void updateFilteredApplicantList(Predicate\u003cApplicant\u003e predicate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        filteredApplicants.setPredicate(predicate);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return personDatabase.equals(other.personDatabase)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 staffDatabase.equals(other.staffDatabase)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 applicantDatabase.equals(other.applicantDatabase)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 101,
      "TheSpaceCuber": 6,
      "-": 125,
      "Hou-Rui": 141,
      "Nikhilalalalala": 21
    }
  },
  {
    "path": "src/main/java/com/eva/model/ReadOnlyEvaDatabase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Unmodifiable view of an Eva database"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public interface ReadOnlyEvaDatabase\u003cP\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ObservableList\u003cP\u003e getPersonList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 9,
      "Hou-Rui": 3
    }
  },
  {
    "path": "src/main/java/com/eva/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 13,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path personDatabaseFilePath \u003d Paths.get(\"data\" , \"personDatabase.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path staffDatabaseFilePath \u003d Paths.get(\"data\" , \"staffDatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path applicantDatabaseFilePath \u003d Paths.get(\"data\" , \"applicantDatabase.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        setPersonDatabaseFilePath(newUserPrefs.getPersonDatabaseFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public PanelState getPanelState() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return guiSettings.getPanelState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setPanelState(PanelState panelState) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        guiSettings.setPanelState(panelState);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getPersonDatabaseFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return personDatabaseFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersonDatabaseFilePath(Path personDatabaseFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(personDatabaseFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.personDatabaseFilePath \u003d personDatabaseFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return staffDatabaseFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setStaffDatabaseFilePath(Path staffDatabaseFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(staffDatabaseFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffDatabaseFilePath \u003d personDatabaseFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getApplicantDatabaseFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return applicantDatabaseFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setApplicantDatabaseFilePath(Path applicantDatabaseFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.applicantDatabaseFilePath \u003d applicantDatabaseFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 personDatabaseFilePath.equals(o.personDatabaseFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return Objects.hash(guiSettings, personDatabaseFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + personDatabaseFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 11,
      "-": 74,
      "Hou-Rui": 30
    }
  },
  {
    "path": "src/main/java/com/eva/model/comment/Comment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public final Title title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Create comment object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param date date of comment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description description of comment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param title title of comment"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Comment(LocalDate date, String description, String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Creates Comment object when deleting comments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param title title of comment to delete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Comment(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                || (other instanceof Comment // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 title.getTitle().equals(((Comment) other).getTitle().getTitle())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 description.equals(((Comment) other).description)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u0026\u0026 date.equals(((Comment) other).date)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return Objects.hash(description, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static boolean isValidComment(String comment) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void update(String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.title.getTitle() + \": \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if comment is same as otherComment."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean isSameComment(Comment otherComment) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (otherComment \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return otherComment !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 otherComment.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 otherComment.getDate().equals(getDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 otherComment.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 72,
      "Ben-Hanan": 14
    }
  },
  {
    "path": "src/main/java/com/eva/model/comment/CommentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CommentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4
    }
  },
  {
    "path": "src/main/java/com/eva/model/comment/DuplicateCommentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DuplicateCommentException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DuplicateCommentException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(\"Operation would result in duplicate comments\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 7
    }
  },
  {
    "path": "src/main/java/com/eva/model/comment/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    Title(String title) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean equals(Title t) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this.title.equals(t.getTitle());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 17
    }
  },
  {
    "path": "src/main/java/com/eva/model/current/view/CurrentViewApplicant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.current.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CurrentViewApplicant {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Applicant currentView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewApplicant() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentView \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewApplicant(Applicant currentView) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentView \u003d currentView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Optional\u003cApplicant\u003e getCurrentView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Optional.ofNullable(currentView);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 23
    }
  },
  {
    "path": "src/main/java/com/eva/model/current/view/CurrentViewStaff.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.current.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.UniqueLeaveList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CurrentViewStaff {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Staff currentView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final UniqueLeaveList leaves;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates an empty currentViewStaff."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewStaff() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentView \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaves \u003d new UniqueLeaveList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a currentView with the current viewing staff."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentViewStaff(Staff currentView) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(currentView);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.currentView \u003d currentView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaves \u003d new UniqueLeaveList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaves.fill(currentView.getLeaves());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Optional\u003cStaff\u003e getCurrentView() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Optional.ofNullable(currentView);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 36
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Person\u0027s address in the eva database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 54,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Person\u0027s email in the eva database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 64,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Person\u0027s name in the eva database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 56,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class NameContainsKeywordsPredicate\u003cP extends Person\u003e implements Predicate\u003cP\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean test(P person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate\u003c?\u003e) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 26,
      "Hou-Rui": 3
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Person in the eva database."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final Set\u003cComment\u003e comments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.comments.addAll(comments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Set\u003cComment\u003e getComments() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public List\u003cComment\u003e getCommentsList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new ArrayList\u003c\u003e(comments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 8,
      "Ben-Hanan": 9,
      "-": 115,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Person\u0027s phone number in the eva database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 50,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/UniqueCommentsList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.comment.CommentNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.comment.DuplicateCommentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class UniqueCommentsList implements Iterable\u003cComment\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final ObservableList\u003cComment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final ObservableList\u003cComment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean contains(Comment toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameComment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void add(Comment toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicateCommentException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setPerson(Comment target, Comment editedComment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(target, editedComment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommentNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!target.isSameComment(editedComment) \u0026\u0026 contains(editedComment)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicateCommentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.set(index, editedComment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void remove(Comment toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new CommentNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setComments(UniqueCommentsList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setPersons(List\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(comments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!commentsAreUnique(comments)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.setAll(comments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ObservableList\u003cComment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Iterator\u003cComment\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || (other instanceof UniqueCommentsList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCommentsList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private boolean commentsAreUnique(List\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (int i \u003d 0; i \u003c comments.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c comments.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                if (comments.get(i).isSameComment(comments.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 140
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class UniquePersonList\u003cP extends Person\u003e implements Iterable\u003cP\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final ObservableList\u003cP\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final ObservableList\u003cP\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean contains(P toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void add(P toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPerson(P target, P editedPerson) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void remove(P toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersons(UniquePersonList\u003cP\u003e replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setPersons(List\u003cP\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public ObservableList\u003cP\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Iterator\u003cP\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList\u003c?\u003e) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private boolean personsAreUnique(List\u003cP\u003e persons) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 120,
      "Hou-Rui": 13
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/Applicant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents the Applicant to be stored by Eva."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class Applicant extends Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Optional\u003cInterviewDate\u003e interviewDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private ApplicationStatus applicationStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private Application application;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates of an applicant object with a fixed interview date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Applicant(Name name,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Phone phone,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Email email,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Address address,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Set\u003cComment\u003e comments,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Optional\u003cInterviewDate\u003e interviewDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     ApplicationStatus status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.application \u003d new Application();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates of an applicant object without a fixed interview date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Applicant(Name name,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Phone phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Email email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Address address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     Set\u003cComment\u003e comments,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                     ApplicationStatus status) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus \u003d status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.application \u003d new Application();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Creates an Applicant object from a Person Object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param interviewDate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Applicant(Person person, InterviewDate interviewDate, ApplicationStatus status) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                person.getTags(), person.getComments(), Optional.ofNullable(interviewDate), status);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.application \u003d new Application();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status of the specific applicant to be accepted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setApplicantAccepted() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus.setAccepted();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status of the specific applicant to be processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setApplicantProcessing() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus.setProcessing();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status of the specific applicant to be rejected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setApplicantRejected() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus.setRejected();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Optional\u003cInterviewDate\u003e getInterviewDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return interviewDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the interview date of the specific applicant."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setInterviewDate(InterviewDate interviewDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d Optional.ofNullable(interviewDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ApplicationStatus getApplicationStatus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return applicationStatus;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void setApplication(Application application) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        assert application !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.application \u003d application;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Application getApplication() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return application;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        builder.append(\" Interview Date: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(getInterviewDate().isEmpty() ? \"Interview date not set yet\" : getInterviewDate())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(\" Application Status: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .append(getApplicationStatus());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 14,
      "Nikhilalalalala": 108,
      "Hou-Rui": 10
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/ApplicationStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents the application status of an applicant - accepted, rejected or processing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicationStatus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \"Application Status should only contain the words: processing, accepted, rejected. It should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private PossibleApplicationStatus value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates an object representing the application status of the applicant."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ApplicationStatus(String status) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        status \u003d status.strip().toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        checkArgument(isValidApplicationStatus(status), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.value \u003d PossibleApplicationStatus.getStatus(status);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Checks whether the application status is a valid status - accepted, rejected or processing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static boolean isValidApplicationStatus(String status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            PossibleApplicationStatus.getStatus(status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status to processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setProcessing() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.value \u003d PossibleApplicationStatus.PROCESSING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status to accepted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setAccepted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.value \u003d PossibleApplicationStatus.ACCEPTED;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Sets the application status to rejected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setRejected() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.value \u003d PossibleApplicationStatus.REJECTED;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 69
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/InterviewDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents the interview date of an applicant."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class InterviewDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Interview Date should have the format dd/MM/yyyy. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            + \"\\n For example: 02112020 for 2nd November 2020\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final LocalDate interviewDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates an object representing the interview date of the applicant from a string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param date String representation of interview date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public InterviewDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        checkArgument(isValidInterviewDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d parseDate(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private static LocalDate parseDate(String date) throws DateTimeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return DateUtil.dateParsed(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Checks the validity of the date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param date String representation of date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return True if the date is given in dd/MM/yyyy format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static boolean isValidInterviewDate(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            parseDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Checks if the interview is over relative to the current date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @return True if the interview date is earlier than the current date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return this.interviewDate.compareTo(LocalDate.now()) \u003c 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return DateUtil.dateToString(interviewDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 52,
      "Hou-Rui": 7
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/PossibleApplicationStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public enum PossibleApplicationStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    RECEIVED(\"received\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    PROCESSING(\"processing\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    ACCEPTED(\"accepted\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    REJECTED(\"rejected\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    PossibleApplicationStatus(String status) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static PossibleApplicationStatus getStatus(String status) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (status.equals(RECEIVED.status)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return RECEIVED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } else if (status.equals(PROCESSING.status)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return PROCESSING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } else if (status.equals(ACCEPTED.status)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return ACCEPTED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } else if (status.equals(REJECTED.status)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return REJECTED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            // should not reach here"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 36
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/application/Application.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.model.person.applicant.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " * Represents an Applicant\u0027s application, similar to a resume."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String applicantName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private List\u003cExperience\u003e experienceSection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private List\u003cEducation\u003e educationSection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Creates an Application object that contains name, experience and education."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param applicantName The name of the applicant."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param experienceSection A list of experiences."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param educationSection A list of educational history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Application(String applicantName, List\u003cExperience\u003e experienceSection, List\u003cEducation\u003e educationSection) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(applicantName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(experienceSection);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireNonNull(educationSection);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.applicantName \u003d applicantName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.experienceSection \u003d experienceSection;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.educationSection \u003d educationSection;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Creates a blank Application object without details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Application() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.applicantName \u003d \"Default\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.experienceSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.educationSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public List\u003cExperience\u003e getExperienceSection() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return experienceSection;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public List\u003cEducation\u003e getEducationSection() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return educationSection;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String getApplicantName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return applicantName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        String experienceString \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        String educationString \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        for (Experience exp : this.experienceSection) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            experienceString +\u003d exp.toString() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        for (Education edu : this.educationSection) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            educationString +\u003d edu.toString() + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(this.applicantName)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\n\\nExperience ---------------------\\n\\n\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(experienceString)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nEducation ---------------------\\n\\n\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(educationString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 72
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/application/Education.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.model.person.applicant.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " * Represents an applicant\u0027s education at a particular institution, similar to what is seen in a resume."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class Education {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should have the format dd/MM/yyyy. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"\\n For example: 02112020 for 2nd November 2020\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String schoolName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Creates an Education object for one institution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param startDate The start date of that particular education."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param endDate The end date of that particular education."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param schoolName The name of the institution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Education(String startDate, String endDate, String schoolName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireAllNonNull(startDate, endDate, schoolName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        checkArgument(isValidDate(startDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        checkArgument(isValidDate(endDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d parseDate(startDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d parseDate(endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.schoolName \u003d schoolName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private static LocalDate parseDate(String date) throws DateTimeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return DateUtil.dateParsed(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Checks the validity of the date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param date String representation of date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @return True if the date is given in dd/MM/yyyy format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            parseDate(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void setStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String getSchoolName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return schoolName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        builder.append(getSchoolName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nFrom: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(DateUtil.dateToString(this.startDate))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(DateUtil.dateToString(this.endDate))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 86
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/applicant/application/Experience.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.model.person.applicant.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " * Represents an applicant\u0027s experience at a particular company, similar to what is seen in a resume."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class Experience {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should have the format dd/MM/yyyy. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            + \"\\n For example: 02112020 for 2nd November 2020\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String companyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String position;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Creates an experience object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param startDate The start date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param endDate The end date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param companyName The name of the company."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param position The position held."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @param description The description of the job."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Experience(String startDate, String endDate, String companyName, String position, String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        requireAllNonNull(startDate, endDate, companyName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        checkArgument(isValidDate(startDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        checkArgument(isValidDate(endDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d parseDate(startDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d parseDate(endDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private static LocalDate parseDate(String date) throws DateTimeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return DateUtil.dateParsed(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            parseDate(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void setStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String getCompanyName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String getPosition() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        builder.append(getCompanyName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nRole: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(getPosition())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nFrom: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(DateUtil.dateToString(this.startDate))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nTo: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(DateUtil.dateToString(this.endDate))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        builder.append(getCompanyName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\"\\nFrom: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "                .append(getEndDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 106
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/Staff.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.LeaveBalance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Staff extends Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Leave balance is set to DEFAULT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final LeaveBalance leaveBalance \u003d new LeaveBalance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Set\u003cLeave\u003e leaves \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param comments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Staff(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param leaves"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Staff(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                 Set\u003cTag\u003e tags, Set\u003cLeave\u003e leaves, Set\u003cComment\u003e comments) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        requireNonNull(leaves);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaves.addAll(leaves);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Creates a Staff object from a Person Object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param leaves"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Staff(Person person, Set\u003cLeave\u003e leaves) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this(person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                person.getAddress(), person.getTags(), leaves, person.getComments());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Set\u003cLeave\u003e getLeaves() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return leaves;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public LeaveBalance getLeaveBalance() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return leaveBalance;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 15,
      "Ben-Hanan": 41,
      "Nikhilalalalala": 15,
      "Hou-Rui": 4
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/DefaultLeaveBalance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DefaultLeaveBalance {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final int DEFAULT \u003d 14;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private int defaultLeave;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *  Creates a default leave balance object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    DefaultLeaveBalance() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.defaultLeave \u003d DEFAULT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int getDefaultLeave() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return defaultLeave;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setDefaultLeave(int newDefaultLeave) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.defaultLeave \u003d newDefaultLeave;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 20,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/Leave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.dateParsed;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.getDaysBetween;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Leave period in the eva database."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Guarantees: immutable; date is valid if it is made;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Leave {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Leave date should be in the format dd/mm/yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String SINGLE_DAY_LEAVE \u003d \"%d day of leave on %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final int SINGLE_LEAVE_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String MULTIPLE_DAY_LEAVE \u003d \"%d days of leave from %s to %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final LocalDate startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final LocalDate endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final int leaveLength;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constructs a {@code Leave}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param date A valid leave start date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Leave(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.startDate \u003d dateParsed(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.endDate \u003d startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        leaveLength \u003d SINGLE_LEAVE_LENGTH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constructs a {@code Leave}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param startDate A valid leave start date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param endDate   A valid leave end date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Leave(String startDate, String endDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.startDate \u003d dateParsed(startDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.endDate \u003d dateParsed(endDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        leaveLength \u003d getDaysBetween(this.startDate, this.endDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int getLeaveLength() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return leaveLength;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || (other instanceof Leave // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 (endDate.equals(((Leave) other).endDate)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 startDate.equals(((Leave) other).startDate))); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return Objects.hash(endDate, startDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toErrorMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (startDate.equals(endDate)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return \"on \" + startDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return \"from \" + startDate + \" to \" + endDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (startDate.equals(endDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return String.format(SINGLE_DAY_LEAVE, leaveLength, startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return String.format(MULTIPLE_DAY_LEAVE, leaveLength, startDate, endDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 90,
      "Nikhilalalalala": 1,
      "Hou-Rui": 8
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/LeaveBalance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.IntegerUtil.requirePositive;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a staff\u0027s leave balance."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class LeaveBalance {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final DefaultLeaveBalance DEFAULT_LEAVE_BALANCE \u003d new DefaultLeaveBalance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private int leaveBalance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a leave balance object with the default leave balance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public LeaveBalance() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaveBalance \u003d DEFAULT_LEAVE_BALANCE.getDefaultLeave();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a leave balance object with the specified leave balance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param leaveBalance valid integer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public LeaveBalance(int leaveBalance) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requirePositive(leaveBalance);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.leaveBalance \u003d leaveBalance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Replaces the default leave balance with the specified new {@code newDefaultLeaveBalance}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * TODO: improve implementation of how to change default leave (possibly a command)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param newDefaultLeaveBalance must be a positive number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static void setDefaultLeaveBalance(int newDefaultLeaveBalance) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requirePositive(newDefaultLeaveBalance);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        DEFAULT_LEAVE_BALANCE.setDefaultLeave(newDefaultLeaveBalance);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int getLeaveBalance() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return leaveBalance;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds the given number of leave days to a staff\u0027s leave balance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param leaveDays must be a positive number;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void addLeaveBalance(int leaveDays) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requirePositive(leaveDays);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        leaveBalance +\u003d leaveDays;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Deducts the given number of leave days from a staff\u0027s leave balance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param leaveDays must be a positive number."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void deductLeaveBalance(int leaveDays) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requirePositive(leaveDays);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        leaveBalance -\u003d leaveDays;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 60
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/UniqueLeaveList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.exceptions.DuplicateLeaveException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.exceptions.LeaveNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * A list of Leaves that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * A leave is considered unique by comparing using {@code Leave#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Leaves uses Leave#equals(Object) for equality so as to ensure that the leave being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * unique in terms of identity in the UniqueLeaveList. However, the removal of a leave uses Leave#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * as to ensure that the leave with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * @see Leave#equals(Object)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class UniqueLeaveList implements Iterable\u003cLeave\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final ObservableList\u003cLeave\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final ObservableList\u003cLeave\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if the list contains an equivalent leave as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean contains(Leave toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds a leave to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The leave must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void add(Leave toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicateLeaveException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Replaces the leave {@code target} in the list with {@code editedLeave}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The leave identity of {@code editedLeave} must not be the same as another existing leave in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setLeave(Leave target, Leave editedLeave) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(target, editedLeave);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new LeaveNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!target.equals(editedLeave) \u0026\u0026 contains(editedLeave)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicateLeaveException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.set(index, editedLeave);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Removes the equivalent leave from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The leave must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void remove(Leave toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new LeaveNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setLeaves(UniqueLeaveList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Replaces the contents of this list with {@code leaves}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * {@code leaves} must not contain duplicate leaves."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void setLeaves(List\u003cLeave\u003e leaves) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        requireAllNonNull(leaves);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!leavesAreUnique(leaves)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DuplicateLeaveException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        internalList.setAll(leaves);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public ObservableList\u003cLeave\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Iterator\u003cLeave\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                || (other instanceof UniqueLeaveList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLeaveList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns true if {@code leaves} contains only unique leaves."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private boolean leavesAreUnique(List\u003cLeave\u003e leaves) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (int i \u003d 0; i \u003c leaves.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c leaves.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                if (leaves.get(i).equals(leaves.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Fills the contents of this list with {@code leaveSet}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void fill(Set\u003cLeave\u003e leaveSet) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cLeave\u003e leaves \u003d new ArrayList\u003c\u003e(leaveSet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (Leave leave : leaves) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            add(leave);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 149
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/exceptions/DuplicateLeaveException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DuplicateLeaveException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DuplicateLeaveException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(\"Operation would result in duplicate leaves\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 7
    }
  },
  {
    "path": "src/main/java/com/eva/model/person/staff/leave/exceptions/LeaveNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person.staff.leave.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class LeaveNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4
    }
  },
  {
    "path": "src/main/java/com/eva/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Represents a Tag in the eva database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 51,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Contains utility methods for populating {@code EvaDatabase} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"friends\"), getCommentSet(\"title 1|2010-10-10|hi\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), getCommentSet(\"title 2|2010-11-10|hi\", \"title 3|2010-12-10|hi\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"neighbours\"), getCommentSet(\"title 4|2010-09-10|hi\", \"title 5|2010-08-10|hi\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"family\"), getCommentSet(\"title 6|2010-10-10|hi\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"classmates\"), getCommentSet(\"title 7|2010-07-10|hi\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                getTagSet(\"colleagues\"), getCommentSet(\"title 8|2011-11-10|hi\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static Staff[] getSampleStaffs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // TODO: Add some meaningful leave samples"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Set\u003cLeave\u003e leaves \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return Arrays.stream(getSamplePersons())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(person -\u003e new Staff(person, leaves))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .toArray(Staff[]::new);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static Applicant[] getSampleApplicants() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // TODO: Add some meaningful interview date samples"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return Arrays.stream(getSamplePersons())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(person -\u003e new Applicant(person, null, new ApplicationStatus(\"received\")))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .toArray(Applicant[]::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static ReadOnlyEvaDatabase\u003cPerson\u003e getSamplePersonDatabase() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e sampleAb \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static ReadOnlyEvaDatabase\u003cStaff\u003e getSampleStaffDatabase() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cStaff\u003e sampleAb \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (Staff samplePerson : getSampleStaffs()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static ReadOnlyEvaDatabase\u003cApplicant\u003e getSampleApplicantDatabase() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cApplicant\u003e sampleAb \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (Applicant samplePerson : getSampleApplicants()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static Set\u003cComment\u003e getCommentSet(String... strings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(strings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .map(string -\u003e new Comment(LocalDate.parse(string.split(\"\\\\|\", 3)[1]),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        string.split(\"\\\\|\", 3)[2], string.split(\"\\\\|\", 3)[0]))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns a leave set containing the list of strings given."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static Set\u003cLeave\u003e getLeaveSet(String... strings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(Leave::new)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 16,
      "Ben-Hanan": 7,
      "-": 42,
      "Hou-Rui": 50
    }
  },
  {
    "path": "src/main/java/com/eva/storage/EvaStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Represents a storage for {@link com.eva.model.EvaDatabase}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public interface EvaStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getApplicantDatabaseFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns Eva data as a {@link ReadOnlyEvaDatabase}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #getPersonDatabaseFilePath()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Saves the given {@link ReadOnlyEvaDatabase} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param evaDatabase cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e evaDatabase) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #savePersonDatabase(ReadOnlyEvaDatabase)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e evaDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns Eva data as a {@link ReadOnlyEvaDatabase}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #getStaffDatabaseFilePath()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Saves the given {@link ReadOnlyEvaDatabase} to the storage."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param evaDatabase cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e evaDatabase) throws IOException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #saveStaffDatabase(ReadOnlyEvaDatabase)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e evaDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns Eva data as a {@link ReadOnlyEvaDatabase}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #getApplicantDatabaseFilePath()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase(Path filePath)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Saves the given {@link ReadOnlyEvaDatabase} to the storage."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param evaDatabase cannot be null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e evaDatabase) throws IOException;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see #saveApplicantDatabase(ReadOnlyEvaDatabase)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e evaDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 30,
      "Hou-Rui": 76
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedApplicant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Jackson-friendly version of {@link Applicant}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "class JsonAdaptedApplicant {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Applicant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String interviewDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedComment\u003e comments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final JsonAdaptedApplication application;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonAdaptedStaff} with the given person details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedApplicant("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"interviewDate\") String interviewDate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"comments\") List\u003cJsonAdaptedComment\u003e comments,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"application\") JsonAdaptedApplication application"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (comments !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            this.comments.addAll(comments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.application \u003d application;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code Applicant} into this class for Jackson use."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedApplicant(Applicant source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        interviewDate \u003d source.getInterviewDate()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(InterviewDate::toString)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        status \u003d source.getApplicationStatus().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        comments.addAll(source.getComments().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(JsonAdaptedComment::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        application \u003d new JsonAdaptedApplication(source.getApplication());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts this Jackson-friendly adapted applicant object into the model\u0027s {@code Applicant} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted applicant."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Applicant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final List\u003cComment\u003e personComments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedComment comment : comments) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            personComments.add(comment.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!ApplicationStatus.isValidApplicationStatus(status)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(ApplicationStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final ApplicationStatus modelStatus \u003d new ApplicationStatus(status);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (interviewDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!interviewDate.isEmpty() \u0026\u0026 !InterviewDate.isValidInterviewDate(interviewDate)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException((InterviewDate.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final InterviewDate modelInterviewDate \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                interviewDate.isEmpty() ? null : new InterviewDate(interviewDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Set\u003cComment\u003e modelComments \u003d new HashSet\u003c\u003e(personComments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        Applicant newApplicant \u003d new Applicant(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                modelTags, modelComments, Optional.ofNullable(modelInterviewDate), modelStatus);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        newApplicant.setApplication(application.toModelType());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return newApplicant;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 10,
      "Hou-Rui": 148,
      "Nikhilalalalala": 6
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedApplication.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Education;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Experience;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class JsonAdaptedApplication {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Application\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final List\u003cJsonAdaptedExperience\u003e experienceSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final List\u003cJsonAdaptedEducation\u003e educationSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Constructs a {@code JsonAdaptedApplication} with the given details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedApplication("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"experienceSection\") List\u003cJsonAdaptedExperience\u003e experienceSection,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"educationSection\") List\u003cJsonAdaptedEducation\u003e educationSection"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (experienceSection !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            this.experienceSection.addAll(experienceSection);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (educationSection !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            this.educationSection.addAll(educationSection);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts a given {@code Applicant} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedApplication(Application source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        name \u003d source.getApplicantName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        experienceSection.addAll(source.getExperienceSection().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            .map(JsonAdaptedExperience::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        educationSection.addAll(source.getEducationSection().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            .map(JsonAdaptedEducation::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts this Jackson-friendly adapted application object into the model\u0027s {@code Application} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Application toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        final List\u003cExperience\u003e expSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        for (JsonAdaptedExperience exp : experienceSection) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            expSection.add(exp.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        final List\u003cEducation\u003e eduSection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        for (JsonAdaptedEducation edu : educationSection) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            eduSection.add(edu.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return new Application(name, expSection, eduSection);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 79
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedComment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "class JsonAdaptedComment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructs a {@code JsonAdaptedComment} with the given {@code tagName}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public JsonAdaptedComment(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.date \u003d LocalDate.parse(description.split(\"\\\\|\", 3)[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description.split(\"\\\\|\", 3)[2];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.title \u003d description.split(\"\\\\|\", 3)[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public JsonAdaptedComment(Comment source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        date \u003d source.date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        title \u003d source.getTitle().getTitle();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getCommentDetails() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return title + \"|\" + date.toString() + \"|\" + description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Comment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!Comment.isValidComment(date.toString() + \" \" + description + \" \" + title)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Comment(date, description, title);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 58
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedEducation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Education;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "class JsonAdaptedEducation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private final String schoolName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Constructs a {@code JsonAdaptedEducation} with the given details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedEducation("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"schoolName\") String schoolName"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.schoolName \u003d schoolName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts a given {@code Education} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedEducation(Education source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        startDate \u003d DateUtil.dateToString(source.getStartDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        endDate \u003d DateUtil.dateToString(source.getEndDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        schoolName \u003d source.getSchoolName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts this Jackson-friendly adapted education object into the model\u0027s {@code Education} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted applicant."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Education toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return new Education(startDate, endDate, schoolName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 45
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedExperience.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Experience;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "public class JsonAdaptedExperience {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String companyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String position;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Constructs a {@code JsonAdaptedEducation} with the given details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedExperience("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"schoolName\") String companyName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"position\") String position,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            @JsonProperty(\"description\") String description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.companyName \u003d companyName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts a given {@code Experience} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public JsonAdaptedExperience(Experience source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        startDate \u003d DateUtil.dateToString(source.getStartDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        endDate \u003d DateUtil.dateToString(source.getEndDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        companyName \u003d source.getCompanyName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        position \u003d source.getPosition();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * Converts this Jackson-friendly adapted experience object into the model\u0027s {@code Experience} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted applicant."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    public Experience toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        return new Experience(startDate, endDate, companyName, position, description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheSpaceCuber": 53
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedLeave.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.util.DateUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Jackson-friendly version of {@link Leave}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class JsonAdaptedLeave {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonAdaptedLeave} with the given {@code startDate} as {@code endDate}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param startDate the start date string of the leave."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param endDate the end date string og the leave."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedLeave("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"endDate\") String endDate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code Leave} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedLeave(Leave leave) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.startDate \u003d DateUtil.dateToString(leave.getStartDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.endDate \u003d DateUtil.dateToString(leave.getEndDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts this Jackson-friendly adapted leave object into the model\u0027s {@code Leave} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return The converted {@code Leave}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Leave toModelType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new Leave(startDate, endDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 44
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final List\u003cJsonAdaptedComment\u003e comments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                             @JsonProperty(\"comments\") List\u003cJsonAdaptedComment\u003e comments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.comments.addAll(comments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        comments.addAll(source.getComments().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .map(JsonAdaptedComment::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        final List\u003cComment\u003e personComments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (JsonAdaptedComment comment : comments) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            personComments.add(comment.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        final Set\u003cComment\u003e modelComments \u003d new HashSet\u003c\u003e(personComments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelComments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 17,
      "Ben-Hanan": 8,
      "-": 99
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedStaff.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Jackson-friendly version of {@link Staff}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "class JsonAdaptedStaff {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Staff\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedLeave\u003e leaves \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final List\u003cJsonAdaptedComment\u003e comments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonAdaptedStaff} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedStaff("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            @JsonProperty(\"leaves\") List\u003cJsonAdaptedLeave\u003e leaves,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            @JsonProperty(\"comments\") List\u003cJsonAdaptedComment\u003e comments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (leaves !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            this.leaves.addAll(leaves);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (comments !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            this.comments.addAll(comments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code Staff} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonAdaptedStaff(Staff source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        leaves.addAll(source.getLeaves().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(JsonAdaptedLeave::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        comments.addAll(source.getComments().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .map(JsonAdaptedComment::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Staff} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted staff."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Staff toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final List\u003cLeave\u003e personLeaves \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedLeave leave : leaves) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            personLeaves.add(leave.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        final List\u003cComment\u003e personComments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (JsonAdaptedComment comment : comments) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            personComments.add(comment.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        final Set\u003cLeave\u003e modelLeaves \u003d new HashSet\u003c\u003e(personLeaves);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        final Set\u003cComment\u003e modelComments \u003d new HashSet\u003c\u003e(personComments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Staff(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelLeaves, modelComments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 17,
      "Hou-Rui": 126
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonApplicantDatabase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * An Immutable EvaDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "@JsonRootName(value \u003d \"applicantDatabase\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "class JsonApplicantDatabase {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedApplicant\u003e applicants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonApplicantDatabase} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonApplicantDatabase(@JsonProperty(\"applicants\") List\u003cJsonAdaptedApplicant\u003e applicants) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.applicants.addAll(applicants);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code ReadOnlyEvaDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonApplicantDatabase}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        applicants.addAll(source.getPersonList().stream().map(JsonAdaptedApplicant::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Converts this eva database into the model\u0027s {@code EvaDatabase} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase\u003cApplicant\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cApplicant\u003e addressBook \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedApplicant jsonAdaptedApplicant : applicants) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Applicant person \u003d jsonAdaptedApplicant.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 58,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonEvaStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * A class to access EvaDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class JsonEvaStorage implements EvaStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEvaStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path personDatabaseFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path staffDatabaseFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Path applicantDatabaseFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // for compatibility of tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * For compatibility of tests only."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param personDatabaseFilePath"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonEvaStorage(Path personDatabaseFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.personDatabaseFilePath \u003d personDatabaseFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffDatabaseFilePath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Initializes with the path for person and staff database."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param personDatabaseFilePath The path to the person database."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param staffDatabaseFilePath The path to the staff database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param applicantDatabaseFilePath The path to the applicant database."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonEvaStorage(Path personDatabaseFilePath, Path staffDatabaseFilePath, Path applicantDatabaseFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.personDatabaseFilePath \u003d personDatabaseFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffDatabaseFilePath \u003d staffDatabaseFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.applicantDatabaseFilePath \u003d applicantDatabaseFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getPersonDatabaseFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return personDatabaseFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return staffDatabaseFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getApplicantDatabaseFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return applicantDatabaseFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readPersonDatabase(personDatabaseFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #readPersonDatabase()}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cJsonPersonDatabase\u003e jsonEvaDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                filePath, JsonPersonDatabase.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!jsonEvaDatabase.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return Optional.of(jsonEvaDatabase.get().toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        savePersonDatabase(addressBook, personDatabaseFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #saveStaffDatabase(ReadOnlyEvaDatabase)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonPersonDatabase(addressBook), filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readStaffDatabase(staffDatabaseFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #readPersonDatabase()}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cJsonStaffDatabase\u003e jsonEvaDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                filePath, JsonStaffDatabase.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!jsonEvaDatabase.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return Optional.of(jsonEvaDatabase.get().toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        saveStaffDatabase(addressBook, staffDatabaseFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #saveStaffDatabase(ReadOnlyEvaDatabase)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonStaffDatabase(addressBook), filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readApplicantDatabase(applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #readPersonDatabase()}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase(Path filePath)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cJsonApplicantDatabase\u003e jsonEvaDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                filePath, JsonApplicantDatabase.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (!jsonEvaDatabase.isPresent()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return Optional.of(jsonEvaDatabase.get().toModelType());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        saveApplicantDatabase(addressBook, applicantDatabaseFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Similar to {@link #saveStaffDatabase(ReadOnlyEvaDatabase)}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonApplicantDatabase(addressBook), filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 52,
      "Hou-Rui": 147
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonPersonDatabase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * An Immutable EvaDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "@JsonRootName(value \u003d \"personDatabase\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "class JsonPersonDatabase {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonPersonDatabase} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonPersonDatabase(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code ReadOnlyEvaDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonPersonDatabase}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonPersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Converts this eva database into the model\u0027s {@code EvaDatabase} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase\u003cPerson\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e addressBook \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 43,
      "Hou-Rui": 12,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonStaffDatabase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * An Immutable EvaDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "@JsonRootName(value \u003d \"staffDatabase\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "class JsonStaffDatabase {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final List\u003cJsonAdaptedStaff\u003e staffs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Constructs a {@code JsonPersonDatabase} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonStaffDatabase(@JsonProperty(\"staffs\") List\u003cJsonAdaptedStaff\u003e staffs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.staffs.addAll(staffs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Converts a given {@code ReadOnlyEvaDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonPersonDatabase}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public JsonStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        staffs.addAll(source.getPersonList().stream().map(JsonAdaptedStaff::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Converts this eva database for staff into the model\u0027s {@code EvaDatabase} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase\u003cStaff\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cStaff\u003e addressBook \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (JsonAdaptedStaff jsonAdaptedStaff : staffs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Staff person \u003d jsonAdaptedStaff.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 38,
      "Hou-Rui": 18,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/main/java/com/eva/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/eva/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public interface Storage extends EvaStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Path getApplicantDatabaseFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e addressBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e addressBook) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 23,
      "Hou-Rui": 25
    }
  },
  {
    "path": "src/main/java/com/eva/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Manages storage of EvaDatabase data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final EvaStorage evaStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code EvaStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public StorageManager(EvaStorage evaStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.evaStorage \u003d evaStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EvaDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getPersonDatabaseFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.getPersonDatabaseFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.getStaffDatabaseFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Path getApplicantDatabaseFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.getApplicantDatabaseFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readPersonDatabase(evaStorage.getPersonDatabaseFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readPersonDatabase(Path filePath)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.readPersonDatabase(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        savePersonDatabase(addressBook, evaStorage.getPersonDatabaseFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaStorage.savePersonDatabase(addressBook, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readStaffDatabase(evaStorage.getStaffDatabaseFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cStaff\u003e\u003e readStaffDatabase(Path filePath)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.readStaffDatabase(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        saveStaffDatabase(addressBook, evaStorage.getStaffDatabaseFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaStorage.saveStaffDatabase(addressBook, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return readApplicantDatabase(evaStorage.getApplicantDatabaseFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Optional\u003cReadOnlyEvaDatabase\u003cApplicant\u003e\u003e readApplicantDatabase(Path filePath)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaStorage.readApplicantDatabase(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e addressBook) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        saveApplicantDatabase(addressBook, evaStorage.getApplicantDatabaseFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void saveApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaStorage.saveApplicantDatabase(addressBook, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5,
      "-": 56,
      "Hou-Rui": 78
    }
  },
  {
    "path": "src/main/java/com/eva/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Represents a storage for {@link com.eva.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 1,
      "Ben-Hanan": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/eva/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (CommandException | ParseException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "         * @see com.eva.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, FileNotFoundException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 2,
      "Ben-Hanan": 5,
      "TheSpaceCuber": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/com/eva/ui/CurrentPanelHeader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CurrentPanelHeader extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"CurrentPanelHeader.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label panelHeader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code CurrentPanelHeader} with the given {@code Path}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CurrentPanelHeader(String currentPanelName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        panelHeader.setText(currentPanelName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 25
    }
  },
  {
    "path": "src/main/java/com/eva/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w13-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/com/eva/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.list.view.ApplicantListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.list.view.StaffListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.profile.staff.view.StaffProfilePanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StaffListPanel staffListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StaffProfilePanel staffProfilePanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private ApplicantListPanel applicantListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StackPane sideBarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StackPane panelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StackPane headerNamePlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staffListPanel \u003d new StaffListPanel(logic.getFilteredStaffList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicantListPanel \u003d new ApplicantListPanel(logic.getFilteredApplicantList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        switchPanel(StaffListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Switches current panel to the specified panel."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private void switchPanel(PanelState panelState) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        logger.info(\"Switch panel to: \" + panelState.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        panelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        headerNamePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        headerNamePlaceholder.getChildren().add(new CurrentPanelHeader(panelState.toString()).getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        switch (panelState) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case STAFF_LIST:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            panelPlaceholder.getChildren().add(staffListPanel.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case APPLICANT_LIST:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            panelPlaceholder.getChildren().add(applicantListPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case STAFF_PROFILE:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            staffProfilePanel \u003d new StaffProfilePanel(logic.getCurrentViewStaff());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            staffProfilePanel.fillInnerParts();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            panelPlaceholder.getChildren().add(staffProfilePanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"No such tab name: \" + panelState);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(), logic.getPanelState());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(), logic.getPanelState());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private void handleChangePanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        PanelState requestedPanelState \u003d logic.getPanelState();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        switchPanel(requestedPanelState);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public StaffListPanel getStaffListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return staffListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @see com.eva.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (commandResult.isChangePanel()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                handleChangePanel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (CommandException | ParseException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 1,
      "Ben-Hanan": 65,
      "TheSpaceCuber": 4,
      "-": 177,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/main/java/com/eva/ui/Panel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public abstract class Panel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Panel(String name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 9
    }
  },
  {
    "path": "src/main/java/com/eva/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EvaDatabase level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private FlowPane comments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        person.getComments().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .forEach(comment -\u003e comments.getChildren()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        .add(new Label(comment.toString())));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 5,
      "Ben-Hanan": 3,
      "-": 74,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/main/java/com/eva/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/com/eva/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/com/eva/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/eva/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/EvaTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 7,
      "-": 83
    }
  },
  {
    "path": "src/main/java/com/eva/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 86
    }
  },
  {
    "path": "src/main/java/com/eva/ui/list/view/ApplicantListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.list.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * An UI component that displays information of a {@code Applicant}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicantListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private static final String FXML \u003d \"ApplicantListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EvaDatabase level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public final Applicant applicant;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label applicationStatus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Label interviewDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private FlowPane comments;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private FlowPane leaves;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates a {@code Applicant Card} with the given {@code Applicant} and index to display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ApplicantListCard(Applicant applicant, int displayedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicant \u003d applicant;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        name.setText(applicant.getName().fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        phone.setText(applicant.getPhone().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        address.setText(applicant.getAddress().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        email.setText(applicant.getEmail().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicationStatus.setText(applicant.getApplicationStatus().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        interviewDate.setText(interviewDateToDisplay(applicant.getInterviewDate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        tags.getChildren().add(new Label(\"applicant\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicant.getTags().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicant.getComments().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .forEach(comment -\u003e comments.getChildren()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                        .add(new Label(comment.toString())));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private String interviewDateToDisplay(Optional\u003cInterviewDate\u003e interviewDateOptional) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return interviewDateOptional.map(date -\u003e \"Interview on: \" + date.toString())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                .orElse(\"Interview Date not set yet.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        if (!(other instanceof ApplicantListCard)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        ApplicantListCard card \u003d (ApplicantListCard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u0026\u0026 applicant.equals(card.applicant);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "Nikhilalalalala": 98
    }
  },
  {
    "path": "src/main/java/com/eva/ui/list/view/ApplicantListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.list.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " * Panel containing the list of applicant."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicantListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String PANEL_NAME \u003d \"ApplicantList\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private static final String FXML \u003d \"ApplicantListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ApplicantListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private ListView\u003cApplicant\u003e applicantListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates a {@code ApplicantListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ApplicantListPanel(ObservableList\u003cApplicant\u003e applicantList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicantListView.setItems(applicantList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicantListView.setCellFactory(listView -\u003e new ApplicantListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Applicant} using a {@code ApplicantCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    class ApplicantListViewCell extends ListCell\u003cApplicant\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        protected void updateItem(Applicant applicant, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            super.updateItem(applicant, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            if (empty || applicant \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                setGraphic(new ApplicantListCard(applicant, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "Nikhilalalalala": 51
    }
  },
  {
    "path": "src/main/java/com/eva/ui/list/view/StaffListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.list.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.dateToString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * An UI component that displays information of a {@code Staff}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class StaffListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"StaffListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EvaDatabase level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final Staff staff;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private FlowPane comments;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private FlowPane leaves;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code StaffListCard} with the given {@code Staff} and index to display."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public StaffListCard(Staff staff, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.staff \u003d staff;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        name.setText(staff.getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        phone.setText(staff.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        address.setText(staff.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        email.setText(staff.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        tags.getChildren().add(new Label(\"staff\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staff.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staff.getLeaves().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .sorted(Comparator.comparing(leave -\u003e leave.startDate))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .forEach(leave -\u003e leaves.getChildren().add(leaveToDisplay(leave)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        staff.getComments().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .forEach(comment -\u003e comments.getChildren()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        .add(new Label(comment.toString())));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label leaveToDisplay(Leave leave) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new Label("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            leave.startDate.equals(leave.endDate)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ? dateToString(leave.startDate)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                : String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"%s to %s\", dateToString(leave.startDate), dateToString(leave.endDate)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!(other instanceof StaffListCard)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        StaffListCard card \u003d (StaffListCard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 staff.equals(card.staff);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 5,
      "Ben-Hanan": 95
    }
  },
  {
    "path": "src/main/java/com/eva/ui/list/view/StaffListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.list.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.PanelState.STAFF_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Panel containing the list of staffs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class StaffListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final PanelState PANEL_NAME \u003d STAFF_LIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"StaffListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StaffListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private ListView\u003cStaff\u003e staffListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code StaffListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public StaffListPanel(ObservableList\u003cStaff\u003e staffList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staffListView.setItems(staffList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staffListView.setCellFactory(listView -\u003e new StaffListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Staff} using a {@code StaffListCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    class StaffListViewCell extends ListCell\u003cStaff\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        protected void updateItem(Staff staff, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            super.updateItem(staff, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (empty || staff \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setGraphic(new StaffListCard(staff, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 57
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/BasicInfoDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class BasicInfoDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"BasicInfoDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private HBox displayPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code BasicInfoDisplay} with the given {@code Person}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public BasicInfoDisplay(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        name.setText(this.person.getName().fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        phone.setText(this.person.getPhone().value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        address.setText(this.person.getAddress().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        email.setText(this.person.getEmail().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        tags.getChildren().add(new Label(\"staff\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!(other instanceof BasicInfoDisplay)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        BasicInfoDisplay card \u003d (BasicInfoDisplay) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return person.equals(card.person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 64
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/CommentListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.dateToString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CommentListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"CommentListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final Comment comment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label description; //rename to body"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code CommentListCard} with the given {@code Comment} and index to display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommentListCard(Comment comment, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        title.setText(comment.getTitle().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        date.setText(dateToString(comment.getDate()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        description.setText(comment.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!(other instanceof CommentListCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        CommentListCard card \u003d (CommentListCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u0026\u0026 comment.equals(card.comment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 58
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/CommentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class CommentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"CommentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private ListView\u003cComment\u003e commentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code StaffListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public CommentListPanel(ObservableList\u003cComment\u003e commentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        commentListView.setItems(commentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        commentListView.setCellFactory(listView -\u003e new CommentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Staff} using a {@code StaffListCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    class CommentListViewCell extends ListCell\u003cComment\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        protected void updateItem(Comment comment, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            super.updateItem(comment, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (empty || comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                setGraphic(new CommentListCard(comment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 50
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/applicant/view/ApplicantProfilePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile.applicant.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "// TODO"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ApplicantProfilePanel {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/staff/view/LeaveInfoDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile.staff.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class LeaveInfoDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"LeaveInfoDisplay.fxml\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    LeaveInfoDisplay() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 13
    }
  },
  {
    "path": "src/main/java/com/eva/ui/profile/staff/view/StaffProfilePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui.profile.staff.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.PanelState.STAFF_PROFILE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.DateUtil.dateToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.ui.profile.BasicInfoDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class StaffProfilePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static final PanelState PANEL_NAME \u003d STAFF_PROFILE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final String FXML \u003d \"StaffProfilePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public final CurrentViewStaff staff;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private BasicInfoDisplay basicInfoDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private LeaveInfoDisplay leaveInfoDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    // private CommentListPanel commentListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private FlowPane leaves;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private StackPane basicInfoPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    // @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    // private StackPane commentListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Creates a {@code StaffProfilePanel} with the given {@code Staff}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public StaffProfilePanel(CurrentViewStaff staff) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.staff \u003d staff;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staff.getLeaves().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .sorted(Comparator.comparing(leave -\u003e leave.startDate))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .forEach(leave -\u003e leaves.getChildren().add(leaveToDisplay(leave)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        staff.getComments().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                .forEach(comment -\u003e comments.getChildren()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        .add(new Label(comment.toString())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private Label leaveToDisplay(Leave leave) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return new Label("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                leave.startDate.equals(leave.endDate)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        ? dateToString(leave.startDate)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        : String.format("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \"%s to %s\", dateToString(leave.startDate), dateToString(leave.endDate)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (this.staff.getCurrentView().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Staff currentStaff \u003d this.staff.getCurrentView().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            basicInfoDisplay \u003d new BasicInfoDisplay(currentStaff);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            basicInfoPlaceholder.getChildren().add(basicInfoDisplay.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            // commentListPanel \u003d new CommentListPanel(currentStaff.getComments());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (!(other instanceof StaffProfilePanel)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        StaffProfilePanel card \u003d (StaffProfilePanel) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return staff.equals(card.staff);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 94
    }
  },
  {
    "path": "src/main/resources/view/ApplicantListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"comments\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cLabel fx:id\u003d\"applicationStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$applicationStatus\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cLabel fx:id\u003d\"interviewDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interviewDate\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 39
    }
  },
  {
    "path": "src/main/resources/view/ApplicantListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    \u003cListView fx:id\u003d\"applicantListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 8
    }
  },
  {
    "path": "src/main/resources/view/BasicInfoDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"displayPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 37
    }
  },
  {
    "path": "src/main/resources/view/CommentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 34
    }
  },
  {
    "path": "src/main/resources/view/CommentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cListView fx:id\u003d\"commentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8
    }
  },
  {
    "path": "src/main/resources/view/CurrentPanelHeader.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "  \u003cLabel fx:id\u003d\"panelHeader\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/EvaTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-control-inner-background: white;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: #f7f6f3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e8e7e4;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #bed0f7;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #7e9dde;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: #f7f6f3;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     -fx-border-color: white;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: #f7f6f3;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: #f7f6f3;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "  -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: derive(#e0e8f9, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #f7f6f3;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: derive(#a9a9a9, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ".scroll-bar .thumb:hover {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #a9a9a9;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-radius: 8px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-radius: 8px;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-padding: 6 8 6 8;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "#comments {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "#comments .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-background-color: #FFC0CB;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#leaves {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#leaves .label {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #91443e;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#sideBar {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "#EvaLogo {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-background-color: #e0e8f9;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-text-fill: #19216c;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-pref-height: 36px;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-min-height: 36px;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    -fx-padding: 0 16px 0 16px;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 15,
      "Ben-Hanan": 87,
      "-": 299
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "         title\u003d\"Eva\" minWidth\u003d\"800\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cURL value\u003d\"@EvaTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "      \u003cVBox fx:id\u003d\"mainWindow\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "          \u003cVBox fx:id\u003d\"sideBar\" VBox.vgrow\u003d\"ALWAYS\" SplitPane.resizableWithParent\u003d\"false\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                minWidth\u003d\"180\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"EvaLogo\" VBox.vgrow\u003d\"NEVER\" text\u003d\"EVA\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"sideBarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"headerNamePlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"panelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                       minHeight\u003d\"80\" prefHeight\u003d\"80\" maxHeight\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 22,
      "-": 45
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"comments\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/StaffListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"comments\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"leaves\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 1,
      "Ben-Hanan": 37
    }
  },
  {
    "path": "src/main/resources/view/StaffListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cListView fx:id\u003d\"staffListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8
    }
  },
  {
    "path": "src/main/resources/view/StaffProfilePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"basicInfoPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "  \"_comment\": \"EvaDatabase save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "  \"addressBookFilePath\" : \"personDatabase.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "  \"addressBookFilePath\" : \"personDatabase.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/eva/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/eva/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/eva/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/eva/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/com/eva/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "// import com.eva.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.storage.JsonEvaStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonEvaStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new JsonEvaStorage(temporaryFolder.resolve(\"personDatabase.json\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                        temporaryFolder.resolve(\"staffDatabase.json\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                        temporaryFolder.resolve(\"applicantDatabase.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertParseException(deleteCommand,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // Setup LogicManager with JsonEvaIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonEvaStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new JsonEvaIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonDatabase(), model.getStaffDatabase(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                model.getApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static class JsonEvaIoExceptionThrowingStub extends JsonEvaStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        private JsonEvaIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            super(filePath, filePath, filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void savePersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 4,
      "Ben-Hanan": 24,
      "TheSpaceCuber": 2,
      "-": 126,
      "Hou-Rui": 15
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonDatabase(), model.getStaffDatabase(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                model.getApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Person personInList \u003d model.getPersonDatabase().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8,
      "-": 33,
      "Hou-Rui": 8
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewApplicant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.current.view.CurrentViewStaff;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import com.eva.model.person.applicant.application.Application;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public PanelState getPanelState() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public void setPanelState(PanelState panelState) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public void setCurrentViewStaff(CurrentViewStaff currentViewStaff) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public void setCurrentViewApplicant(CurrentViewApplicant currentViewStaff) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public Path getPersonDatabaseFilePath() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        public Path getStaffDatabaseFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public Path getApplicantDatabaseFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setPersonDatabaseFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        public void setStaffDatabaseFilePath(Path staffDatabaseFilePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setApplicantDatabaseFilePath(Path applicantDatabaseFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setPersonDatabase(ReadOnlyEvaDatabase\u003cPerson\u003e newData) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public void addStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public void deleteStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public boolean hasStaffLeave(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public Optional\u003cLeave\u003e hasLeaveDate(Staff target, LocalDate date) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public boolean hasLeavePeriod(Staff target, Leave leave) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ReadOnlyEvaDatabase\u003cPerson\u003e getPersonDatabase() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void addStaff(Staff person) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setStaffDatabase(ReadOnlyEvaDatabase\u003cStaff\u003e newData) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ReadOnlyEvaDatabase\u003cStaff\u003e getStaffDatabase() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public boolean hasStaff(Staff person) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void deleteStaff(Staff target) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setStaff(Staff target, Staff editedPerson) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public CurrentViewStaff getCurrentViewStaff() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        public CurrentViewApplicant getCurrentViewApplicant() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void addApplicant(Applicant person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        public void addApplicantApplication(Applicant target, Application toAdd) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setApplicantDatabase(ReadOnlyEvaDatabase\u003cApplicant\u003e newData) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ReadOnlyEvaDatabase\u003cApplicant\u003e getApplicantDatabase() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public boolean hasApplicant(Applicant person) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void deleteApplicant(Applicant target) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void setApplicant(Applicant target, Applicant editedPerson) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ObservableList\u003cApplicant\u003e getFilteredApplicantList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public void updateFilteredApplicantList(Predicate\u003cApplicant\u003e predicate) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        public ReadOnlyEvaDatabase\u003cPerson\u003e getPersonDatabase() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 66,
      "TheSpaceCuber": 6,
      "-": 182,
      "Hou-Rui": 100,
      "Nikhilalalalala": 10
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/AddStaffCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class AddStaffCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void constructor_nullStaff_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 12
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        expectedModel.setPersonDatabase(new EvaDatabase\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5,
      "-": 22,
      "Hou-Rui": 9
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 48
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * - eva, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        EvaDatabase\u003cPerson\u003e expectedAddressBook \u003d new EvaDatabase\u003c\u003e(actualModel.getPersonDatabase());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getPersonDatabase());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * {@code model}\u0027s eva database."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 13,
      "-": 109,
      "Hou-Rui": 3,
      "Nikhilalalalala": 3
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersonDatabase(), model.getStaffDatabase(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                model.getApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersonDatabase(), model.getStaffDatabase(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                model.getApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eva database list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 12,
      "-": 91,
      "Hou-Rui": 10,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/*package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/*public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getPersonDatabase()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getStaffDatabase()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getApplicantDatabase()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getPersonDatabase()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getStaffDatabase()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getApplicantDatabase()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getPersonDatabase()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getStaffDatabase()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getApplicantDatabase()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getPersonDatabase()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getStaffDatabase()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new EvaDatabase\u003c\u003e(model.getApplicantDatabase()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // edit person in filtered list into a duplicate in eva database"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Person personInList \u003d model.getPersonDatabase().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "*/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * but smaller than size of eva database"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eva database list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersonDatabase().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 6,
      "Ben-Hanan": 19,
      "-": 137,
      "Hou-Rui": 28,
      "Nikhilalalalala": 3
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 11,
      "-": 47
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPersonDatabase(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            getTypicalStaffDatabase(), getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPersonDatabase(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            getTypicalStaffDatabase(), getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private NameContainsKeywordsPredicate\u003cPerson\u003e preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10,
      "-": 62,
      "Hou-Rui": 16
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/com/eva/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalApplicantDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalStaffDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonDatabase(), getTypicalStaffDatabase(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                getTypicalApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPersonDatabase(), model.getStaffDatabase(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                model.getApplicantDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 13,
      "-": 28,
      "Hou-Rui": 7
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 38,
      "-": 103
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (ParseException | FileNotFoundException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheSpaceCuber"
        },
        "content": "        } catch (ParseException | FileNotFoundException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 3,
      "TheSpaceCuber": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertParseSuccess(parser, \"1 s-\", new DeleteStaffCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "Ben-Hanan": 7,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/*package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3,
      "Ben-Hanan": 39,
      "-": 169
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/EvaParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import static com.eva.testutil.PersonUtil.getEditPersonDescriptorDetails;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.testutil.StaffUtil.getAddStaffCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.AddStaffCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import com.eva.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "// import com.eva.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import com.eva.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "//import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.testutil.StaffBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class EvaParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final EvaParser parser \u003d new EvaParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void parseCommand_addStaff() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Staff staff \u003d new StaffBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        AddStaffCommand command \u003d (AddStaffCommand) parser.parseCommand(getAddStaffCommand(staff));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertEquals(new AddStaffCommand(staff), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void parseCommand_deleteStaff() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        DeleteStaffCommand command \u003d (DeleteStaffCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" s-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertEquals(new DeleteStaffCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    // Must edit to fit person and staff"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 23,
      "Ben-Hanan": 17,
      "-": 67,
      "Nikhilalalalala": 2,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 27,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10,
      "-": 186
    }
  },
  {
    "path": "src/test/java/com/eva/model/EvaDatabaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class EvaDatabaseTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final EvaDatabase\u003cPerson\u003e evaDatabase \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(Collections.emptyList(), evaDatabase.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e evaDatabase.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void resetData_withValidReadOnlyEvaDatabase_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        EvaDatabase\u003cPerson\u003e newData \u003d getTypicalPersonDatabase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaDatabase.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(newData, evaDatabase);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e evaDatabase.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e evaDatabase.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertFalse(evaDatabase.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertTrue(evaDatabase.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaDatabase.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertTrue(evaDatabase.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e evaDatabase.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * A stub ReadOnlyEvaDatabase whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyEvaDatabase {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 9,
      "-": 75,
      "Hou-Rui": 17,
      "Nikhilalalalala": 2
    }
  },
  {
    "path": "src/test/java/com/eva/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.testutil.EvaDatabaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(new EvaDatabase\u003c\u003e(), new EvaDatabase\u003c\u003e(modelManager.getPersonDatabase()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userPrefs.setPersonDatabaseFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4, PanelState.STAFF_LIST));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userPrefs.setPersonDatabaseFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4, PanelState.STAFF_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPersonDatabaseFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        modelManager.setPersonDatabaseFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(path, modelManager.getPersonDatabaseFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e addressBook \u003d new EvaDatabaseBuilder\u003c\u003e()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cStaff\u003e staffDatabase \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cApplicant\u003e applicantDatabase \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e differentAddressBook \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, staffDatabase, applicantDatabase, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, staffDatabase, applicantDatabase, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                staffDatabase, applicantDatabase, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, staffDatabase, applicantDatabase, userPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        differentUserPrefs.setPersonDatabaseFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                staffDatabase, applicantDatabase, differentUserPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10,
      "-": 107,
      "Hou-Rui": 24
    }
  },
  {
    "path": "src/test/java/com/eva/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonDatabaseFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 18,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        NameContainsKeywordsPredicate\u003cPerson\u003e predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 63,
      "Hou-Rui": 15
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10,
      "-": 85
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private final UniquePersonList\u003cPerson\u003e uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 9,
      "-": 160,
      "Nikhilalalalala": 1
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/applicant/ApplicantTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.testutil.ApplicantBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicantTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void setApplicantAcceptedSuccessful() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        Applicant applicant \u003d new ApplicantBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertEquals(applicant.getApplicationStatus().toString(), \"received\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicant.setApplicantProcessing();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertEquals(applicant.getApplicationStatus().toString(), \"processing\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicant.setApplicantAccepted();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertEquals(applicant.getApplicationStatus().toString(), \"accepted\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        applicant.setApplicantRejected();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertEquals(applicant.getApplicationStatus().toString(), \"rejected\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 22
    }
  },
  {
    "path": "src/test/java/com/eva/model/person/applicant/ApplicationStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.model.person.applicant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicationStatusTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void isValidApplicationStatusSuccessful() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertTrue(ApplicationStatus.isValidApplicationStatus(\"received\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertTrue(ApplicationStatus.isValidApplicationStatus(\"processing\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertTrue(ApplicationStatus.isValidApplicationStatus(\"accepted\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertTrue(ApplicationStatus.isValidApplicationStatus(\"rejected\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 17
    }
  },
  {
    "path": "src/test/java/com/eva/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/eva/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static final String INVALID_COMMENT \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private static final List\u003cJsonAdaptedComment\u003e VALID_COMMENT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            BENSON.getComments().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .map(JsonAdaptedComment::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    .collect(Collectors.toList());;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        INVALID_ADDRESS, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                VALID_EMAIL, null, VALID_TAGS, VALID_COMMENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_COMMENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 19,
      "Ben-Hanan": 9,
      "-": 92
    }
  },
  {
    "path": "src/test/java/com/eva/storage/JsonEvaStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class JsonEvaStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEvaStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readEvaDatabase(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEvaDatabase\u003cPerson\u003e\u003e readEvaDatabase(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new JsonEvaStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .readPersonDatabase(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertFalse(readEvaDatabase(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readEvaDatabase(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readEvaDatabase(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readEvaDatabase(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e original \u003d getTypicalPersonDatabase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonEvaStorage jsonEvaStorage \u003d new JsonEvaStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        jsonEvaStorage.savePersonDatabase(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ReadOnlyEvaDatabase\u003cPerson\u003e readBack \u003d jsonEvaStorage.readPersonDatabase(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(original, new EvaDatabase\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        jsonEvaStorage.savePersonDatabase(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        readBack \u003d jsonEvaStorage.readPersonDatabase(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(original, new EvaDatabase\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        jsonEvaStorage.savePersonDatabase(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        readBack \u003d jsonEvaStorage.readPersonDatabase().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(original, new EvaDatabase\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private void saveAddressBook(ReadOnlyEvaDatabase\u003cPerson\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            new JsonEvaStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    .savePersonDatabase(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new EvaDatabase\u003c\u003e(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 6,
      "-": 77,
      "Hou-Rui": 23,
      "Nikhilalalalala": 6
    }
  },
  {
    "path": "src/test/java/com/eva/storage/JsonPersonDatabaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class JsonPersonDatabaseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonPersonDatabase dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                JsonPersonDatabase.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase typicalPersonsAddressBook \u003d getTypicalPersonDatabase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonPersonDatabase dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                JsonPersonDatabase.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonPersonDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                JsonPersonDatabase.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonPersonDatabase.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 31,
      "Hou-Rui": 12
    }
  },
  {
    "path": "src/test/java/com/eva/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100, PanelState.STAFF_LIST));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userPrefs.setPersonDatabaseFilePath(Paths.get(\"data\", \"personDatabase.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2, PanelState.STAFF_LIST));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5, PanelState.STAFF_LIST));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 9,
      "-": 114,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static com.eva.testutil.TypicalPersons.getTypicalPersonDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.PanelState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.ReadOnlyEvaDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        JsonEvaStorage addressBookStorage \u003d new JsonEvaStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6, PanelState.STAFF_LIST));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "         * {@link JsonEvaStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonEvaStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        EvaDatabase\u003cPerson\u003e original \u003d getTypicalPersonDatabase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        storageManager.savePersonDatabase(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        ReadOnlyEvaDatabase\u003cPerson\u003e retrieved \u003d storageManager.readPersonDatabase().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        assertEquals(original, new EvaDatabase\u003cPerson\u003e(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertNotNull(storageManager.getPersonDatabaseFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 5,
      "-": 53,
      "Hou-Rui": 8,
      "Nikhilalalalala": 4
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/ApplicantBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.applicant.InterviewDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class ApplicantBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public static final String DEFAULT_APPLICATION_STATUS \u003d \"received\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static final String DEFAULT_INTERVIEW_DATE \u003d \"30/12/2020\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Optional\u003cInterviewDate\u003e interviewDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private ApplicationStatus applicationStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates a {@code ApplicantBuilder} with the default details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public ApplicantBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.applicationStatus \u003d new ApplicationStatus(DEFAULT_APPLICATION_STATUS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public void withInterviewDate(String interviewDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.interviewDate \u003d Optional.ofNullable(new InterviewDate(interviewDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public Applicant build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return new Applicant(name, phone, email, address, tags, comments,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "                interviewDate, applicationStatus);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nikhilalalalala": 34,
      "Hou-Rui": 1
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8,
      "-": 79
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/EvaDatabaseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * A utility class to help with building EvaDatabase objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " *     {@code EvaDatabase ab \u003d new EvaDatabaseBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class EvaDatabaseBuilder\u003cP extends Person\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private EvaDatabase\u003cP\u003e evaDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaDatabase \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabaseBuilder(EvaDatabase\u003cP\u003e evaDatabase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.evaDatabase \u003d evaDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Adds a new {@code Person} to the {@code EvaDatabase} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabaseBuilder\u003cP\u003e withPerson(P person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        evaDatabase.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public EvaDatabase\u003cP\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return evaDatabase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 34
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    protected Set\u003cComment\u003e comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        comments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        comments \u003d new HashSet\u003c\u003e(personToCopy.getComments());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses the {@code comments} into a {@code Set\u003cComment\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public PersonBuilder withComments(String... comments) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.comments \u003d SampleDataUtil.getCommentSet(comments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Person(name, phone, email, address, tags, comments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 13,
      "Ben-Hanan": 8,
      "-": 81,
      "Nikhilalalalala": 6
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 10,
      "-": 52
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/StaffBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "import com.eva.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "public class StaffBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static final String DEFAULT_LEAVE_ONLY_STARTDATE \u003d \"12/12/2020\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    private Set\u003cLeave\u003e leaves;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Creates a {@code StaffBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public StaffBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        leaves \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        leaves.add(new Leave(DEFAULT_LEAVE_ONLY_STARTDATE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Initializes the StaffBuilder with the data of {@code staffToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * @param staffToCopy"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public StaffBuilder(Staff staffToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        super(staffToCopy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        leaves \u003d new HashSet\u003c\u003e(staffToCopy.getLeaves());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     * Parses the {@code leaves} into a {@code Set\u003cLeave\u003e} and set it to the {@code Staff} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    public PersonBuilder withSingleDateLeaves(String... leaves) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        this.leaves \u003d SampleDataUtil.getLeaveSet(leaves);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Staff build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new Staff(name, phone, email, address, tags, leaves, comments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nikhilalalalala"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 5,
      "Nikhilalalalala": 42
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/StaffUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_LEAVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static com.eva.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.logic.commands.CommentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.comment.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import com.eva.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class StaffUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static String getAddStaffCommand(Staff staff) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" s- \" + getStaffDetails(staff);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static String getStaffDetails(Staff staff) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        sb.append(PREFIX_NAME + staff.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        sb.append(PREFIX_PHONE + staff.getPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        sb.append(PREFIX_EMAIL + staff.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        sb.append(PREFIX_ADDRESS + staff.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        staff.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        staff.getComments().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            s -\u003e sb.append(PREFIX_COMMENT + s.getTitle().getTitle() + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        staff.getLeaves().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            s -\u003e sb.append(PREFIX_LEAVE + s.getStartDate().toString() + s.getEndDate().toString() + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    //For now, use comment person descriptor for now until we change editpersondescriptor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static String getEditStaffDescriptorDetails(CommentCommand.CommentPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (descriptor.getComments() !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cComment\u003e comments \u003d descriptor.getComments();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (comments.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                sb.append(PREFIX_COMMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                comments.forEach(s -\u003e sb.append(PREFIX_COMMENT).append(s.getTitle().getTitle()).append(\" \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (descriptor.getLeaves() !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Set\u003cLeave\u003e leaves \u003d descriptor.getLeaves();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (leaves.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                sb.append(PREFIX_LEAVE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                //TODO"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                leaves.forEach(s -\u003e sb.append(PREFIX_LEAVE).append(s.getStartDate()).append(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 91
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/com/eva/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.EvaDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.Applicant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.applicant.ApplicationStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.Staff;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.eva.model.person.staff.leave.Leave;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            .withComments(\"title 1|2010-10-10|hi\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns an {@code EvaDatabase} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static EvaDatabase\u003cPerson\u003e getTypicalPersonDatabase() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cPerson\u003e ab \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns an {@code EvaDatabase} with all the typical staffs."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static EvaDatabase\u003cStaff\u003e getTypicalStaffDatabase() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cStaff\u003e ab \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (Staff staff : getTypicalStaffs()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            ab.addPerson(staff);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Returns an {@code EvaDatabase} with all the typical applicants."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static EvaDatabase\u003cApplicant\u003e getTypicalApplicantDatabase() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EvaDatabase\u003cApplicant\u003e ab \u003d new EvaDatabase\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (Applicant applicant : getTypicalApplicants()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            ab.addPerson(applicant);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static List\u003cStaff\u003e getTypicalStaffs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // TODO: Add some meaningful leaves here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Set\u003cLeave\u003e leaves \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return getTypicalPersons().stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(person -\u003e new Staff(person, leaves))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static List\u003cApplicant\u003e getTypicalApplicants() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ApplicationStatus status \u003d new ApplicationStatus(\"received\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return getTypicalPersons().stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .map(person -\u003e new Applicant(person, null, status))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 2,
      "Ben-Hanan": 12,
      "-": 59,
      "Hou-Rui": 48
    }
  },
  {
    "path": "src/test/java/com/eva/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/eva/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package com.eva.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static com.eva.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import com.eva.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003c?import com.eva.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "\u003cfx:root type\u003d\"com.eva.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 1,
      "-": 5
    }
  }
]
