[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* This is **software engineering project done by Team W14-4 from CS2103**.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  The project aims to:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * help medical supply managers keep track of medical products and storage"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * allow fast typists to reap the benefit of swift user interaction with CLI and GUI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* It is named `CLI-nic` because it emphasizes on user interaction via CLI and serves to smoothen the clinical product\u0027s supply flow."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* For the detailed documentation of this project, see the **[Product Website](https://ay2021s1-cs2103-w14-4.github.io/tp/)**."
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "-": 5,
      "jeffreytjs": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "mainClassName \u003d \u0027seedu.clinic.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    archiveName \u003d \u0027CLI-nic.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 1,
      "tohyuting": 2,
      "-": 72,
      "jeffreytjs": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "You can reach us at the email `cs2103w144@gmail.com`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "### Chan Qin Liang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "\u003cimg src\u003d\"images/qlchan24.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "[[github](https://github.com/qlchan24)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "[[portfolio](team/qinliang.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* Role: Review Manager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* Responsibilities: Code quality, review deliverables, release management"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "### Jeffrey Tan Jian Sheng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003cimg src\u003d\"images/jeffreytjs.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[[github](http://github.com/jeffreytjs)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[[portfolio](team/jeffrey.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* Role: Developer (Draft manager)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* Responsibilities: User stories, User guide, Developer guide management, UML diagram and product demo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Lim Zheng Wei"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "\u003cimg src\u003d\"images/zhengweii.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "[[github](http://github.com/zhengweii)] [[portfolio](team/zhengwei.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Role: Git/GitHub \u0026 Code Manager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Responsibilities: Providing assistance for Git,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "ensuring coding standards as well as managing the GitHub repo e.g."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "checking on LoC contributions and milestones management"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "### Toh Yu Ting"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u003cimg src\u003d\"images/tohyuting.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[[github](https://github.com/tohyuting)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[[portfolio](team/yuTing.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* Role: Minute manager/Assistant draft manager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* Responsibilities: Record minutes during meeting and manage collaborative documentations for project discussions."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  Work closely with draft manager to manage and update the user stories, user guide, UML diagram, developer guide."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  Update user and developer guides that are not specific to a feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "### Wang Zhenlin"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cimg src\u003d\"images/criss-wang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[[github](http://github.com/Criss-Wang)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[[portfolio](team/wangZhenlin.md)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* Role: Communication/progress manager; Tech Helper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * In charge of `Delete` command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * In charge of team communication (Setup channel/meeting schedule/deal with emergency situation)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Track and manage team progression."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Help team members with technical difficulties and catch up to the team\u0027s progress."
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 11,
      "qlchan24": 6,
      "tohyuting": 8,
      "zhengweii": 7,
      "-": 29,
      "jeffreytjs": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/java/seedu/clinic/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/java/seedu/clinic/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " user issues the command `delete ct/s i/12`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/java/seedu/clinic/ui/Ui.java)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `SupplierListPanel`, `WarehouseListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts is defined in matching `.fxml"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/java/seedu/clinic/ui/MainWindow.java) is"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-W14-4/tp/tree/master/src/main/java/seedu/clinic/logic/Logic.java)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "1. `Logic` uses the `ClinicParser` class to parse the user command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a supplier)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete ct/s i/12\")` API call."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "![Interactions Inside the Logic Component for the `delete ct/s i/12` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-W14-4/tp/blob/master/src/main/java/seedu/clinic/model/Model.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* stores the clinic data."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cSupplier\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " more OOP) model is given below.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-W14-4/tp/blob/master/src/main/java/seedu/clinic/storage/Storage.java)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* can save the clinic data in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Classes used by multiple components are in the `seedu.clinic.commons` package."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The `delete` feature will be elaborated in this section by its\u0027 functionality, the path execution with the aid of a sequence and an activity diagram."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The details of __DeleteCommand__\u0027s class implementation and its interactions with associated objects will also be discussed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "#### What Delete Feature does"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The `delete` feature allows user to remove a warehouse or supplier __(case 1)__."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The `delete` feature also allows user to remove a product from a certain warehouse or supplier __(case 2)__."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "In case 1, `TYPE` needs to be set to `w` or `s`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "In case 2, `TYPE` needs to be set to `pw` or `ps`, and a `PRODUCT_NAME` needs to be specified."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The deletion is limited to the items shown in the list displayed in GUI, and is done one item at a time."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "#### Path Execution of Delete Command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The workflow of a `Delete` Command when executed by a user is shown in the activity diagram below:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "![Delete Command Activity Diagram](images/DeleteCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure n. Delete Command Activity Diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "With reference to the activity diagram above, the user input will be sent to **`DeleteCommandParser`** for parsing."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The **`DeleteCommandParser`** will check if the compulsory prefixes are present (i.e. `ct/TYPE` and `i/INDEX`) and the corresponding"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "argument values are all valid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "A **`ParseException`** will be thrown if the check fails."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "If the `TYPE` parsed indicates a product deletion (via `ct/ps` or `ct/pw`), an additional field `PRODUCT_NAME` is parsed with its prefix and value checked."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Next, a new **`DeleteCommand`** will be generated and executed. There are four possible paths for the `delete` command:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. The target to delete is a `supplier`/`warehouse` \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CLI-nic finds the target `supplier`/`warehouse` at the specified `INDEX` of the displayed list, and remove it completely."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. The `INDEX` specified is invalid (e.g. exceeds the length of the list) \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "A **`CommandException`** error message wil be thrown."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. The target to delete is a `product` in a particular \u0027supplier\u0027 \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CLI-nic finds the target `supplier` at the specified `INDEX` of the displayed supplier list, and retrieve its product list.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "It finds the `product` with specified `PRODUCT_NAME` and remove it from the product list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. No `product` has the `PRODUCT_NAME` in the target warehouse/supplier \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "A **`CommandException`** error message wil be thrown."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "#### Structure of Delete command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "We demonstrate the structure of the `delete` feature implementation below."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "![Delete Command Class Diagram](images/DeleteCommandClassDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure n. Delete Command Class Diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Note that some commonly applied methods (such as getter/setter methods for each attribute) are not included to reduce verbosity."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "#### Delete Command\u0027s interaction with related objects"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "In the following section, the interaction between Delete Command and its associated objects in the delete feature will be discussed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "The sequence diagrams below demonstrate the workflow in the deletion feature."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "![Delete Command Sequence Diagram](images/DeleteCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure n. Delete Command Sequence Diagram for supplier deletion \u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. Parsing \u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    CLI-nic\u0027s `ClinicParser` will parse the user input and if the `delete` command word is present, the parser will try to parse the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    input to generate a valid `DeleteCommand` via `DeleteCommandParser`. \u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Checks for compulsory prefixes and valid arguments (`ct/TYPE` and `i/INDEX` in this case) are done. The code will throw a `ParseException` if the check fails.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    If multiple entries of `ct/TYPE` or `i/INDEX` are found, the last entry will be used as the argument. \u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Afterwards, all the valid arguments (`INDEX` and `TYPE`) will create a new `DeleteCommand`, which will be executed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. Execution \u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    The `DeleteCommand` is executed via a `execute` call from `LogicManager`. \u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Using the `targetType` attribute, the execution is first classified as either Supplier deletion (`s`) or Warehouse deletion (`w`). \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Base on the classification, the model will retrieve the relevant displayed list of warehouse/supplier via `model#getFilteredWarehouseList()`/`model#getFilteredSupplierList()`. \u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    It then locates the warehouse/supplier entry that user wants to delete via the `INDEX` passed in."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Afterwards, `model#deleteWarehouse`/`model#deleteSupplier` will remove the target entry from the list in the `model`. The `model` will then update the displayed list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. Result display \u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    With the deletion completed, a `CommandResult` will be returned to the `LogicManager` with a success message, which will"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    be shown to the user in the UI."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "![Delete Command Sequence 2 Diagram](images/DeleteCommandSequenceDiagram2.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure n. Delete Command Sequence Diagram for product deletion\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. Parsing"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    The parsing workflow is the same except that now an additional field `pd/PRODUCT_NAME` will be checked (with both prefix and argument) and parsed. \u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Afterwards, all the valid arguments (`INDEX`, `TYPE` and `PRODUCT_NAME`) will create a new `DeleteCommand`, which will be executed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. Execution"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    The `DeleteCommand` is executed via an `execute` call from `LogicManager`. \u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Using the `targetType` attribute, the execution is now classified as either Supplier-related product deletion (`ps`) or Warehouse-related product deletion (`pw`). \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Based on the classification, the model will again retrieve the relevant displayed list of warehouse/supplier via `model#getFilteredWarehouseList()`/`model#getFilteredSupplierList()`. \u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    It then locates the respective warehouse/supplier entry at the `INDEX` passed. A product in this entry is to be deleted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Next, the product matching the required `PRODUCT_NAME` will be retrieved via `getProductByName`, and an updated target entry with this product removed will be returned through `removeProduct` call."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Afterwards, `model#setWarehouse`/`model#setSupplier` will replace the old entry with the updated target entry from the list in the `model`. The `model` will then update the displayed list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. Result display \u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    With the deletion completed, a `CommandResult` will be returned to the `LogicManager` with a success message, which will"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    be shown to the user in the UI."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "### Edit feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The`edit` feature will be elaborated in this section by its\u0027 functionality and path execution with the aid of a sequence and an activity diagram."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### What Edit Feature does"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The edit feature allows user to edit supplier/warehouse name, phone number and remarks. In addition, the edit feature also allows user to edit a supplier\u0027s email and a warehouse\u0027s address. This is important as warehouses and suppliers might change their contact details from time to time and the user has to be able to edit those information quickly. One thing to note is that the edit feature does not allow users to edit any products associated with a particular supplier or warehouse. To edit the quantity or tags of a product, the update feature should be invoked instead. This feature will be elaborated in **Update** feature section below."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### Path Execution of Edit Command"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The workflow of an `edit` command when it is executed by a user is shown in the activity diagram below:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Activity Diagram](images/EditCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "After the `edit` command is called, user input will be sent to **`EditCommandParser`** for parsing. The `edit` command only allows editing of a single warehouse or supplier for every single command. If two types of `ct/COMMAND_TYPE` is provided, the last type specified will be used to process user\u0027s input. This applies for other prefixes used as inputs as well."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "If the compulsory prefixes are not present (i.e. `ct/COMMAND_TYPE` and `i/INDEX`), **`ParseException`** will be thrown if no compulsory prefixes or only one of the compulsory prefixes are given."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Similarly, **`ParseException`** will be thrown if no field for editing of suppliers or warehouses is provided or if there are any inappropriate fields supplied (e.g. input a string for index or phone prefix), Furthermore, fields resulting in no changes to an existing supplier or warehouse entry will throw a **`ParseException`** as well to remind user that the supplier or warehouse is unchanged after edits. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**`EditCommand`** will then be executed. The edited supplier or warehouse will be updated in the model, allowing users to see the changes done for the respective supplier or warehouse."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "In the following section, the interaction between different objects with the aid of a sequence diagram will be discussed to have a deeper understanding of the workflow when a user executes an edit command feature."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Sequence Diagram](images/EditCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "After receiving an input from user for edit command, `parse` method found in **`EditCommandParser`** will be invoked. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The input is tokenised by **`ArgumentTokenizer`** and **`ArgumentMultimap`** for quick retrieval in subsequent parsing will be returned."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "If either one of these compulsory prefixes (i.e. `type` and `index`) are missing, a **`ParseException`** will be thrown to remind users."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "If the values supplied for `type` and `index` is not valid (e.g. String value for `index`), a **`ParseException`** will be thrown."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "If incorrect prefixes such as the use of email prefix for warehouse and an address prefix for supplier was parsed, a **`ParseException`** will be thrown."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "An attempt to determine the correct type and creating the relevant **`EditDescriptor`** will then be carried out. It should be noted that both **`EditSupplierDescriptor`** and **`EditWarehouseDescriptor`** are subclasses of **`EditDescriptor`**."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The logical workflow of this process is shown in the sequence diagram below:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Descriptor Sequence Diagram](images/EditCommandDescriptorSequenceDiagram.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Parsing of general details will occur for both Supplier and Warehouse type. These include parsing of **`Name`**, **`Phone`** and **`Remarks`**. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "This is represented in the sequence diagram below:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command General Details Sequence Diagram](images/EditCommandDescriptorGeneralDetailsSequenceDiagram.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "In addition, since Supplier contains an **`Email`** attribute, parsing of this field will be carried out. On the other hand, parsing of **`Address`** will be carried out for warehouse entity instead since they do not contain an **`Email`** attribute. These respective parsing are represented by the sequence diagrams below:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Supplier Details Sequence Diagram](images/EditCommandDescriptorSupplierDetailsSequenceDiagram.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Warehouse Details Sequence Diagram](images/EditCommandDescriptorWarehouseDetailsSequenceDiagram.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "During this parsing process, **`ParseException`** will be thrown if any of the inputs are invalid."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "At the end of parsing, if the type is a Supplier, an **`EditSupplierDescriptor`** will be created which will be used to instantiate an EditCommand. Similarly, if the type is a Warehouse, an **`EditWarehouseDescriptor`** will be created which will be used to instantiate an EditCommand."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand will be executed and the workflow is illustrated below:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Edit Command Execution Sequence Diagram](images/EditCommandExecutionSequenceDiagram.png)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The current list of suppliers or warehouses shown to user is first obtained from model. Afterwards, supplier or warehouse at the specified index will be retrieved."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "A supplier with edited properties is created by invoking `createEditedSupplier` or `createdEditedWarehouse` method. If the model already contains a supplier or warehouse with the same name, an error will be thrown to inform user of the duplicated supplier or warehouse. **`Model`** will be updated to reflect the edited supplier or warehouse and an edit success message will be displayed to user, with the changes made to the relevant supplier/warehouse as well."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### Why Edit feature is implemented this way"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The `edit` command is implemented this way to ensure consistency with the other commands in the application. This helps to minimise any potential confusion for the users."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "In addition, it was intended for **EditCommandParser** to throw out a **ParseException** when none of the field changes an existing entry. This serves as a reminder for users in case they made a minor mistake, resulting in a supplier or warehouse to not update the way they intended for it to."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Besides, a command type prefix, `ct/COMMAND_TYPE` is required in the implementation of `edit` command to indicate whether user wishes to edit a warehouse or supplier entry. Without this, an alternative would be for a `TYPE` parameter, where user have to indicate `supplier` or `warehouse`. However, this may not be suitable for our target user, who wishes to update stocks quickly."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Lastly, another alternative considered was to create separate commands for warehouses and suppliers respectively. For example, `editw` and `edits` to represent edit warehouse and edit supplier. However, this might increase duplicated codes, since minimal changes to the code would be found for each class of command."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Therefore, our team decided to implement `edit` command by taking in prefixes and throwing our relevant exceptions at appropriate points after considering code quality and end user experience."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "### View feature"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The `view` feature will be elaborated in this section by its\u0027 functionality and path execution with the aid of a sequence and an activity diagram."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### What View feature does"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "`view` command allows user to view a particular warehouse or supplier in warehouse or supplier list displayed. This allows users to take a closer look at the contact details of a specific warehouse or supplier which they might be interested to contact for further details. For each command, only one warehouse or one supplier can be requested for viewing."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### Path Execution of View Command"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The workflow of an `view` command when it is executed by a user is shown in the activity diagram below:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![View Command Activity Diagram](images/ViewCommandActivity.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "When a user\u0027s input is parsed, **`ViewCommandParser`** checks if both command type and index are present in the input. A **`ParseException`** will be thrown if either one or both are missing in user\u0027s input."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Only 2 command types are allowed, they are `ct/s` and `ct/w`. In addition, if any values for prefixes are invalid (e.g. invaid command type specified), a **`ParseException`** will be thrown."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "If parsing is successful, **`ViewCommand`** will be created and executed. If the `INDEX` specified by user is greater than the length of the list, a **`ParseException`** will be thrown. At the end, a view command success message will be displayed and the relevant supplier or warehouse list will only show one supplier or warehouse."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The logical workflow of this process is further explained in the sequence diagram below:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![View Command Sequence Diagram](images/ViewCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Upon receiving user\u0027s input, parse command of **`ViewCommandParser`** will be invoked. Values associated with prefixes `ct/` and `i/` will be obtained by invoking `tokenize` method of **`ArgumentTokenizer`**. As mentioned above, if either or both prefixes are missing, an error will be thrown to inform the user of a missing prefix. When parsing `index` and `type` values, a **`ParseException`** will be thrown if the values specified are invalid (e.g wrong type or does not conform to `TYPE_CONSTRAINTS`). **`ViewCommand`** is created with `index` and `type` as input. It will then be executed."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The workflow for an execution of **`ViewCommand`** is as shown:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![View Command Execution Sequence Diagram](images/ViewCommandExecutionSequenceDiagram.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**`Supplier`** or **`Warehouse`** at the specified index is retrieved from `supplierList` or `warehouseList` respectively. Predicate containing the **`Supplier`** or **`Warehouse`** name will be created and parsed into `updateFilteredSupplierList` or `updateFilteredWarehouseList` method under **`Model`** class to show only a particular supplier or warehouse in the list. A successful execution of **`ViewCommand`** will also be displayed to user."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### Why View feature is implemented this way"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**`view`** command contains standardise prefix as with other commands in **CLI-nic** to help user learn how to use **CLI-nic** faster. In addition, a choice to view by `index` instead of by `name` ensures efficiency since users do not need to key in the full name of supplier or warehouse."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "### Help feature"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The `help` feature will be elaborated in this section by its\u0027 functionality."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### What Help feature does"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "An activity diagram showing the workflow of `help` command is shown below:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "![Help Command Activity Diagram](images/HelpCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "`help` feature allows user to view `help` messages for all commands briefly or `help` message for specific commands. This allows user to have a over-arching idea of what they can do in **CLI-nic**. Afterwards, a user can read up about the command format and sample commands by typing in `help COMMAND`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### Why Help feature is implemented this way"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Instead of providing a link and asking users to read the user guide, our team decided that it would be more convenient for users to access the help message for each command within the application itself. This allows user to instantly know what to key into the command box instead of switching between user guide in the browser and **CLI-nic**. In addition, this allows user to access `help` page even without an internet connection as well."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "The `list` feature will be elaborated in this section by its\u0027 functionality."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "#### What List feature does"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "`list` feature allows user to list all suppliers and warehouses stored in **CLI-nic**. This feature allows users to retrieve back all suppliers and warehouses in the displayed supplier and warehouse lists after executing a `view` or `find` command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "#### What Find feature does"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "The find feature allows users to find all relevant suppliers or warehouses by their names, by their remarks and/or by"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "names of the products sold/stored. Users are able to search for relevant suppliers or warehouses using either only one"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "of these criterion or a combination of these criteria. Note that users are only able to search for either suppliers or"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "warehouses at any one time and not both at the same time."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "#### How it is implemented"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 1. After the `find` command is called, the user input will be sent to **FindCommandParser** for parsing."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 2. **FindCommandParser** will then check if the compulsory prefix `ct/COMMAND_TYPE` is present. If the user enters"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "`ct/COMMAND_TYPE` prefix more than once, only the last prefix specified will be used to process user\u0027s input. If the"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "prefix `ct/COMMAND_TYPE` is not present, a **ParseException** will be thrown."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 3. **FindCommandParser** will then proceed to check for the existence of at least one of the following prefixes"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " `n/NAME`, `r/REMARK` and `pd/PRODUCT`. If none is found, a **ParseException** will be thrown. Again, if the user"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " specifies the same prefix more than once, only the last prefix specified will be used to process the user\u0027s input."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 4. Once the user has entered the correct format for the command, their input will then be parsed."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 5. **FindCommandParser** will create a new **FindCommand** to be executed and the relevant suppliers or warehouses"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "will be filtered out."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Step 6. The model will then display the relevant suppliers or warehouses to the users via the method"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "`model#getFilteredSupplierList()` or `model#getFilteredWarehouseList()`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "#### Why it is implemented this way"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "The `find` command is implemented this way to ensure consistency with the other commands in the application regarding"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "the prefixes. This helps to minimise any potential confusion for the users by standardising the prefixes that `find`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "command takes in with the other relevant commands. In addition, a command type prefix, `ct/COMMAND_TYPE` is required in the"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "implementation of `find` command to indicate whether the user wishes to search for suppliers or warehouses. Without this"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "prefix, the application will not be able to know if the user wishes to search for suppliers or warehouse."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "#### Alternatives considered"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "In our previous implementation, we did not require the user to enter the command type prefix. Instead, we only required"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "the user to enter the `TYPE` parameter in the form of either `supplier` or `warehouse`. However, typing the whole word"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "out may not have been suitable for our target user, who wishes to find suppliers or warehouses quickly. Hence, our team"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "decided to use a command type prefix in place of a `TYPE` parameter, which is shorter and easier to type."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "In our current implementation, users are required to enter at least one or a combination of the following prefixes:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "`n/NAME`, `r/REMARK`, `pd/PRODUCT`. This allows the application to determine which criterion/criteria to filter by."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Another alternative that was previously implemented was to split the find command into three separate commands: `findn`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "which allows users to search by name, `findr` which allows users to search by remarks and `findp` which allows users to"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "search by products. However, this implementation was deemed unsuitable as it increased code duplication with minimal"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "changes between the different classes. In addition, by splitting into three separate commands, users are unable to"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "search for suppliers or warehouses using multiple criteria. They could only search by name, by remark or by product in"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "any single command. By using prefixes, users are able to search for suppliers or warehouses using any combination of"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "name, remark and product. Taking the aforementioned points into consideration, our team has therefore decided to"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "implement the `find` command by taking in prefixes and throwing our relevant exceptions at appropriate points after"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "considering code quality and end user experience."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "### Update product feature"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The update product mechanism is facilitated by the `UpdateCommandParser`, `UpdateCommand`,  and the `UpdateProductDescriptor`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The `UpdateCommandParser` implements `Parser` to parse the user input, the `UpdateCommand` extends `Command` to execute the main logic,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "and the `UpdateProductDescriptor` allows the parser to pass a specification of the updated product to the `UpdateCommand`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Given below is an example usage scenario and how the update product mechanism behaves at each step."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Step 1. The user decides to update the stock for a product called \u0027Panadol\u0027 with a new quantity of 50 units"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "in the warehouse named \u0027Jurong Warehouse\u0027. The user also decides that he wants to give \u0027Panadol\u0027 a tag \u0027fever\u0027."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The user does this by executing the `update ct/w n/Jurong Warehouse pd/Panadol q/50 t/fever` command."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The `ClinicParser#parseCommand` will then call the `UpdateCommandParser#parse` method with all the arguments"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "passed by the user."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Step 2. `UpdateCommandParser#parse` then attempts to create new instances of `name` for the supplier/warehouse"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "and the product, and a new `UpdateProductDescriptor` with the provided quantity and tags, if any. An exception will be thrown if any of the arguments are invalid, which will be presented on the GUI."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "After which, it will call the `UpdateCommand` with the `Type`, warehouse/supplier\u0027s `Name` and `UpdateProductDescriptor` created,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "and return it to `ClinicParser#Parse` which will in turn return the `UpdateCommand` to `LogicManager#execute`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The following sequence diagram shows how the update product operation works: (TODO: Insert diagram)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Step 3. `LogicManager#execute` calls `UpdateCommand#execute` with the `Model` instance. In `LogicManager#execute`,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "the `Model#getWarehouseByName` or `Model#getSupplierByName` is called (to be implemented), which"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "iterates through the warehouse/supplier list to find a warehouse/supplier with a `Name` that matches the one provided"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "in the `UpdateCommand`. If it is not found, `NoSuchElementException` is thrown, otherwise, the `UpdateCommand#execute`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "method copies the existing product set for that warehouse/supplier to a new `Set\u003cProduct\u003e`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Step 4. `UpdateCommand#execute` then checks if a `Product` of the same `Name` as the `Product` to be updated exists in the `Set\u003cProduct\u003e`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "If the `Product` exists, the method does an additional check to ensure that either the tag(s) or quantity (or both)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "is supplied for the `Product` to be updated, failing which, an exception is thrown. If the check passes, the original"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "`Product` is removed from the set."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Step 5. `UpdateCommand#execute` adds the updated `Product` to the `Set\u003cProduct\u003e`, and creates an updated"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "warehouse/supplier with the updated product. The method then calls `Model#setWarehouse` or `Model#setSupplier` to update the model,"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "and calls `Model#updateFilteredWarehouseList` to update the list to be displayed to the user."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The method then passes a `CommandResult` with a success message back to `LogicManager#execute`. Finally, the model"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "is saved and the GUI is updated with the success message."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "The following activity diagram summarizes what happens when a user updates a product: (TODO: Insert Diagram)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "### Add feature"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "In this section, the functionality of the add feature, the expected execution path, the structure of"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "the AddCommand class, the interactions between objects with the AddCommand object will be discussed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#### What is the Add supplier/warehouse feature"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The add supplier/warehouse feature is facilitated by the `AddCommandParser` and the `AddCommand`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The `AddCommandParser` implements `Parser` and the `AddCommand` extends `Command`, allowing the user to"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "add a supplier/warehouse to the app using the command line."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The supplier consists of : Type, Name, Phone, Email"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The warehouse consists of : Type, Name, Phone, Address"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The supplier/warehouse also consists of one optional field that can be added:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* Remark"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#### Path Execution of Add Command"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The overview of the AddCommand Activity Diagram is shown below:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "![Add Command Activity Diagram](images/AddCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "After the user calls the Add command, the code will check for the presence of all the compulsory prefixes"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "in the command. The code will throw a ParseException if there are any missing/invalid prefixes. After that is"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "checked, it will check if the new supplier/warehouse added is a duplicate (The supplier/warehouse already"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "exist in the application). It will throw a CommandException when the user tries to add a duplicate"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "order. Otherwise, it will add the supplier/warehouse and prints a success message to the user."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#### Structure of Add feature"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The following diagram shows the overview of the AddCommand Class Diagram:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "![Add Command Class Diagram](images/AddCommandClassDiagram.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The above class diagram shows the structure of the AddCommand and its associated classes and interfaces. Some"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "methods and fields are not included because they are not extensively utilised in AddCommand; such as public"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "static fields and getter/setter methods."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#### Interaction between objects when the Add Command is executed"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The sequence for adding supplier and warehouse is similar, here is the sequence diagram for the Add Command"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "for supplier as shown below:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "![Add Command Sequence Diagram](images/AddCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The arguments of the add command will be parsed using the parse method of the AddCommandParser class."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "The AddCommandParser will tokenize the arguments parsed in using the tokenize method of ArgumentTokenizer"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "class which returns the tokenized arguments. Using the tokenized arguments, the Parser will check if the"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "arguments parsed in matches with the tokenized arguments using the arePrefixesPresent method."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "There are two scenarios :"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "1. Some compulsory prefixes are not present :"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   AddCommandParser will throw a new ParseException object to the LogicManager."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "1. All compulsory prefixes are present in the arguments :"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   It will then proceed to use the getValue method of the ArgumentMultimap class to get the value of the"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   prefixes. For example, if the argument parsed in is ct/s, the getValue method will get the value \u0027s\u0027."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   Subsequently, it will use the ParseUtil methods to get the corresponding object values and put it into"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   the parameters of the new Supplier/Warehouse object. The Supplier/Warehouse object will be put into the"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   parameter of the AddCommand object and this will be returned to the LogicManager class for execution."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   LogicManager will then call the execute() method of this AddCommand object. In the execute() method, it will"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   use the Model class to call hasSupplier/hasWarehouse method to check for duplicates, if it is a duplicate, the"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   order will throw a CommandException which indicates that there is a duplicate supplier/warehouse in the CLI-nic"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   application already. Else, it will successfully add the new supplier/warehouse using addSupplier/addWarehouse"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   method. Finally, it return a new CommandResult object, containing a String that indicates a successful"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   addition."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* manager of a medical supplies company that manages warehouses across the country"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* tech-savvy manager who prefers typing to clicking"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* keeps track of supplies in each warehouse"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* needs to quickly contact suppliers to restock medical supplies when the stock runs low at various warehouses"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* manages suppliers/warehouses information conveniently"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* helps to retrieve and identify key suppliers/warehouses information quickly"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                | So that I can…​                                                        |"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | add my suppliers\u0027 information and products offered | easily refer to the contacts and give them a call for updates on their supply availability     |"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | add details of warehouses and stocks for each product | easily keep track of the stocks in each of my warehouse |"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * *`  | standard user  | add remarks to a supplier entry         | note down details that are specific to the supplier          |"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | access the command list/user guide  | easily refer to instructions for commands and guidance for usage    |"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * *`  | standard user  | clear all suppliers and warehouses entries in one command | easily remove all entries if I am managing a new group of suppliers and warehouses |"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | delete a supplier/warehouse entry   | remove suppliers/warehouses no longer operating |"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | delete a particular product from a supplier/warehouse entry   | remove product no longer sold/stored for the supplier/warehouse|"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * *`  | standard user  | edit the information of a specific warehouse or supplier          | easily update any changes in contact information of a particular supplier/warehouse |"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "| `* * *`  | standard user  | find medical products associated with warehouses or suppliers     | locate relevant items without having to go through all the lists                |"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * *`  | standard user  | list all warehouses or suppliers     | easily see all the suppliers and warehouses I am in charge of|"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * *`  | standard user  | view the information of a specific warehouse or supplier          | retrieve details about suppliers/warehouses I can\u0027t remember and contact them       |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "| `* * * ` | intermediate user | update the information for a specific product in warehouses and suppliers | keep track of the changes in the stocks of the warehouses |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "(For all use cases below, the **System** is the `CLI-nic` and the **Actor** is the `user`, unless specified"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " otherwise)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC01 Add a warehouse**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User keys in command to add a warehouse."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic adds the warehouse into the list and shows a success message."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* 1a. CLI-nic detects invalid syntax in the entered warehouse info."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * 1a2. CLI-nic requests for the correct syntax of warehouse info."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a3. User enters new data."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* 1b. CLI-nic detects addition of duplicated warehouse."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * 1b1. CLI-nic shows duplicated warehouse message."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * 1b2. CLI-nic requests for the correct warehouse info."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * 1b3. User enters new data."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Steps 1b1-1b3 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC02 Add a supplier**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User keys in command to add a supplier."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic adds the supplier into the list and shows a success message."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. CLI-nic detects an error in the entered supplier info."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic shows an error message ."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. CLI-nic requests for the correct data."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a3. User enters new data."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC03 Add a new product to supplier**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User keys in command to add a product."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic adds the product into the list and shows a success message."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. CLI-nic detects an overlap in the entered product and the existing products in the supplier\u0027s supply list."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. CLI-nic requests for a new product name."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a3. User enters a product name."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1-1a3 are repeated until the name entered is correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1b. CLI-nic cannot find the supplier from the supplier list."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b2. CLI-nic requests for a new supplier name."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b3. User enters a new supplier name."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1b1-1b3 are repeated until the supplier is found. \u003cbr\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC04 Clear all supplier and warehouse entries**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User requests to clear the data in the application."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic clears all supplier and warehouse entries, shows empty lists of suppliers and warehouses and shows a success message."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC05 Delete a supplier**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User requests to view a specific supplier by keyword."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic shows the specific supplier and its index."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User deletes the supplier via its index in the list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "4. CLI-nic deletes the supplier in the list and shows a success message."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 2a. The supplier list is empty."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 2a1. CLI-nic informs the user there is no supplier in the list currently."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a1. CLI-nic shows an error message and gives command suggestions."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a2. User enters the new supplier index."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC06 Delete a warehouse**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User requests to view a specific warehouse by keyword."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic shows the specific warehouse and its index."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User deletes the warehouse via its index in the list."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "4. CLI-nic deletes the warehouse in the list and shows a success message."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 2a. The warehouse list is empty."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 2a1. CLI-nic informs the user there is no warehouse in the list currently."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a1. CLI-nic shows an error message and gives command suggestions."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a2. User enters the new warehouse index."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC07 Delete a product from a supplier**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User requests to view a specific supplier by keyword."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic shows the specific supplier and its index."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User requests to delete a product from the supplier via the index returned and the product name displayed."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "4. CLI-nic deletes the specified product from the target supplier and shows a success message."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 2a. The supplier list is empty."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 2a1. CLI-nic informs the user there is no supplier in the list currently."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a1. CLI-nic shows an error message and gives command suggestions."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3a2. User enters the new supplier index."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 3a1-3a2 are repeated until the index entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 3b. The given name is invalid."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3b1. CLI-nic shows an error message and gives command suggestions."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 3b2. User enters the new product name."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 3b1-3b2 are repeated until the name entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC08 Edits a supplier**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "1. User requests to edit a specific supplier according to the index in the supplier list displayed."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "2. CLI-nic shows the specific supplier at that index."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. The index specified is larger than the size of the supplier list."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs the user the index input is larger than the current size of supplier list displayed. "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User enters a new supplier index."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Steps 1a1-1a2 are repeated until the index entered is within the size of the supplier list."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. User requests to edit the address of a specific supplier."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs the user that warehouse does not contain address."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User removes address as a field to be edited."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    User case ends."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. Users uses an invalid command format."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs user of the invalid command format."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User enters a new edit command."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Steps 1a1-1a2 are repeated until the index entered are correct."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC09 Edits a warehouse**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "1. User requests to edit a specific warehouse according to the index in the warehouse list displayed."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "2. CLI-nic shows the specific warehouse at that index."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. The index specified is larger than the size of the warehouse list."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs the user the index input is larger than the current size of warehouse list displayed. "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User enters a new warehouse index."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Steps 1a1-1a2 are repeated until the index entered is within the size of the warehouse list."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. User requests to edit the email address of a specific warehouse."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs the user that warehouse does not contain email address."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User removes email address as a field to be edited."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    User case ends."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* 1a. Users uses an invalid command format."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a1. CLI-nic informs user of the invalid command format."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * 1a2. User enters a new edit command."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Steps 1a1-1a2 are repeated until the index entered are correct."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC10 Find Suppliers of a product**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User enters the command to find the suppliers of a specific product."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic displays all suppliers that sells the product if any."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User scrolls through all the relevant results and looks for the information that they desire."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. User enters invalid command for finding."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic requests for the correct command."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User enter a new command for finding."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1 and 1a2 are repeated until a valid find command is entered. \u003cbr\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC11 Find Warehouses containing a product**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User enters the command to view a particular product stored in all warehouses."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic displays all the relevant products that are stored in the warehouses if any."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User scrolls through all the relevant results and looks for the information that they desire."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. User enters invalid command for finding."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic requests for the correct command."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User enter a new command for finding."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1 and 1a2 are repeated until a valid find command is entered. \u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC12 List all supplier and warehouse entries**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "1. User requests to list the data in the application."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "2. CLI-nic retrieves all supplier and warehouse entries, shows lists of suppliers and warehouses and shows a success message."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC13 View Help**"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User asks for the list of command."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic displays information about all the commands and contains sample commands that the user can try out."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User try out commands listed under help to familiarise themselves with CLI-nic."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. User asks for a specific command via the command keyword."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic displays instruction on how the command they ask can be used. Sample command call will also be given."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User follows the instruction to try out command they asked to familiarise themselves with this command."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1b. User enters invalid help command."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b2. CLI-nic requests for the correct command."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b3. User enters a new help command."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1b1-1b3 are repeated until a valid help command is entered. \u003cbr\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC14 Update quantity of a Product in a Warehouse**"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User keys in command to update a product’s quantity with a specific product, warehouse and quantity."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. If the product exists, CLI-nic overwrites the product’s quantity. Else if the product does not exist, CLI-nic adds the product and its quantity to the warehouse. CLI-nic shows a success message."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. CLI-nic cannot find the warehouse."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. CLI-nic requests for a new warehouse name."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a3. User enters a new name."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1-1a3 are repeated until the data entered are correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC15 View Supplier**"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User enters command to view supplierA information."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic displays all of supplierA information, including contact number and any notes such as “fast supplier”."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User looks through the information of supplierA displayed and might call up the supplier if necessary."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a User enters invalid supplier name."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic requests for new supplier name."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User enters a new supplier name."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1 and 1a2 are repeated until a valid supplier name is entered. \u003cbr\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "**Use case: UC16 View Warehouse**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User enters command to view WarehouseA information."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic displays all of WarehouseA information, including contact number and any notes such as “first warehouse”."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "3. User looks through the information of WarehouseA displayed and might call up the warehouse if necessary."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a User enters invalid warehouse name."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic requests for new warehouse name."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User enters a new warehouse name."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1 and 1a2 are repeated until a valid warehouse name is entered. \u003cbr\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "### Use cases [Coming Soon]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Use case: UC00 Create a purchase order**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. User requests to create a purchase order with a specific supplier, store, and a list of products and their quantities"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "2. CLI-nic creates the purchase order"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1a. Any of the given names are invalid."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1a2. User enters new names for the command."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1a1 and 1a2 are repeated until all the given names are valid. \u003cbr\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1b. The number of products names supplied and the number of product quantities given do not match."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1b2. User enters the command again with the new products and quantities."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1b1 and 1b2 are repeated until the products and their quantities match. \u003cbr\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* 1c. Any one of the arguments is not supplied."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1c1. CLI-nic shows an error message."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * 1c2. User enters the command again."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Steps 1c1 and 1c2 are repeated until all required arguments are supplied. \u003cbr\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The files used to store information about supplier/warehouse/product should be independent from each other and follow a similar format."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The system should recognize common French/German letters as they may appear in the name of medical products."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The system should be able to track \u003e 1k suppliers, \u003e 1k warehouses, \u003e 1k medical supplies without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The size of the application excluding the data files should be minimal (\u003c 30MB)."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The system should work off-line."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1.  The system stores data locally."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Medical products/supplies**: The items / tools / medicine consumed by patients"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Supplier**: The companies / entities providing the sources of medical products"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Warehouse**: The places where the medical supplies are channeled to and kept. The storage condition of these warehouses are managed by the manager, which is our app user"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#### Command Prefix"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|Prefix |Meaning |Used in the following Command(s)|"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "| ------- |-------- | ------------ |"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|ct/ |Command Type |Add, Delete, Edit, Find, Update |"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|n/ |Supplier/Warehouse Name |Add, Edit, Find, Update |"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|p/ |Phone Number |Add, Edit |"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|e/ |Email Address |Add, Edit |"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|addr/ |Address |Add, Edit |"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|r/ |Remark |Add, Find, Edit |"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|pd/ |Product Name |Edit, Delete, Find, Update |"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|i/ |Index |Delete |"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|t/ |Tag |Update |"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "|q/ |Quantity of product |Update |"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "### Adding a supplier"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "1. Add command format: `add ct/TYPE n/SUPPLIER_NAME p/PHONE e/EMAIL_ADDRESS [r/SUPPLIER_REMARK]`"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Minimal information e.g. `add ct/s n/John Doe p/98766789 e/johndoe@example.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: Adds a supplier with the above details to the list and displayed on the GUI"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: With remarks e.g. `add ct/s n/John Doe p/98766789 e/johndoe@example.com r/Fast"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      delivery`\u003cbr\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: Adds the supplier to the list, including the remark"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Invalid Prefix or missing compulsory Prefixes e.g. `add ct/s n/John Doe p/98766789`"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      or `add ct/s n/John Doe p/98766789 e/johndoe@example.com z/friend`\u003cbr\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: No supplier is added. Error details shown in the response message. A help message displayed"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      to guide user accordingly. SupplierList on GUI remain unchanged."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Add order with existing SUPPLIER_NAME in list e.g. `add ct/s n/John Doe p/98766789 e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      /johndoe@example.com` followed by `add ct/s n/John Doe p/91234567 e/johndot@example.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: An error will occur and a message will be displayed, stating that a supplier with duplicate"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      SUPPLIER NAME cannot be added into the list. SupplierList on GUI remain unchanged."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "### Adding a warehouse"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "1. Add command format: `add ct/TYPE n/WAREHOUSE_NAME p/PHONE addr/ADDRESS [r/WAREHOUSE_REMARK]`"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Minimal information e.g. `add ct/w n/John Ptd Ltd p/98766789 addr/John street, block 123"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      , #01-01`\u003cbr\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: Adds a warehouse with the above details to the list and displayed on the GUI."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: With remarks e.g. `add ct/w n/John Ptd Ltd p/98766789 addr/John street, block 123, #01-01"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      r/Largest warehouse`\u003cbr\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: Adds the warehouse to the list, including the remark"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Invalid Prefix or missing compulsory Prefixes e.g. `add ct/w n/John Ptd Ltd p/98766789`"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      or `add ct/w n/John Ptd Ltd p/98766789 addr/John street, block 123, #01-01 z/large`\u003cbr\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: No warehouse is added. Error details shown in the response message. A help message displayed"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      to guide user accordingly. WarehouseList on GUI remain unchanged."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Test case: Add order with existing WAREHOUSE_NAME in list e.g. `add ct/w n/John Ptd Ltd p/98766789"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      addr/John street, block 123, #01-01` followed by `add ct/w n/John Ptd Ltd p/91234567 addr/Ang Mo Kio"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      street 12, block 123, #01-01`\u003cbr\u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      Expected: An error will occur and a message will be displayed, stating that a warehouse with duplicate"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      WAREHOUSE NAME cannot be added into the list. WarehouseList on GUI remain unchanged."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "### Deleting a supplier"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "1. Deleting a supplier while all suppliers are being shown"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "   1. Prerequisites: List all suppliers using the `list` command. Multiple suppliers in the list."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      Expected: No supplier is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 379,
      "qlchan24": 44,
      "tohyuting": 218,
      "zhengweii": 41,
      "-": 287,
      "jeffreytjs": 176
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   1. Run the `seedu.clinic.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 1,
      "-": 46,
      "jeffreytjs": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   e.g. `seedu.clinic.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   e.g. `seedu.clinic.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   e.g. `seedu.clinic.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jeffreytjs": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Team: W14-4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "CLI-nic is **an application to help medical supply managers keep track of medical products and storage.** It is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "optimized for these managers to **update product supply conditions and access critical product information quickly**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "via fast typing and efficient Graphical User Interface interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "1. Download the latest `CLI-nic.jar` from [here](https://github.com/AY2021S1-CS2103-W14-4/tp/releases)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your CLI-nic system."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "display instructions for the various commands. Typing **`help delete`** and pressing Enter will display in-depth"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "instructions for the **`delete`** command.\u003cbr\u003eHere are some sample commands to try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "   * **`add`** `ct/w n/warehouseA p/00000000 addr/John street, block 123, #01-01 r/First warehouse` : Adds a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    warehouse named `warehouseA` located at `John street, block 123, #01-01` to CLI-nic. This warehouse is the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    `First warehouse`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`add`** `ct/s n/Philips Pharmaceutical p/00000000 e/philipsPharm@gmail.com r/Largest contractor` : Adds a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    supplier named `Philips Pharmaceutical` with the phone number `00000000` and email `philipsPharm@gmail.com` to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    CLI-nic. This supplier is the `Largest contractor`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`assignmacro`** `a/uwm cs/update ct/w n/main warehouse` : Assigns a macro that pairs the alias `uwm` to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   command string `update ct/w n/main warehouse`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`clear`** : Deletes all suppliers and warehouses entries in CLI-nic."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`delete`** `ct/s i/12` : Deletes the supplier at index 12 from the list of suppliers."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`edit`** `ct/s i/1 n/Alice p/68574214` : Edits the name and phone number of the supplier at index 1 in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   the list of suppliers to be `Alice` and `685742141`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`find`** `ct/w pd/panadol` : Displays all the warehouses that has a product named `panadol`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`list`**: Displays all the suppliers and warehouses in CLI-nic."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`removemacro`** `uwm` : Removes the macro with the alias `uwm`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`update`** `ct/w n/WarehouseA pd/Panadol q/10 t/Fever` : Updates the quantity of `Panadol` in `WarehouseA` to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   `10`, and assigns the tag of `Fever` to the product."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   * **`view`** `ct/w i/3` : Displays all the information associated with the warehouse at index 3 of warehouse list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   such as the name, address, phone number, products stored in the warehouse etc."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "1. Refer to the [Features](#features) section below for more details of each command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  e.g. in `delete ct/TYPE i/INDEX`, `TYPE` and `INDEX` are parameters which can be used as `delete ct/w i/1`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Items in square brackets are optional\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  e.g. `add ct/TYPE n/NAME p/PHONE e/EMAIL [r/REMARK]` can be used as `add ct/s n"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  /Philips Pharmaceutical p/00000000 e/philipsPharm@gmail.com r/fast reply` or as `add ct/s n/Philips"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  Pharmaceutical p/00000000 e/philipsPharm@gmail.com`. The latter command is equivalent to `add ct/s n/Philips"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  Pharmaceutical p/00000000 e/philipsPharm@gmail.com r/`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* Items with `…`​ after them can be used multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  e.g. `[pd/PRODUCT_NAME…​]` can be used as `pd/panadol`, `pd/panadol needle syringe` and so on. Note that only"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  **one prefix is used with multiple keywords** if necessary. As such, the format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  `pd/panadol pd/needle pd/syringe` where multiple prefixes are used is incorrect."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE`, `p/PHONE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* If multiple arguments with the same prefix are present in the input, and if all the values are valid, only the last"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  prefix value is chosen. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  e.g. if a user enters `n/Alice n/Bob` where both `Alice` and `Bob` are valid, no error will be thrown. Instead, the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  name `Bob` will be used instead of `Alice`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Usage of irrelevant prefixes or forward slashes `/` are not allowed by default except when user chooses to"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  define it in their assigned Macro commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  e.g. `delete ct/TYPE i/INDEX pd/PRODUCT_NAME` can be used as `delete ct/pw i/1 pd/Panadol` but not"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  `delete ct/pw i/1 pd/Panadol r/Fast relief` nor `delete ct/pw i/1 pd/Panadol/Panadol Strong`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Displays a list of available commands and their utility descriptions."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Narrows down to a specific command and its input format and sample commands if specified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "The link to the user guide can also be accessed by pressing F1. Note that an active Internet connection is needed to"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "view the user guide."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![help](images/helpLinkToUG.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `help` : Displays a list of available commands and their description."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `help add` : Displays the detailed description, input format and sample commands for the `add` command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![help](images/helpGenericMessage.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "### Adding a supplier/warehouse : `add`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Adds a supplier/warehouse to the CLI-nic application."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format: `add ct/TYPE n/NAME p/PHONE [e/EMAIL] [addr/ADDRESS] [r/REMARK]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Note that a warehouse cannot have an `EMAIL` and a supplier cannot have an `ADDRESS`. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Although `EMAIL` and `ADDRESS` are marked as optional parameters, either one of these parameters must be present"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  in the input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* When adding a supplier, `EMAIL` must be present but `ADDRESS` must not."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* When adding a warehouse, `ADDRESS` must be present but `EMAIL` must not.  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `NAME` should start with an alphanumeric character."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `PHONE` should not have a spacing in between. `p/98761234` is allowed, but `p/9876 1234` is not allowed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "   Only numbers are allowed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `EMAIL` should be a valid email address."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `ADDRESS` should be a valid address. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `add ct/s n/Philips Pharmaceutical p/00000000 e/philipsPharm@gmail.com r/Largest contractor`: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  Adds a supplier named `Philips Pharmaceutical` with the phone number `00000000` and email `philipsPharm@gmail.com`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  This supplier is the `Largest contractor`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `add ct/w n/WarehouseA p/00000000 addr/John street, block 123, #01-01 r/First warehouse` : Adds a warehouse"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  named `WarehouseA` located at `John street, block 123, #01-01` with the phone number `00000000`. This warehouse is"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  the `First warehouse`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![add](images/addSupplier.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![add](images/addWarehouse.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Assigning macro to selected command string: `assignmacro`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Assigns a macro that pairs the specified alias to the specified command string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format:\t`assignmacro a/ALIAS cs/COMMAND_STRING`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `alias` cannot be an existing command word such as `add`, `delete` etc."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `alias` cannot be already used in an existing macro."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `alias` should only consist of alphanumeric characters and/or underscores. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `COMMAND_STRING` can consist of any number of prefixes, but the first word has to be a pre-defined command word.  "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `assignmacro a/uwm cs/update ct/w n/main warehouse` : Assigns a macro that pairs the alias `uwm` to the command string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  `update ct/w n/main warehouse`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![assign macro](images/assignMacro.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Deletes all suppliers and warehouses entries in CLI-nic."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![clear](images/clearCommand.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Deleting a particular supplier or warehouse : `delete`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Deletes a particular supplier or warehouse entry that is not needed anymore."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Format: `delete ct/TYPE i/INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `INDEX` must be a positive integer, not exceeding the total length of the displayed list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `delete ct/s i/12` : Removes the supplier at index 12 of the list of suppliers."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `delete ct/w i/1` : Removes the warehouse at index 1 of the list of warehouses."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![delete](images/deleteWarehouse.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Deleting a product in a supplier or warehouse : `delete`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Deletes a product entry no longer sold by a specific supplier or stored by a specific warehouse."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Format: `delete ct/TYPE i/INDEX pd/PRODUCT_NAME`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `ps` for products in supplier or `pw` for products in warehouse."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `INDEX` must be a positive integer, not exceeding the total length of the displayed list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `PRODUCT_NAME` must be an identifiable full name of the product, and it must start with an alphanumeric character."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `PRODUCT_NAME` is case-insensitive."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `PRODUCT_NAME` must exist in the current supplier or warehouse before it can be deleted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `delete ct/pw i/1 pd/Panadol` : Removes the `Panadol` product from the warehouse at index 1 of the list of warehouses."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `delete ct/ps i/12 pd/Aspirin` : Removes the `Aspirin` product from the supplier at index 12 of the list of suppliers."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![delete product](images/deleteWarehouseProduct.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**:information_source: Note:** The prefix `pd/` will be ignored when `ct/` given is `s` or `w`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Editing a supplier or warehouse : `edit`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Edits a supplier or warehouse at specified index."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "For suppliers, only its name, phone, email and remarks can be edited."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "For warehouses, only its name, phone, address and remark can be edited."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Note that no two suppliers or warehouses can share the same name in CLI-nic."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Format: `edit ct/TYPE i/INDEX [n/NAME] [p/PHONE] [r/REMARK] [addr/ADDRESS] [e/EMAIL]`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Note that `EMAIL` can only be used for suppliers while `ADDRESS` can only be used for warehouses."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* At least one of the optional parameters have to be specified in the input."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* Edited supplier or warehouse must be different from one started with."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `edit ct/s i/1 n/Alice p/85236417 r/Largest supplier e/alicekoh@example.com` : Edits the name, phone, remark and email"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  of the first supplier in the list of suppliers to be `Alice`, `85236417`, `Largest supplier` and"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  `alicekoh@example.com`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `edit ct/w i/2 n/Bob p/67851234 r/Largest warehouse addr/Jurong Street 11` : Edits the name, phone, remark and"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  address of the second warehouse in the list of warehouses to be `Bob`, `67851234`, `Largest warehouse`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  and `Jurong Street 11`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![edit](images/editSupplier.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![edit](images/editWarehouse.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Finding relevant supplier(s) or warehouse(s): `find`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Finds all supplier(s) or warehouse(s) whose name, remark and/or products sold/stored matches the provided keywords."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format: `find ct/TYPE [n/NAME…​] [pd/PRODUCT_NAME…​] [r/REMARK…​]`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `NAME`, `PRODUCT_NAME` and `REMARK` are case-insensitive."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Note that only full words will be matched. `needle` will match `needle` but not `needles`. "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* Any combination of the `NAME`, `PRODUCT_NAME` and `REMARK` parameters can be provided but at least one of the"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  parameters with its corresponding prefix must be specified."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `find ct/s pd/masks` : Displays all the suppliers that sell `masks`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `find ct/w pd/panadol r/biggest` : Displays the warehouse(s) that stores products with names matching"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  `panadol` or with remark matching `biggest`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![find](images/findWarehouse.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Listing all suppliers and warehouses entries : `list`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Lists all suppliers and warehouses\u0027 entries in CLI-nic."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![list](images/listCommand.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Removing macro: `removemacro`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Removes the macro with the specified alias."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format:\t`removemacro ALIAS`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `ALIAS` specified must exist to be deleted."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `removemacro uwm` : Removes the macro with the alias `uwm`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![remove macro](images/removeMacro.png)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "CLI-nic data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Updating the quantity and/or tags of a product for a supplier or warehouse: `update`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Updates the quantity and/or tags of the product with the specified name in the specified supplier or warehouse."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "If the product does not exist for that supplier or warehouse, a new product will be created for that supplier"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "or warehouse. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format:\t`update ct/TYPE n/NAME pd/PRODUCT_NAME [q/QUANTITY] [t/TAG]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `NAME` and `PRODUCT_NAME` specified are case-insensitive."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* The supplier or warehouse should currently exist in the CLI-nic application."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `QUANTITY` should be a non-negative unsigned integer."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TAG` should be a single alphanumeric word."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* If the `PRODUCT_NAME` already exists in the supplier or warehouse, at least one optional argument has to be entered."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `update ct/w n/WarehouseA pd/Panadol q/10 t/fever` : Updates the quantity of `Panadol` in `WarehouseA` to `10`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  and gives `Panadol` a tag of `fever`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![update warehouse product](images/updateWarehouseProduct.png)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "### Viewing a specific supplier or warehouse: `view`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Shows a specific supplier or warehouse at the specified index with their relevant information e.g. products sold/stored,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "phone, remark etc."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format: `view ct/TYPE i/INDEX`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `TYPE` specified should be either `s` for supplier or `w` for warehouse."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `INDEX` must be a positive integer, not exceeding the total length of the supplier/warehouse list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `view ct/s i/1` : Displays all the information associated with the supplier at index 1 in the supplier list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `view ct/w i/2` : Displays all the information associated with the warehouse at index 2 in the warehouse list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![view](images/viewSupplier.png)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "![view](images/viewWarehouse.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "## To be implemented in future iterations"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "### Creating a purchase order : `create`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Creates a purchase order to track the purchase of products from a supplier to a warehouse."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Format: `create s/SUPPLIER_NAME w/WAREHOUSE_NAME pd/PRODUCT_NAME…​ q/QUANTITY…​ date/EXPECTED_DELIVERY_DATE`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `SUPPLIER_NAME`, `WAREHOUSE_NAME` and `PRODUCT_NAME` must be identifiable."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* The number of arguments specified for `QUANTITY` and `PRODUCT_NAME` must match."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `EXPECTED_DELIVERY_DATE` must be after current time and of the form YYYY-MM-DD."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* `create s/SupplierA w/WarehouseA pd/Panadol1 Panadol2 q/100 200 date/2020-12-12` : Creates a purchase order for the"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "delivery of `100` `Panadol1` and `200` `Panadol2` from `SupplierA` to `WarehouseA` by `December 12, 2020`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Q**: How do I transfer my data to another computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "the data of your previous CLI-nic home folder."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "-------|--------|--------"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Add** Supplier | `add ct/s n/NAME p/PHONE e/EMAIL [r/REMARK]` | `add ct/s n/Philips Pharmaceutical p/00000000 e/philipsPharm@gmail.com r/Largest contractor`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Add** Warehouse | `add ct/w n/NAME p/PHONE addr/ADDRESS [r/REMARK]` | `add ct/w n/warehouseA p/00000000 addr/John street, block 123, #01-01 r/First warehouse`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Assign Macro** | `assignmacro a/ALIAS cs/COMMAND_STRING` | `assignmacro a/uwm cs/update ct/w n/main warehouse`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Delete** | `delete ct/TYPE i/INDEX` | `delete ct/w i/1`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Delete** Product| `delete ct/TYPE i/INDEX pd/PRODUCT_NAME` | `delete ct/pw i/1 pd/Panadol`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Edit** | `edit ct/TYPE i/INDEX [n/NAME] [p/PHONE] [r/REMARK] [addr/ADDRESS] [e/EMAIL]` | `edit ct/w i/1 n/Alice Warehouse p/98765432 r/Second largest warehouse addr/21 Lower Kent Ridge Rd`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Find** | `find ct/TYPE [n/NAME…​] [pd/PRODUCT_NAME…​] [r/REMARK…​]` | `find ct/w pd/panadol face mask needle`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Help** | `help [COMMAND]` | `help add`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Remove Macro** | `removemacro ALIAS` | `removemacro uwm`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**Update** | `update ct/TYPE n/NAME pd/PRODUCT_NAME [q/QUANTITY] [t/TAG…​]` | `update ct/w n/WarehouseA pd/Panadol q/10 t/fever`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "**View** | `view ct/TYPE i/INDEX` | `view ct/s i/1`"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 27,
      "qlchan24": 3,
      "tohyuting": 10,
      "zhengweii": 201,
      "-": 129,
      "jeffreytjs": 15
    }
  },
  {
    "path": "docs/_sass/minima/initialize.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@charset \"utf-8\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// Define defaults for each variable."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Segoe UI Symbol\", \"Segoe UI Emoji\", \"Apple Color Emoji\", Roboto, Helvetica, Arial, sans-serif !default;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "$code-font-family: \"Menlo\", \"Inconsolata\", \"Consolas\", \"Roboto Mono\", \"Ubuntu Mono\", \"Liberation Mono\", \"Courier New\", monospace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-size:   16px !default;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-weight: 400 !default;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "$small-font-size:  $base-font-size * 0.875 !default;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "$base-line-height: 1.5 !default;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "$spacing-unit:     30px !default;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "$table-text-align: left !default;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// Width of the content area"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "$content-width:    1000px !default;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "$on-palm:          600px !default;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "$on-laptop:        800px !default;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "$on-medium:        $on-palm !default;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "$on-large:         $on-laptop !default;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "// Use media queries like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "// @include media-query($on-palm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "//   .wrapper {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "//     padding-right: $spacing-unit / 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "//     padding-left: $spacing-unit / 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "//   }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "// }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "// Notice the following mixin uses max-width, in a deprecated, desktop-first"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "// approach, whereas media queries used elsewhere now use min-width."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@mixin media-query($device) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (max-width: $device) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@mixin relative-font-size($ratio) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: #{$ratio}rem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "// Import pre-styling-overrides hook and style-partials."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "@import"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-variables\", // Hook to override predefined variables."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-mixins\",    // Hook to add custom mixins."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/base\",             // Defines element resets."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/layout\",           // Defines structure and style based on CSS selectors."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-styles\"     // Hook to override existing styles."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ";"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 1,
      "-": 50
    }
  },
  {
    "path": "docs/diagrams/AddCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ":User enters Add Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "If () then ([Command contains invalid prefixes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " or missing compulsory prefixes])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    :Throws ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    else ([Command is valid])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    If () then ([Supplier/Warehouse is a duplicate])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    :Throws CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    else ([Supplier/Warehouse is unique])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        :Adds new Supplier/Warehouse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        :Returns Message to user indicating Success;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        :LogicManager prints result to user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 22
    }
  },
  {
    "path": "docs/diagrams/AddCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "abstract class \"{abstract}\\nCommand\" {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + {abstract} execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "interface Model \u003c\u003cinterface\u003e\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + addSupplier(Supplier supplier) : void"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hasSupplier(Supplier supplier) : boolean"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + addWarehouse(Warehouse warehouse) : void"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hasWarehouse(Warehouse warehouse) : boolean"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "class Supplier {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - name : Name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - phone : Phone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - email : Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - remark : Remark"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - products : Set\u003cProduct\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + getProductByName(targetName : Name) : Product"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hasProductWithName(targetName : Name) : boolean"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + equals(other : Object) : boolean"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hashCode() : int"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + toString() : String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + isSameSupplier(otherSupplier : Supplier) : boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "class Warehouse {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - name : Name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - phone : Phone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - address : Address"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - remark : Remark"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - products : Set\u003cProduct\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + getProductByName(targetName : Name) : Product"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hasProductWithName(targetName : Name) : boolean"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + equals(other : Object) : boolean"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + hashCode() : int"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + toString() : String"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + isSameWarehouse(otherWarehouse : Warehouse) : boolean"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "class AddCommand implements Model {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    - supplierToAdd : Supplier"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    + equals(other : Object) : boolean"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --up|\u003e \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e Supplier"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e Warehouse"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 63
    }
  },
  {
    "path": "docs/diagrams/AddCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/\u0027 Sequence Diagram for add supplier\u0027/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam defaultFontSize 17"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam ArrowFontSize 17"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam ArrowThickness 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "skinparam ParticipantPadding 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \"addCommand:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[-\u003e LogicManager : execute(\"add ct/s \\n n/John Doe \\n p/9876\"...\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser -\u003e AddCommandParser ++ : parse()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e ArgumentTokenizer ++ : tokenize(args, PREFIX_TYPE...)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ArgumentTokenizer --\u003e AddCommandParser -- : argMultimap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e AddCommandParser ++ : arePrefixesPresent(argMultimap, PREFIX_TYPE..)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser --\u003e AddCommandParser -- :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e ArgumentMultimap ++ : getValue(PREFIX_TYPE), getValue(PREFIX_NAME), ...."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ArgumentMultimap --\u003e AddCommandParser -- : argType, argName ...."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e ParserUtil ++ : parseType(argType), parseName(argName), ...."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ParserUtil --\u003e AddCommandParser --"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e AddCommand ++ : Supplier"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e AddCommandParser -- : addCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser --\u003e ClinicParser -- : addCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -[hidden]-\u003e ClinicParser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser --\u003e LogicManager -- : addCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager -\u003e AddCommand ++ : execute(model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e Model ++ : hasSupplier(supplierToAdd)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Model --\u003e AddCommand -- :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e Model : addSupplier(supplierToAdd)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e CommandResult ++ : message"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "CommandResult --\u003e AddCommand -- : commandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e LogicManager -- : commandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ref over LogicManager,  Model : Execution of the Add Command Sequence Diagram"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 101
    }
  },
  {
    "path": "docs/diagrams/AddCommandSequenceDiagramSimplified.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[-\u003e LogicManager : execute(\"add ct/s \\n n/John Doe p/98766789\"...\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"add ct/s \\n n/John Doe p/98766789\"...\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser -\u003e AddCommandParser : parse(\"ct/s n/John Doe \\n p/98766789\"...\"\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e AddCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommandParser -[hidden]-\u003e ClinicParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser --\u003e LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate ClinicParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager -\u003e AddCommand : execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e Model ++ : hasSupplier(supplierToAdd)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Model --\u003e AddCommand -- :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e Model : addSupplier(supplierToAdd)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand -\u003e CommandResult ++ : message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "CommandResult --\u003e AddCommand -- : commandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "AddCommand --\u003e LogicManager -- : commandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ref over LogicManager,  Model : Execution of the Add Command Sequence Diagram"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 69
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete ct/s i/12\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete ct/s i/12\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteSupplier(12)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveClinic(clinic)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jeffreytjs": 4
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Clinic *-right-\u003e \"1\" UniqueSupplierList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Clinic *-left-\u003e \"1\" UniqueWarehouseList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "UniqueSupplierList o-right-\u003e Supplier"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "UniqueWarehouseList o-left-\u003e Warehouse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Supplier -right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Phone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Email"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Supplier *--\u003e Remarks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Supplier *--\u003e Product"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Warehouse *--\u003e Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Warehouse *--\u003e Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Warehouse *--\u003e Address"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Warehouse *--\u003e Remarks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Warehouse *--\u003e Product"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 4,
      "-": 10,
      "jeffreytjs": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ":User enters delete commands with relevant prefixes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ":Parse command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "if () then ([required prefixes present \u0026 all values valid])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    :Generate new DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    :Execute DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    if () then ([index is out of bound])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        :Generate Command Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        :Retrieve supplier/warehouse"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        by specified index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if () then ([is supplier/warehouse deletion])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if () then([supplier])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            :Remove target supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            else ([warehouse])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            :Remove target warehouse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        else ([is product deletion])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if () then ([no matching product])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                :Generate Command Exception;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                : Retrieve matching product"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                from the set;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                :Remove the target product;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    :Generate Parse Exception;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ":Display result message to user;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 39
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "abstract class \"{abstract}\\nCommand\" {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + {abstract} execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class Model \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getFilteredWarehouseList() : ObservableList\u003cWarehouse\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getFilteredSupplierList() : ObservableList\u003cSupplier\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + setWarehouse(target : Warehouse, editedWarehouse : Warehouse) : void"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + setSupplier(target : Supplier, editedSupplier : Supplier) : void"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + deleteWarehouse(target : Warehouse) : void"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + deleteSupplier(target : Supplier) : void"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + updateFilteredWarehouseList(predicate : Predicate\u003cWarehouse\u003e) : void"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + updateFilteredSupplierList(predicate : Predicate\u003cSupplier\u003e) : void"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Model ..\u003e Warehouse"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Model ..\u003e Supplier"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class Warehouse {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getProducts() : Set\u003cProduct\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getProductByName(targetName : Name) : Product"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class Supplier {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getProducts() : Set\u003cProduct\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + getProductByName(targetName : Name) : Product"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "enum Type \u003c\u003cenumeration\u003e\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    SUPPLIER"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    WAREHOUSE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    SUPPLIER_PRODUCT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    WAREHOUSE_PRODUCT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class DeleteCommand {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - targetType : Type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - targetIndex : Index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - targetProductName : Optional\u003cName\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - executeWarehouseRelatedDeletion(model : Model) : CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - executeSupplierRelatedDeletion(model : Model) : CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class DeleteCommandParser implements Parser {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    - arePrefixesPresent(ArgumentMultimap, Prefix...) : boolean {abstract}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    + parse(args : String) : DeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "interface Parser\u003cT\u003e \u003c\u003cinterface\u003e\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    parse(userInput : String) : ClearCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser --\u003e Type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand \u003c..left DeleteCommandParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand ..\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --up|\u003e \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 69
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[-\u003e LogicManager : execute(\"delete ct/s i/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"delete ct/s i/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser : parse(\"ct/s i/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ClinicParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser --\u003e LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate ClinicParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e DeleteCommand : executeSupplierRelatedDeletion(model)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Model : getFilteredSupplierList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Model --\u003e DeleteCommand : lastShownList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Model : deleteSupplier(supplierToDelete)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e DeleteCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 74
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandSequenceDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "participant \":Supplier\" as Supplier MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[-\u003e LogicManager : execute(\"delete ct/ps i/1 pd/Panadol\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"delete ct/ps i/1 pd/Panadol\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser : parse(\"ct/ps i/1 pd/Panadol\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ClinicParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "ClinicParser --\u003e LogicManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate ClinicParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute(model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e DeleteCommand : executeSupplierRelatedDeletion(model)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Model : getFilteredSupplierList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Model --\u003e DeleteCommand : lastShownList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Supplier : get(1)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Supplier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Supplier -\u003e DeleteCommand : supplierToUpdate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Supplier"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Supplier : removeProduct"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Supplier"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Supplier -\u003e DeleteCommand : updatedSupplier"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Supplier"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Model : setSupplier"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e Model : updateFilteredSupplierList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e DeleteCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "DeleteCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 87
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "[-\u003e LogicManager : execute(\"delete ct/s i/12\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"delete ct/s i/12\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser -\u003e DeleteCommandParser : parse(\"ct/s i/12\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "DeleteCommandParser --\u003e ClinicParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ClinicParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deactivate ClinicParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "DeleteCommand -\u003e Model : deleteSupplier(12)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "jeffreytjs": 12
    }
  },
  {
    "path": "docs/diagrams/EditCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":User enters edit commands with relevant prefixes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Parse user input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "if () then ([index and command type prefixes present])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Parse command arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    if () then([at least one of the prefixes is valid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if () then([supplier])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Generate new"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        else ([warehouse])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Generate new"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Generate new Edit Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Execute Edit Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if () then([Editing Supplier])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Obtain Supplier to edit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        from Supplier List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Edits Supplier in Supplier List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        else ([Editing Warehouse])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Obtain Warehouse to edit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        from Warehouse List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Edits Warehouse in Warehouse List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Generate edit success message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    else ([invalid prefixes/arguments])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate message indicating"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    wrong prefixes or arguments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else ([index and command type prefix(es) missing])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate message indicating"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    either one or both prefixes missing;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "endif"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Display result message to user;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "stop"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 43
    }
  },
  {
    "path": "docs/diagrams/EditCommandDescriptorGeneralDetailsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd Parsing General Details"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditSupplierDescriptor\" as EditSupplierDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditWarehouseDescriptor\" as EditWarehouseDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "opt Name prefix present"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_NAME)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseName(Name)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser : parsedName"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditSupplierDescriptor : setName(parsedName)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditSupplierDescriptor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditSupplierDescriptor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditWarehouseDescriptor : setName(parsedName)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "opt Phone prefix present"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_PHONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : Phone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parsePhone(Phone)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser : parsedPhone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditSupplierDescriptor : setPhone(parsedPhone)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditSupplierDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditSupplierDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditWarehouseDescriptor : setPhone(parsedPhone)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "opt Remark prefix present"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_REMARK)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : Remark"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseRemark(Remark)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser : parsedRemark"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditSupplierDescriptor : setRemark(parsedRemark)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditSupplierDescriptor"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditSupplierDescriptor"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditWarehouseDescriptor : setRemark(parsedRemark)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c-- EditCommandParser : editDescriptor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 86
    }
  },
  {
    "path": "docs/diagrams/EditCommandDescriptorSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd Creation of appropriate EditDesciptor for EditCommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditSupplierDescriptor\" as EditSupplierDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditWarehouseDescriptor\" as EditWarehouseDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseSupplierForEditing(editSupplierDescriptor, argMultimap)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseGeneralDetails(editSupplierDescriptor, argMultimap)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over EditCommandParser, ParserUtil"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Parsing General Details"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over EditCommandParser, ParserUtil"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Parsing Supplier specific details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create EditSupplierDescriptor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditSupplierDescriptor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditSupplierDescriptor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditSupplierDescriptor --\u003e EditCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditSupplierDescriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseWarehouseForEditing(editWarehouseDescriptor, argMultimap)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseGeneralDetails(editWarehouseDescriptor, argMultimap)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over EditCommandParser, ParserUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Parsing General Details"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over EditCommandParser, ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Parsing Warehouse specific details"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create EditWarehouseDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e EditWarehouseDescriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditWarehouseDescriptor --\u003e EditCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 61
    }
  },
  {
    "path": "docs/diagrams/EditCommandDescriptorSupplierDetailsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd Parsing Supplier specific details"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditSupplierDescriptor\" as EditSupplierDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "opt Email prefix present"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_EMAIL)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : Email"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseEmail(Email)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser : parsedEmail"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditSupplierDescriptor : setEmail(parsedEmail)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditSupplierDescriptor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditSupplierDescriptor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c-- EditCommandParser : editDescriptor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 33
    }
  },
  {
    "path": "docs/diagrams/EditCommandDescriptorWarehouseDetailsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd Parsing Warehouse specific details"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditWarehouseDescriptor\" as EditWarehouseDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "opt Address prefix present"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : Address"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseAddress(Address)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser : parsedAddress"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditWarehouseDescriptor : setAddress(parsedAddress)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditWarehouseDescriptor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c-- EditCommandParser : editDescriptor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 33
    }
  },
  {
    "path": "docs/diagrams/EditCommandExecutionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd Execution of EditCommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"e:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"supplierList:List\" as SupplierList LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"warehouseList:List\" as WarehouseList LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e EditCommand : execute(model)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : getFilteredSupplierList()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Model --\u003e EditCommand  : supplierList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : getFilteredWarehouseList()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Model --\u003e EditCommand  : warehouseList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e SupplierList : get(index)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate SupplierList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "SupplierList --\u003e EditCommand : supplierToEdit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate SupplierList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e EditCommand : createEditedSupplier(supplierToEdit, editDescriptor)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e EditCommand : editedSupplier"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : setSupplier()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : updateFilteredSupplierList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "CommandResult --\u003e EditCommand : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e WarehouseList : get(index)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate WarehouseList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "WarehouseList -\u003e EditCommand : warehouseToEdit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate WarehouseList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e EditCommand : createEditedWarehouse(warehouseToEdit, editDescriptor)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e EditCommand : editedWarehouse"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : setWarehouse()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e Model : updateFilteredWarehouseList()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "CommandResult --\u003e EditCommand : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 84
    }
  },
  {
    "path": "docs/diagrams/EditCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditSupplierDescriptor\" as EditSupplierDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"editDescriptor:EditWarehouseDescriptor\" as EditWarehouseDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"e:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[-\u003e LogicManager : execute(\"edit ct/s i/1 n/Claire\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"edit ct/s i/1 n/Claire\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser -\u003e EditCommandParser : parse(\"ct/s i/1 n/Claire\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ArgumentTokenizer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer --\u003e EditCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX_TYPE, PREFIX_INDEX, PREFIX_NAME,PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer --\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer --\u003e EditCommandParser : argMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_TYPE), getValue(PREFIX_INDEX)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e EditCommandParser : type, index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ParserUtil"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseType(type), parseIndex(index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e EditCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over EditCommandParser, EditSupplierDescriptor, EditWarehouseDescriptor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Creation of appropriate EditDesciptor for EditCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser -\u003e EditCommand : EditCommand(index, descriptor)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e EditCommandParser : e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommandParser --\u003e ClinicParser : e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e EditCommand : execute()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over LogicManager, Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Execution of EditCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 91
    }
  },
  {
    "path": "docs/diagrams/HelpCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":User enters view commands with relevant prefixes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Parse user input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "if () then ([no command specified])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Create new Help Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Execute Help Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate generic help message of all commands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else ([command specified])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    if () then ([valid command])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Create new Help command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Execute Help Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate help message of specified command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    else ([wrong input])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate error message specifying"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    wrong command specified or too"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    many arguments given;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Display result message to user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 28
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class ClinicParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "LogicManager --\u003e\"1\" ClinicParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ClinicParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nDeleteCommand, FindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "jeffreytjs": 4
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Interface ReadOnlyClinic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class Clinic"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class ReadOnlyClinic"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Package Supplier {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Class Supplier"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class Product"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Class UniqueSupplierList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Clinic .up.|\u003e ReadOnlyClinic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "ModelManager o--\u003e \"1\" Clinic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Clinic *-down-\u003e \"1\" UniqueSupplierList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "UniqueSupplierList o--\u003e \"*\" Supplier"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Phone"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e Email"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Supplier *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Supplier *--\u003e Remark"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Supplier *--\u003e Product"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "ModelManager --\u003e\"1\" Supplier : filtered list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 9,
      "-": 34,
      "jeffreytjs": 11
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Interface ClinicStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class JsonClinicStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "StorageManager o--\u003e ClinicStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "JsonClinicStorage .left.|\u003e ClinicStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "JsonClinicStorage .down.\u003e JsonSerializableClinicStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "JsonSerializableClinicStorage .right.\u003e JsonSerializableClinic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "JsonSerializableClinic .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "jeffreytjs": 7
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Class SupplierListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Class SupplierCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class WarehouseListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "Class WarehouseCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "MainWindow *-down-\u003e SupplierListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "MainWindow *-down-\u003e WarehouseListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "SupplierListPanel -down-\u003e SupplierCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "WarehouseListPanel -down-\u003e WarehouseCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "SupplierListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "SupplierCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "WarehouseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "WarehouseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "SupplierCard .right.\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "WarehouseCard .right.\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "SupplierListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 7,
      "-": 52,
      "jeffreytjs": 8
    }
  },
  {
    "path": "docs/diagrams/ViewCommandActivity.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":User enters view commands with relevant prefixes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Parse user input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "if () then ([index and command type prefixes present])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Parse command arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    if () then ([command type and index valid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Creates new View Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Execute View Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if () then ([SUPPLIER])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            :Get supplier at Index from model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            :Update Supplier List to show supplier only;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        else ([WAREHOUSE])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            :Get warehouse at Index from model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            :Update Warehouse List to show warehouse only;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        :Generate View command success message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    else ([command type and/or index invalid])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        : Generate message indicating either"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         one or both prefixes are wrong;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else ([index and command type prefix(es) missing])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    :Generate message indicating"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    either one or both prefixes missing;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ":Display result message to user;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 34
    }
  },
  {
    "path": "docs/diagrams/ViewCommandExecutionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "mainframe sd executing ViewCommand"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"supplierList:List\" as SupplierList LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"warehouseList:List\" as WarehouseList LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"supplierPredicate:NameContainsKeywordsPredicateForSupplier\" as SupplierPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"warehousePredicate:NameContainsKeywordsPredicateForWarehouse\" as WarehousePredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e ViewCommand : execute(model)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e Model : getFilteredSupplierList()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Model --\u003e ViewCommand : supplierList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e Model : getFilteredWarehouseList()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Model --\u003e ViewCommand : warehouseList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "alt SUPPLIER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e SupplierList : get(index)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate SupplierList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "SupplierList --\u003e ViewCommand : supplierToView"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate SupplierList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create SupplierPredicate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e SupplierPredicate : supplierToView.getName().toString()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate SupplierPredicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "SupplierPredicate --\u003e ViewCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate SupplierPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e Model : updateFilteredSupplierList(supplierPredicate)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e CommandResult : supplierPredicate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "CommandResult --\u003e ViewCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "else WAREHOUSE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e WarehouseList : get(index)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate WarehouseList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "WarehouseList --\u003e ViewCommand : warehouseToView"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate WarehouseList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create WarehousePredicate"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e WarehousePredicate : warehouseToView.getName().toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate WarehousePredicate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "WarehousePredicate --\u003e ViewCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate WarehousePredicate"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e Model : updateFilteredWarehouseList(warehousePredicate)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand -\u003e CommandResult : warehousePredicate"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "CommandResult --\u003e ViewCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 82
    }
  },
  {
    "path": "docs/diagrams/ViewCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ClinicParser\" as ClinicParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ViewCommandParser\" as ViewCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[-\u003e LogicManager : execute(\"view ct/s i/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e ClinicParser : parseCommand(\"view ct/s i/1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ClinicParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ViewCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser -\u003e ViewCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser --\u003e ClinicParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser -\u003e ViewCommandParser : parse(\"ct/s i/1)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ArgumentTokenizer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser -\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer --\u003e ViewCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX_TYPE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer -\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentTokenizer --\u003e ViewCommandParser : argMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser -\u003e ArgumentMultimap : getValue(PREFIX_TYPE), getValue(PREFIX_INDEX)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ArgumentMultimap --\u003e ViewCommandParser : type, index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser -\u003e ParserUtil : parseType(type), parseIndex(index)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ParserUtil --\u003e ViewCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "create ViewCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser -\u003e ViewCommand : ViewCommand(type, index)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand --\u003e ViewCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommandParser --\u003e ClinicParser : v"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "destroy ViewCommandParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ClinicParser --\u003e LogicManager : v"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ClinicParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "LogicManager -\u003e ViewCommand : execute(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ref over ViewCommand, CommandResult, Model, LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    executing ViewCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "ViewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 84
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "ecp -\u003e ec ++: index, editSupplierDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "title: CLI-nic"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-W14-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-W14-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CLI-nic is **an application to help medical supply managers keep track of medical products and storage.** It is optimized"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "for these managers to **update product supply conditions and access critical product information quickly** via fast typing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "and efficient Graphical User Interface interaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* If you are interested in using CLI-nic, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* If you are interested about developing CLI-nic, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/jeffrey.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "title: Jeffrey Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "## Project: CLI-nic"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "CLI-nic is **a desktop application to help medical product sales managers keep track of medical products and storage**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "It is optimized for these managers to **update product conditions and access critical product information quickly via fast typing**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * nil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * nil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    * Added documentation for the `add` feature."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    * Added implementation details of the `add` feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): nil"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * Contributed to forum discussions (examples: nil)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: nil)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates (nil)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  * nil"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 33
    }
  },
  {
    "path": "docs/team/qinliang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "title: Chan Qin Liang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "## Project: CLI-nic"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "CLI-nic is **a desktop application to help medical product sales managers keep track of medical products and storage**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "It is optimized for these managers to **update product conditions and access critical product information quickly via fast typing**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **New Feature**: Added the ability to create new purchase order"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  * What it does: Allows the user to create a purchase order to track the purchase of medical products from a supplier to a store."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  * Justification: This is a key functionality of CLI-nic to as keeping track of orders is a key aspect of inventory management."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  * Highlights: This command will allow for future features with regard to inventory management and sales metrics"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 34
    }
  },
  {
    "path": "docs/team/wangZhenlin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "title: Wang Zhenlin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "## Project: CLI-nic"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "CLI-nic is **a desktop application to help medical product sales managers keep track of medical products and storage**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "It is optimized for these managers to **update product conditions and access critical product information quickly via fast typing**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **New class**: Implement the warehouse class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * What it represents: the warehouses the user manages. Each warehouse can store medical products of various quantity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Justification: This is one of the main classes that user needs to store information about and make contact with in real life."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Credits: {The implementation is similar to the Person class in AddressBook-3, with Tag class getting replaced by a more complicated Product class}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **New feature**: Added the ability to delete a supplier/warehouse."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * What it does: Removes unwanted entries in the supplier list or warehouse list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Justification: This feature allows a user to get rid of suppliers or warehouse it no longer in contact with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Highlights: When a supplier/warehouse gets deleted, all the product information relate to it will be removed as well."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **New feature**: Added the ability to add a product to a supplier."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * What it does: Adding a new product with tags to an existing supplier."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Highlights: This allows multiple tagging of a product for a supplier and different tags of same product for different supplier."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Credits: {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Updated the GUI (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from __% to __% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Site-wide setting:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Updated _config.yml."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Index page:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Modified content to fit CLI-nic project description, added relevant links."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * README:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Modified content to fit CLI-nic project description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Added documentation for the `delete` feature."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    * Added use cases."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): nil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Contributed to forum discussions (examples: nil)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: nil)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates (nil)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  * nil"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 58
    }
  },
  {
    "path": "docs/team/yuTing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "title: Yu Ting\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "## Project: CLI-nic"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " CLI-nic is **a desktop application to help medical product sales managers keep track of medical products and storage**. It is optimized for these managers to **update product conditions and access critical product information quickly via fast typing**. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* **Enhancements to existing features**: Added the ability for users to list all suppliers/stores/products at once."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* **Enhancements to existing features**: Added the ability for users to view help for commands within the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * What it does: Allow users to have a quick look up of what they can do with CLI-nic."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* **New Feature**: Added classes, namely Suppliers, Stores, Product and Orders in the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * What it does: Stores information regarding suppliers, stores, medical products and orders that will be retrieved by users commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    * Added documentations for list and help commands in the user guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    * Added implementation details of the `list` and `help` features."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    * Added implementation details of Suppliers, Stores, Product and Orders classes."
      }
    ],
    "authorContributionMap": {
      "tohyuting": 27
    }
  },
  {
    "path": "docs/team/zhengwei.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "title: Zheng Wei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "## Project: CLI-nic"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "CLI-nic is **a desktop application to help medical product sales managers keep track of medical products and storage**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "It is optimized for these managers to **update product conditions and access critical product information quickly via fast typing**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **New Feature**: Added the ability to find relevant medical supplies and suppliers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  * What it does: allows the user to find medical supplies, suppliers and their related information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can easily search for the information that they need without having to look through every row."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 28
    }
  },
  {
    "path": "src/main/java/seedu/clinic/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.ClinicStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.JsonClinicStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.storage.JsonUserMacrosStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.storage.UserMacrosStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CLI-nic ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ClinicStorage clinicStorage \u003d new JsonClinicStorage(userPrefs.getClinicFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacrosStorage userMacrosStorage \u003d new JsonUserMacrosStorage(userPrefs.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        storage \u003d new StorageManager(clinicStorage, userPrefsStorage, userMacrosStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s clinic, user macros, and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * The data from the sample clinic will be used instead if {@code storage}\u0027s clinic is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * or an empty clinic will be used instead if errors occur when reading {@code storage}\u0027s clinic."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * An empty User Macros model will be used if {@code storage}\u0027s User Macros are not found or if errors"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * occur when reading {@code storage}\u0027s User Macros."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Optional\u003cReadOnlyClinic\u003e clinicOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ReadOnlyClinic initialClinicData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            clinicOptional \u003d storage.readClinic();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (clinicOptional.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                logger.info(\"Clinic data file not found. Will be starting with a sample Clinic\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialClinicData \u003d clinicOptional.orElseGet(SampleDataUtil::getSampleClinic);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.warning(\"Clinic data file not in the correct format. Will be starting with an empty Clinic\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialClinicData \u003d new Clinic();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.warning(\"Problem encountered while reading from the Clinic data file. Will be starting \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    + \"with an empty Clinic\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialClinicData \u003d new Clinic();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Optional\u003cReadOnlyUserMacros\u003e userMacrosOptional;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ReadOnlyUserMacros initialUserMacrosData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            userMacrosOptional \u003d storage.readUserMacros();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (userMacrosOptional.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                logger.info(\"User Macros file not found. Will be starting with an empty User Macros model\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialUserMacrosData \u003d userMacrosOptional.orElseGet(UserMacros::new);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.warning(\"User Macros file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    + \"User Macros model\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialUserMacrosData \u003d new UserMacros();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.warning(\"Problem encountered while reading from the User Macros file. Will be starting with an \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    + \"empty User Macros model\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            initialUserMacrosData \u003d new UserMacros();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new ModelManager(initialClinicData, userPrefs, initialUserMacrosData);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.warning(\"Problem  encountered while reading from the file. Will be starting with \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    + \"default user prefs\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.info(\"Starting Clinic \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CLI-nic ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 3,
      "qlchan24": 34,
      "tohyuting": 1,
      "-": 144,
      "jeffreytjs": 30
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String sb \u003d \"Current log level : \" + logLevel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + \"\\nPreference file Location : \" + userPrefsFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 3,
      "-": 58,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final String LOG_FILE \u003d \"clinic.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"The supplier index provided is larger than the displayed list size\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_SUPPLIERS_LISTED_OVERVIEW \u003d \"%1$d supplier(s) listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"The warehouse index provided is larger than the displayed list size\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_NAME_IN_SUPPLIER \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"The product: %1$s is not sold by supplier: %2$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_NAME_IN_WAREHOUSE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"The product: %1$s is not stored by warehouse: %2$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_WAREHOUSE_LISTED_OVERVIEW \u003d \"%1$d warehouse(s) listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "zhengweii": 2,
      "-": 10,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return value !\u003d 0 \u0026\u0026 isUnsignedInteger(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static boolean isUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 19,
      "tohyuting": 3,
      "-": 64,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns the Clinic."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @see seedu.clinic.model.Model#getClinic()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    ReadOnlyClinic getClinic();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of suppliers */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cSupplier\u003e getFilteredSupplierList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of warehouses */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    ObservableList\u003cWarehouse\u003e getFilteredWarehouseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns the user prefs\u0027 clinic file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Path getClinicFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the User Macros."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @see Model#getUserMacros()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ReadOnlyUserMacros getUserMacros();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /** Returns an unmodifiable view of the list of macros */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cMacro\u003e getMacroList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the user macros file path according to user prefs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Path getUserMacrosFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 20,
      "-": 36,
      "jeffreytjs": 12
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.ClinicParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.MacroParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final ClinicParser clinicParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final MacroParser macroParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinicParser \u003d new ClinicParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macroParser \u003d new MacroParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public CommandResult execute(String inputString) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        logger.info(\"----------------[USER INPUT][\" + inputString + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String commandString \u003d macroParser.parseMacro(model, inputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandString + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Command command \u003d clinicParser.parseCommand(commandString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            storage.saveClinic(model.getClinic());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            storage.saveUserMacros(model.getUserMacros());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        logger.info(\"----------------[CLI-nic data saved]\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return model.getClinic();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cWarehouse\u003e getFilteredWarehouseList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return model.getFilteredWarehouseList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return model.getClinicFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ReadOnlyUserMacros getUserMacros() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getUserMacros();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getMacroList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getUserMacrosFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "qlchan24": 35,
      "-": 57,
      "jeffreytjs": 19
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Adds a supplier/warehouse to the CLI-nic app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Adds a supplier or warehouse to CLI-nic.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Usage 1 - Adds a supplier into CLI-nic.\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_REMARK + \"REMARK\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_TYPE + \"s \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_REMARK + \"Largest contractor \\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Usage 2 - Adds a warehouse into CLI-nic\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_REMARK + \"REMARK\\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_TYPE + \"w \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_NAME + \"NUS South \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_PHONE + \"91234562 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_ADDRESS + \"21 Lower Kent Ridge Rd, Singapore 119077 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + PREFIX_REMARK + \"Mainly deal with schools \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_SUCCESS \u003d \"New supplier added: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_WAREHOUSE_SUCCESS \u003d \"New warehouse added: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"This supplier already exists in CLI-nic\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WAREHOUSE \u003d \"This warehouse already exists in CLI-nic\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_MISSING_TYPE_PREFIX \u003d \"Please enter either one of the type to add,\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" i.e. either ct/s or ct/w\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_MISSING_PREFIX \u003d \"There are missing prefixes, ensure\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" that you at least include: ct/s n/SUPPLIER_NAME, p/PHONE and e/EMAIL_ADDRESS\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_WAREHOUSE_MISSING_PREFIX \u003d \"There are missing prefixes, ensure\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" that you at least include: ct/w n/WAREHOUSE_NAME, p/PHONE and addr/ADDRESS\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Supplier supplierToAdd;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Warehouse warehouseToAdd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Supplier}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public AddCommand(Supplier supplier) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.supplierToAdd \u003d supplier;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.warehouseToAdd \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.log(Level.INFO, \"Received information to add supplier\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Warehouse}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public AddCommand(Warehouse warehouse) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        requireNonNull(warehouse);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.supplierToAdd \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.warehouseToAdd \u003d warehouse;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.log(Level.INFO, \"Received information to add warehouse\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (supplierToAdd !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (model.hasSupplier(supplierToAdd)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            model.addSupplier(supplierToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"Supplier with given information has been added and supplier list is\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    + \" updated on UI.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_SUPPLIER_SUCCESS, supplierToAdd));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assert this.warehouseToAdd !\u003d null : \"warehouseToAdd specified\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    + \" should be of Warehouse type and not null here.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (model.hasWarehouse(warehouseToAdd)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            model.addWarehouse(warehouseToAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"Warehouse with given information has been added and warehouse list is\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    + \" updated on UI.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_WAREHOUSE_SUCCESS, warehouseToAdd));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u0026\u0026 (supplierToAdd !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                ? supplierToAdd.equals(((AddCommand) other).supplierToAdd)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                : warehouseToAdd.equals(((AddCommand) other).warehouseToAdd)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 4,
      "tohyuting": 1,
      "zhengweii": 12,
      "-": 34,
      "jeffreytjs": 78
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/AddProductCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_SUPPLIER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Adds a product to a supplier in the CLI-nic app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class AddProductCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a product to a supplier \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_SUPPLIER_NAME + \"SUPPLIER_NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \"PRODUCT_NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" \" + PREFIX_SUPPLIER_NAME + \"Alice Pauline Ltd \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \"Panadol \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_TAG + \"primary largest \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New %2$s product added to supplier %1$s \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This supplier already sells this product!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_NOT_FOUND \u003d \"This supplier does not exists!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Name targetSupplierName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Product productToAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates an AddProductCommand to add the {@code Product} to the specified {@code Supplier}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public AddProductCommand(Name inputName, Product product) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(inputName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        targetSupplierName \u003d inputName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        productToAdd \u003d product;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier targetSupplier;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            targetSupplier \u003d getSupplierByName(targetSupplierName, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(MESSAGE_SUPPLIER_NOT_FOUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Set\u003cProduct\u003e updatedProductSet \u003d new HashSet\u003c\u003e(targetSupplier.getProducts());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (updatedProductSet.contains(productToAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        updatedProductSet.add(productToAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier updatedSupplier \u003d new Supplier(targetSupplier.getName(), targetSupplier.getPhone(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                targetSupplier.getEmail(), targetSupplier.getRemark(), updatedProductSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        model.setSupplier(targetSupplier, updatedSupplier);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedSupplier.getName(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                productToAdd.getProductName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Supplier getSupplierByName(Name supplierName, Model model) throws NoSuchElementException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return model.getClinic().getSupplierList().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .filter(supplier -\u003e supplier.getName().equals(supplierName)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || (other instanceof AddProductCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 targetSupplierName.equals(((AddProductCommand) other).targetSupplierName)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 productToAdd.equals(((AddProductCommand) other).productToAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Objects.hash(targetSupplierName, productToAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 96,
      "tohyuting": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/AssignMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_COMMAND_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Assigns a toAssign to a command string in the CLI-nic app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class AssignMacroCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignmacro\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Assigns a macro to a command string. ALIAS should only consist \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"of alphanumeric characters and/or underscores. ALIAS cannot be an existing command word and cannot \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"be used in an existing macro. COMMAND_STRING can consist of any number of prefixes, but the first \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"word has to be a pre-defined command word.\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_ALIAS + \"ALIAS \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_COMMAND_STRING + \"COMMAND_STRING\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_ALIAS + \"uwa \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_COMMAND_STRING + \"update ct/w n/Alex Yeoh warehouse\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Macro assigned: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MACRO \u003d \"This macro already exists in the CLI-nic app.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Macro toAssign;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates an AssignMacroCommand to assign the specified {@code Macro}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public AssignMacroCommand(Macro macro) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(macro);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.toAssign \u003d macro;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (model.hasMacro(toAssign)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MACRO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.addMacro(toAssign);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAssign));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof AssignMacroCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 toAssign.equals(((AssignMacroCommand) other).toAssign));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(toAssign);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 66,
      "zhengweii": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Clears the clinic."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Clears all suppliers and warehouses\u0027 entries in\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" CLI-nic.\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Clinic has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        model.setClinic(new Clinic());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 4,
      "-": 17,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_WAREHOUSES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Deletes a supplier identified using it\u0027s displayed index from the CLI-nic app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            \"Usage 1 - Deletes the supplier or warehouse identified by the index number used in the displayed lists.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" INDEX must be a positive integer, not exceeding the total length of the displayed list.\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_INDEX + \"INDEX\\n\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_TYPE + \"s \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_INDEX + \"1\\n\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Usage 2 - Deletes a product associated with a specific supplier or warehouse identified by the index\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" number used in the displayed lists.\\n\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \" PRODUCT_NAME\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_TYPE + \"ps \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + PREFIX_INDEX + \"2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \"panadol\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_DELETE_SUPPLIER_SUCCESS \u003d \"Deleted Supplier: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DELETE_WAREHOUSE_SUCCESS \u003d \"Deleted Warehouse: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DELETE_PRODUCT_IN_WAREHOUSE_SUCCESS \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"Deleted Product: %1$s from Warehouse: %2$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DELETE_PRODUCT_IN_SUPPLIER_SUCCESS \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"Deleted Product: %1$s from Supplier: %2$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Type targetType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Optional\u003cName\u003e targetProductName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates an DeleteCommand to delete the warehouse/supplier at {@code targetIndex} of the displayed list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DeleteCommand(Type targetType, Index targetIndex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.targetType \u003d targetType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.targetProductName \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates an DeleteCommand to delete the specified {@code targetProductName} in the warehouse/supplier"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * at {@code targetIndex} of the displayed list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DeleteCommand(Type targetType, Index targetIndex, Name targetProductName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.targetType \u003d targetType;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.targetProductName \u003d Optional.of(targetProductName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (targetType.equals(SUPPLIER) || targetType.equals(SUPPLIER_PRODUCT)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return executeSupplierRelatedDeletion(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return executeWarehouseRelatedDeletion(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private CommandResult executeWarehouseRelatedDeletion(Model model) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cWarehouse\u003e lastShownList \u003d model.getFilteredWarehouseList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (targetType.equals(WAREHOUSE)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Warehouse warehouseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.deleteWarehouse(warehouseToDelete);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_WAREHOUSE_SUCCESS, warehouseToDelete));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse warehouseToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Product matchedProduct \u003d warehouseToUpdate.getProductByName(targetProductName.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Warehouse updatedWarehouse \u003d warehouseToUpdate.removeProduct(matchedProduct);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.setWarehouse(warehouseToUpdate, updatedWarehouse);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PRODUCT_IN_WAREHOUSE_SUCCESS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    matchedProduct.getProductName(), updatedWarehouse.getName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (ProductNotFoundException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_PRODUCT_NAME_IN_WAREHOUSE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    targetProductName.get(), warehouseToUpdate.getName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private CommandResult executeSupplierRelatedDeletion(Model model) throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cSupplier\u003e lastShownList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (targetType.equals(SUPPLIER)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Supplier supplierToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplierToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Product matchedProduct \u003d supplierToUpdate.getProductByName(targetProductName.get());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Supplier updatedSupplier \u003d supplierToUpdate.removeProduct(matchedProduct);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.setSupplier(supplierToUpdate, updatedSupplier);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PRODUCT_IN_SUPPLIER_SUCCESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    matchedProduct.getProductName(), updatedSupplier.getName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (ProductNotFoundException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_PRODUCT_NAME_IN_SUPPLIER,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    targetProductName.get(), supplierToUpdate.getName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 targetType.equals(((DeleteCommand) other).targetType)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 targetProductName.equals(((DeleteCommand) other).targetProductName)); // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 103,
      "qlchan24": 1,
      "zhengweii": 16,
      "-": 32,
      "jeffreytjs": 7
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_WAREHOUSES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Edits the details of an existing supplier/warehouse in the CLI-nic app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Edits a supplier or warehouse at the specified index.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" For suppliers, only its name, phone, email and remarks can be edited.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" For warehouses, only its name, phone, address and remark can be edited.\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" Note that EMAIL can only be used for suppliers while ADDRESS can only be used for warehouses.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" TYPE specified should be either s for supplier or w for warehouse.\\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"ct/TYPE i/INDEX \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) \" + COMMAND_WORD + \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \" + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) \" + COMMAND_WORD + \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"5 \" + PREFIX_PHONE + \"99876544 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_ADDRESS + \"21 Lower Kent Ridge Road\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX_AND_INDEX \u003d \"Command type and index must be present!\\n%1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_EDIT_SUPPLIER_SUCCESS \u003d \"Edited Supplier: %1$s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_EDIT_WAREHOUSE_SUCCESS \u003d \"Edited Warehouse: %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n%1$s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"A supplier with the same name already\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" exists in CLInic.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WAREHOUSE \u003d \"A warehouse with the same name already\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" exists in CLInic.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_NO_ADDRESS \u003d \"Supplier do not have address!\\n%1$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_WAREHOUSE_NO_EMAIL \u003d \"Warehouse do not have email!\\n%1$s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INPUT_BOTH_SUPPLIER_WAREHOUSE_PREFIX \u003d \"Please only enter one type of\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" index, i.e. either wi/INDEX or si/INDEX\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX \u003d \"Please enter at least one type of\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" command under ct (i.e. either ct/s or ct/w)\\n%1$s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_NO_INDEX \u003d \"Please enter index of supplier/warehouse you wish\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" to edit.%1$s\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! %1$s \\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE_EDIT \u003d \"You used an invalid type! Type for Edit command \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"should be either ct/s or ct/w only.\\n%1$s\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_USAGE \u003d \"The input contains unnecessary arguments. Please \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"ensure that you only include prefixes specified in the User Guide.\\n%1$s\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_SUPPLIER_UNCHANGED \u003d \"The edited field will results in no change to \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"supplier selected. Please check your arguments again and re-enter your edit command.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_WAREHOUSE_UNCHANGED \u003d \"The edited field will results in no change to \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"warehouse selected. Please check your arguments again and re-enter your edit command.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final EditDescriptor editDescriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param index of the supplier or warehouse in the filtered supplier or warehouse list to edit"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param editDescriptor details to edit the supplier with"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditCommand(Index index, EditDescriptor editDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        requireNonNull(editDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (editDescriptor instanceof EditSupplierDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.editDescriptor \u003d new EditSupplierDescriptor((EditSupplierDescriptor) editDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Received instructions to edit supplier\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert editDescriptor instanceof EditWarehouseDescriptor : \"editDescriptor supplied should be \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    + \"of EditWarehouseDescriptor type here.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.editDescriptor \u003d new EditWarehouseDescriptor((EditWarehouseDescriptor) editDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Received instructions to edit warehouse\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cSupplier\u003e lastShownSupplierList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cWarehouse\u003e lastShownWarehouseList \u003d model.getFilteredWarehouseList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (this.editDescriptor instanceof EditSupplierDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownSupplierList.size()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Supplier supplierToEdit \u003d lastShownSupplierList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Supplier to edit is retrieved from supplier list.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Supplier editedSupplier \u003d createEditedSupplier(supplierToEdit,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    (EditSupplierDescriptor) editDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Supplier with edited information has been created.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (supplierToEdit.equals(editedSupplier)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(MESSAGE_SUPPLIER_UNCHANGED);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!supplierToEdit.isSameSupplier(editedSupplier) \u0026\u0026 model.hasSupplier(editedSupplier)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            model.setSupplier(supplierToEdit, editedSupplier);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Replaced supplier in supplier list.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Updated supplier in UI.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_SUPPLIER_SUCCESS, editedSupplier));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert this.editDescriptor instanceof EditWarehouseDescriptor : \"editDescriptor supplied\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    + \" should be of EditWarehouseDescriptor type here.\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownWarehouseList.size()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Warehouse warehouseToEdit \u003d lastShownWarehouseList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Warehouse to edit is retrieved from warehouse list.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Warehouse editedWarehouse \u003d createEditedWarehouse(warehouseToEdit,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    (EditWarehouseDescriptor) editDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Warehouse with edited information has been created.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (warehouseToEdit.equals(editedWarehouse)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(MESSAGE_WAREHOUSE_UNCHANGED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!warehouseToEdit.isSameWarehouse(editedWarehouse) \u0026\u0026 model.hasWarehouse(editedWarehouse)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            model.setWarehouse(warehouseToEdit, editedWarehouse);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Replaced warehouse in warehouse list.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            model.updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Updated warehouse in UI.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_WAREHOUSE_SUCCESS, editedWarehouse));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates and returns a {@code Supplier} with the details of {@code supplierToEdit}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * edited with {@code editSupplierDescriptor}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static Supplier createEditedSupplier(Supplier supplierToEdit,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            EditSupplierDescriptor editSupplierDescriptor) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assert supplierToEdit !\u003d null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name updatedName \u003d editSupplierDescriptor.getName().orElse(supplierToEdit.getName());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Phone updatedPhone \u003d editSupplierDescriptor.getPhone().orElse(supplierToEdit.getPhone());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Email updatedEmail \u003d editSupplierDescriptor.getEmail().orElse(supplierToEdit.getEmail());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Remark remark \u003d editSupplierDescriptor.getRemark().orElse(supplierToEdit.getRemark());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cProduct\u003e products \u003d supplierToEdit.getProducts();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Supplier(updatedName, updatedPhone, updatedEmail, remark, products);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Creates and returns a {@code Warehouse} with the details of {@code warehouseToEdit}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * edited with {@code editWarehouseDescriptor}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static Warehouse createEditedWarehouse(Warehouse warehouseToEdit,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                                                   EditWarehouseDescriptor editWarehouseDescriptor) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assert warehouseToEdit !\u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Name updatedName \u003d editWarehouseDescriptor.getName().orElse(warehouseToEdit.getName());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Phone updatedPhone \u003d editWarehouseDescriptor.getPhone().orElse(warehouseToEdit.getPhone());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Address updatedAddress \u003d editWarehouseDescriptor.getAddress().orElse(warehouseToEdit.getAddress());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Remark remark \u003d editWarehouseDescriptor.getRemark().orElse(warehouseToEdit.getRemark());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Set\u003cProduct\u003e products \u003d warehouseToEdit.getProducts();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new Warehouse(updatedName, updatedPhone, updatedAddress, remark, products);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if ((e.editDescriptor instanceof EditSupplierDescriptor)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 (editDescriptor instanceof EditWarehouseDescriptor)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else if ((e.editDescriptor instanceof EditWarehouseDescriptor)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 (editDescriptor instanceof EditSupplierDescriptor)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assert this.editDescriptor instanceof EditDescriptor \u0026\u0026 e.editDescriptor instanceof EditDescriptor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                : \"Both editDescriptors should be of editDescriptor type.\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 editDescriptor.equals(e.editDescriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Stores the details to edit the general details of a supplier/warehouse with. Each non-empty field"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * value will replace the corresponding field value of the supplier/warehouse to be edited."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static class EditDescriptor {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Set\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditDescriptor() {}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * A defensive copy of {@code products} is used internally."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditDescriptor (EditDescriptor toCopy) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            setProducts(toCopy.products);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, remark, products);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Sets {@code products} to this object\u0027s {@code products}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * A defensive copy of {@code products} is used internally."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setProducts(Set\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.products \u003d (products !\u003d null) ? new HashSet\u003c\u003e(products) : null;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code products} is null."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cSet\u003cProduct\u003e\u003e getProducts() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return (products !\u003d null) ? Optional.of(Collections.unmodifiableSet(products)) : Optional.empty();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!(other instanceof EditDescriptor)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            EditDescriptor e \u003d (EditDescriptor) other;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    \u0026\u0026 getProducts().equals(e.getProducts());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Stores the details to edit the supplier with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * corresponding field value of the supplier."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static class EditSupplierDescriptor extends EditDescriptor {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditSupplierDescriptor() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * Copy constructor to make a copy of {@code EditSupplierDescriptor}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * @param toCopy editSupplierDescriptor object to be copied from."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditSupplierDescriptor(EditSupplierDescriptor toCopy) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            boolean generalDetails \u003d super.isAnyFieldEdited();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return CollectionUtil.isAnyNonNull(email) || generalDetails;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!(other instanceof EditSupplierDescriptor)) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            EditSupplierDescriptor e \u003d (EditSupplierDescriptor) other;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u0026\u0026 getProducts().equals(e.getProducts());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Stores the details to edit the warehouse with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * corresponding field value of the warehouse."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static class EditWarehouseDescriptor extends EditDescriptor {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditWarehouseDescriptor() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * Copy constructor to make a copy of {@code EditWarehouseDescriptor}."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * @param toCopy editWarehouseDescriptor object to be copied from."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public EditWarehouseDescriptor(EditWarehouseDescriptor toCopy) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "         */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            boolean generalDetails \u003d super.isAnyFieldEdited();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return CollectionUtil.isAnyNonNull(address) || generalDetails;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (!(other instanceof EditWarehouseDescriptor)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            EditWarehouseDescriptor e \u003d (EditWarehouseDescriptor) other;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u0026\u0026 getProducts().equals(e.getProducts());"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 59,
      "qlchan24": 32,
      "tohyuting": 220,
      "zhengweii": 12,
      "-": 124,
      "jeffreytjs": 12
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Exits the application.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        + \"Example:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Clinic as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 4,
      "-": 16,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.supplier.SupplierPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.warehouse.WarehousePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Finds and lists all suppliers/warehouses in the CLI-nic app whose name, remark and/or products matches any of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Prefixes provided can be in any order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * At least one of the name, remark or product prefixes must be provided."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Keyword only matches whole word e.g. alex will match \"alex\" but not \"alexia\"."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Finds all supplier(s) or warehouse(s) whose name,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" remark and/or name of products matches any of the specified keywords (case-insensitive) and displays\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" them as a list with index numbers. Prefixes provided can be in any order. At least one of the name,\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"  remark or product prefixes along with its parameters must be provided.\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME...] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT_NAME + \"PRODUCT_NAME...] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK...]\\n\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) \" + COMMAND_WORD + \" ct/s pd/panadol\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) \" + COMMAND_WORD + \" ct/s pd/panadol face mask n/alex\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"3) \" + COMMAND_WORD + \" ct/w pd/panadol n/bernice r/biggest\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"Type must be either \u0027s\u0027 or \u0027w\u0027.\\n\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) ct/s\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) ct/w\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private final Optional\u003cSupplierPredicate\u003e supplierPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private final Optional\u003cWarehousePredicate\u003e warehousePredicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Constructs a new FindCommand object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public FindCommand(SupplierPredicate supplierPredicate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.supplierPredicate \u003d Optional.of(supplierPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.warehousePredicate \u003d Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Constructs a new FindCommand object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public FindCommand(WarehousePredicate warehousePredicate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.warehousePredicate \u003d Optional.of(warehousePredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.supplierPredicate \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (supplierPredicate.isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            model.updateFilteredSupplierList(supplierPredicate.get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    String.format(Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW, model.getFilteredSupplierList().size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        model.updateFilteredWarehouseList(warehousePredicate.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                String.format(Messages.MESSAGE_WAREHOUSE_LISTED_OVERVIEW, model.getFilteredWarehouseList().size()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 (supplierPredicate.isPresent()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        ? supplierPredicate.equals(((FindCommand) other).supplierPredicate)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        : warehousePredicate.equals(((FindCommand) other).warehousePredicate)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "zhengweii": 60,
      "-": 26,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Displays a list of available commands and their utility descriptions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * If user specifies a specific command, the detailed description, input format and sample commands for that particular"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * command will be displayed instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays a list of available commands and their\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" utility descriptions\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) \" + COMMAND_WORD + \" find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_ARGUMENTS \u003d \"Only one command can be entered at any time\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String[] ALLOWED_ARGUMENTS \u003d new String[]{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        AddCommand.COMMAND_WORD, AssignMacroCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        EditCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, FindCommand.COMMAND_WORD, ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        RemoveMacroCommand.COMMAND_WORD, UpdateCommand.COMMAND_WORD, ViewCommand.COMMAND_WORD};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_WRONG_ARGUMENT \u003d \"You can only enter command from one of the \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"following keywords:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + Arrays.stream(ALLOWED_ARGUMENTS).reduce(\"\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                if (x.equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    return y;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                return x + \", \" + y;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_FOR_COMMAND_FORMAT \u003d \"How to interpret command format?\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) Words in UPPER_CASE are parameters to be supplied by the user.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) Items in square brackets are optional.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"3) Items with ... can be used multiple times.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"4) Prefixes specified can be in any order.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final String commandArgument;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Constructs a new HelpCommand object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param commandArgument takes in the command argument (if any) specified for help command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public HelpCommand(String commandArgument) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.commandArgument \u003d commandArgument;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String helpMessage \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        switch(commandArgument) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpAddMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case AssignMacroCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            helpMessage \u003d generateHelpAssignMacroMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpClearMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpDeleteMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpEditMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpExitMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpFindMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpListMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case RemoveMacroCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            helpMessage \u003d generateHelpRemoveMacroMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpUpdateMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            helpMessage \u003d generateHelpViewMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            helpMessage \u003d generateHelpGenericMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new CommandResult(helpMessage, false, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpGenericMessage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutHelpCommand \u003d \"You can view the description, input format and sample commands for a particular\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" command using\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"help COMMAND.\\n\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"Example:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"help find\\n\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"Alternatively, you may visit the User Guide on our website for more details.\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" The URL can be accessed by pressing F1.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutAddCommand \u003d AddCommand.COMMAND_WORD + \"\\nAdds a supplier or warehouse to CLI-nic\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutAssignMacroCommand \u003d AssignMacroCommand.COMMAND_WORD + \"\\nAssigns a macro to a command string\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutClearCommand \u003d ClearCommand.COMMAND_WORD + \"\\nClears all suppliers and warehouses\u0027 entries in\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" CLI-nic\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutDeleteCommand \u003d DeleteCommand.COMMAND_WORD + \"\\nDeletes a supplier, warehouse or a product\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" associated with the supplier/warehouse that is no longer needed\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutEditCommand \u003d EditCommand.COMMAND_WORD + \"\\nEdits a specific supplier or warehouse\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutExitCommand \u003d ExitCommand.COMMAND_WORD + \"\\nExits the application\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutFindCommand \u003d FindCommand.COMMAND_WORD + \"\\nFinds relevant supplier(s) or warehouse(s)\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutListCommand \u003d ListCommand.COMMAND_WORD + \"\\nLists all suppliers and warehouses\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutRemoveMacroCommand \u003d RemoveMacroCommand.COMMAND_WORD + \"\\nRemoves the macro for an alias\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutUpdateCommand \u003d UpdateCommand.COMMAND_WORD + \"\\nUpdates a product associated with a supplier or\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" warehouse\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutViewCommand \u003d ViewCommand.COMMAND_WORD + \"\\nViews the in-depth information associated with a\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"specific supplier or warehouse\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String genericHelpMessage \u003d aboutHelpCommand + \"\\n\\n\" + aboutAddCommand + \"\\n\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + aboutAssignMacroCommand + \"\\n\\n\" + aboutClearCommand + \"\\n\\n\" + aboutDeleteCommand + \"\\n\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + aboutEditCommand + \"\\n\\n\" + aboutExitCommand + \"\\n\\n\" + aboutFindCommand + \"\\n\\n\" + aboutListCommand"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"\\n\\n\" + aboutRemoveMacroCommand + \"\\n\\n\" + aboutUpdateCommand + \"\\n\\n\" + aboutViewCommand;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return genericHelpMessage;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpAddMessage() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private String generateHelpAssignMacroMessage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + AssignMacroCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpClearMessage() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return ClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpDeleteMessage() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpEditMessage() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpExitMessage() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpFindMessage() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpListMessage() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private String generateHelpRemoveMacroMessage() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + RemoveMacroCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private String generateHelpUpdateMessage() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + UpdateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private String generateHelpViewMessage() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                || (other instanceof HelpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 commandArgument.equals(((HelpCommand) other).commandArgument)); // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 75,
      "zhengweii": 91,
      "-": 14,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_WAREHOUSES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Lists all suppliers in the CLI-nic app to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Lists all suppliers and warehouses in CLI-nic.\\n\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all suppliers and warehouses\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        model.updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "tohyuting": 3,
      "zhengweii": 4,
      "-": 18,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/RemoveMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Removes a macro identified using it\u0027s alias in the UserMacros model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class RemoveMacroCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removemacro\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Removes the macro identified by the alias used in the macro list.\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"ALIAS (has to be an existing macro)\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + COMMAND_WORD + \" uwa\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_REMOVE_MACRO_SUCCESS \u003d \"Removed Macro: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_MACRO_DOES_NOT_EXIST \u003d \"Macro does not exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Alias targetAlias;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a RemoveMacroCommand to remove the macro with the specified {@code targetAlias}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public RemoveMacroCommand(Alias targetAlias) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(targetAlias);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.targetAlias \u003d targetAlias;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Optional\u003cMacro\u003e optionalMacro \u003d model.getMacro(targetAlias);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (optionalMacro.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(MESSAGE_MACRO_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Macro macroToRemove \u003d optionalMacro.get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.deleteMacro(macroToRemove);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MACRO_SUCCESS, macroToRemove.getAlias()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof RemoveMacroCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 targetAlias.equals(((RemoveMacroCommand) other).targetAlias)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 54,
      "zhengweii": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_WAREHOUSES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Updates the quantity/tags for a product in a specific warehouse/supplier, or adds the product if it does not"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * already exist for that warehouse/supplier."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Updates the quantity and/or tags of the product with the specified\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" name in the specified supplier or warehouse. If the product does not exist for that supplier or\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" warehouse, a new product will be created for that supplier or warehouse.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" TYPE specified should be either s for supplier or w for warehouse. QUANTITY should\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" be a non-negative unsigned integer. If the PRODUCT_NAME already exists in the supplier or warehouse, at\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" least one optional argument has to be entered.\\n\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \"PRODUCT_NAME \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_PRODUCT_QUANTITY + \"QUANTITY]\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_TYPE + \"w \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_NAME + \"Alex Yeoh warehouse \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_PRODUCT_NAME + \"Panadol \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_PRODUCT_QUANTITY + \"350 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_TAG + \"Fever\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Product stock updated: %1$s in %2$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String MESSAGE_NO_SUCH_ENTITY \u003d \"The specified warehouse/supplier cannot be found.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String MESSAGE_INVALID_TYPE \u003d \"Invalid Type.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String MESSAGE_EMPTY_DESCRIPTOR \u003d \"Either the quantity or tags (or both) has to be \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"supplied to update an existing product\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Type entityType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Name entityName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Name productName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final UpdateProductDescriptor updateProductDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates an UpdateCommand to update the product with the specified {@code productName} for the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * supplier/warehouse with the specified {@code entityName}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateCommand(Type entityType, Name entityName, Name productName,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            UpdateProductDescriptor updateProductDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(entityType, entityName, productName, updateProductDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.entityName \u003d entityName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.entityType \u003d entityType;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.updateProductDescriptor \u003d updateProductDescriptor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        switch (entityType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        case SUPPLIER:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return updateProductForSupplier(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        case WAREHOUSE:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return updateProductForWarehouse(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private CommandResult updateProductForWarehouse(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse warehouseToUpdate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            warehouseToUpdate \u003d getWarehouseByName(entityName, model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_ENTITY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cProduct\u003e updatedProductSet \u003d new HashSet\u003c\u003e(warehouseToUpdate.getProducts());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Product productToUpdate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (warehouseToUpdate.hasProductWithName(productName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (!updateProductDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new CommandException(MESSAGE_EMPTY_DESCRIPTOR);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productToUpdate \u003d warehouseToUpdate.getProductByName(productName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            updatedProductSet.remove(productToUpdate); // removes the existing entry for the product"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productToUpdate \u003d new Product(productName, 0, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Product updatedProduct \u003d createUpdatedProduct(productToUpdate, updateProductDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        updatedProductSet.add(updatedProduct);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse updatedWarehouse \u003d new Warehouse(warehouseToUpdate.getName(), warehouseToUpdate.getPhone(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                warehouseToUpdate.getAddress(), warehouseToUpdate.getRemark(), updatedProductSet);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.setWarehouse(warehouseToUpdate, updatedWarehouse);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedProduct.toString(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                updatedWarehouse.getName().fullName));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private CommandResult updateProductForSupplier(Model model) throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier supplierToUpdate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            supplierToUpdate \u003d getSupplierByName(entityName, model);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_ENTITY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cProduct\u003e updatedProductSet \u003d new HashSet\u003c\u003e(supplierToUpdate.getProducts());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Product productToUpdate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (supplierToUpdate.hasProductWithName(productName)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (!updateProductDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new CommandException(MESSAGE_EMPTY_DESCRIPTOR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productToUpdate \u003d supplierToUpdate.getProductByName(productName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            updatedProductSet.remove(productToUpdate); // removes the existing entry for the product"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productToUpdate \u003d new Product(productName, 0, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Product updatedProduct \u003d createUpdatedProduct(productToUpdate, updateProductDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        updatedProductSet.add(updatedProduct);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier updatedSupplier \u003d new Supplier(supplierToUpdate.getName(), supplierToUpdate.getPhone(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                supplierToUpdate.getEmail(), supplierToUpdate.getRemark(), updatedProductSet);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.setSupplier(supplierToUpdate, updatedSupplier);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedProduct.toString(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                updatedSupplier.getName().fullName));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates and returns a {@code Product} with the details of {@code productToUpdate}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * updated with {@code updateProductDescriptor}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static Product createUpdatedProduct(Product productToUpdate,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            UpdateProductDescriptor updateProductDescriptor) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assert productToUpdate !\u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        int updatedQuantity \u003d updateProductDescriptor.getQuantity().orElse(productToUpdate.getProductQuantity());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateProductDescriptor.getTags().orElse(productToUpdate.getProductTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Product(productToUpdate.getProductName(), updatedQuantity, updatedTags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Warehouse getWarehouseByName(Name warehouseName, Model model) throws NoSuchElementException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getClinic().getWarehouseList().stream()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .filter(warehouse -\u003e warehouse.getName().equals(warehouseName)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Supplier getSupplierByName(Name supplierName, Model model) throws NoSuchElementException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getClinic().getSupplierList().stream()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .filter(supplier -\u003e supplier.getName().equals(supplierName)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof UpdateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 entityType.equals(((UpdateCommand) other).entityType)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 entityName.equals(((UpdateCommand) other).entityName)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 productName.equals(((UpdateCommand) other).productName)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 updateProductDescriptor.equals(((UpdateCommand) other).updateProductDescriptor));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(entityType, entityName, productName, updateProductDescriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Stores the details to edit the product with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * corresponding field value of the product."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static class UpdateProductDescriptor {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Integer quantity;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public UpdateProductDescriptor() {}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public UpdateProductDescriptor(UpdateProductDescriptor toCopy) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return CollectionUtil.isAnyNonNull(quantity, tags);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cInteger\u003e getQuantity() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (!(other instanceof UpdateProductDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            UpdateProductDescriptor e \u003d (UpdateProductDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 258,
      "zhengweii": 12,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForSupplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForWarehouse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Displays specific supplier(s) or warehouse(s) with name that matches any of keywords input by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Keyword only matches whole word e.g. bernice will match \"bernice yeoh\" but not \"berniceyeoh\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Views information related to a particular supplier or warehouse.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" TYPE specified should be either s for supplier or w for warehouse.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \" INDEX must be a positive integer, not exceeding the total length of the supplier/warehouse list.\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"view \" + PREFIX_TYPE + \"TYPE \" + PREFIX_INDEX + \"INDEX\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"1) \" + COMMAND_WORD + \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"2\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            + \"2) \" + COMMAND_WORD + \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX \u003d \"Index has to be present!\\n%1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_MISSING_TYPE \u003d \"A type, supplier (ct/s) or warehouse (ct/s)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" has to be present!\\n%1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX \u003d \"Please specify type and index using \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"ct/ and i/ prefixes \\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE_VIEW \u003d \"Please specity a correct type,\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \" either ct/s or ct/w\\n%1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_USAGE \u003d \"The input contains unnecessary arguments. Please \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            + \"ensure that you only include prefixes specified in the User Guide.\\n%1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Creates a new ViewCommand object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param type takes in type of the viewCommand object, either supplier or warehouse."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param index takes in name(s) as keywords to find warehouse(s) or supplier(s)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ViewCommand(Type type, Index index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cSupplier\u003e supplierList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cWarehouse\u003e warehouseList \u003d model.getFilteredWarehouseList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (type.equals(Type.SUPPLIER)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"View Command wants to view a supplier.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d supplierList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Supplier supplierToView \u003d supplierList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Retrieved supplier to be viewed from supplier list.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            NameContainsKeywordsPredicateForSupplier supplierPredicate \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    new NameContainsKeywordsPredicateForSupplier(supplierToView.getName().fullName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            model.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Updated model to show supplier to be viewed.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            commandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    String.format(Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            model.getFilteredSupplierList().size()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert type.equals(Type.WAREHOUSE) : \"The command type should be warehouse here!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"View Command wants to view a warehouse.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d warehouseList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Warehouse warehouseToView \u003d warehouseList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Retrieved warehouse to be viewed from warehouse list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            NameContainsKeywordsPredicateForWarehouse warehousePredicate \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    new NameContainsKeywordsPredicateForWarehouse(warehouseToView.getName().fullName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            model.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Updated model to show warehouse to be viewed.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            commandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    String.format(Messages.MESSAGE_WAREHOUSE_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            model.getFilteredWarehouseList().size()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 type.equals(((ViewCommand) other).type)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 index.equals(((ViewCommand) other).index));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 111,
      "zhengweii": 9
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.AddCommand.MESSAGE_MISSING_TYPE_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.AddCommand.MESSAGE_SUPPLIER_MISSING_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.AddCommand.MESSAGE_WAREHOUSE_MISSING_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        AddCommand addCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        logger.log(Level.INFO, \"Successfully tokenized user input.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_TYPE_PREFIX,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (type.equals(SUPPLIER)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"User input contains type prefix for supplier.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_SUPPLIER_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Set\u003cProduct\u003e productList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Supplier supplier \u003d new Supplier(name, phone, email, remark, productList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"Successfully created Supplier with given user input.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            addCommand \u003d new AddCommand(supplier);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assert type.equals(WAREHOUSE) : \"The type prefix for warehouse should be present here.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"User input contains type prefix for warehouse.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_WAREHOUSE_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Set\u003cProduct\u003e productList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Warehouse warehouse \u003d new Warehouse(name, phone, address, remark, productList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            logger.log(Level.INFO, \"Successfully created Warehouse with given user input.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            addCommand \u003d new AddCommand(warehouse);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //TODO: Consideration: shall we put all these same method under the parent Command class?"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //      Will it violate the Liskov substitution principle?"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 6,
      "qlchan24": 3,
      "-": 34,
      "jeffreytjs": 73
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/AddProductCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_SUPPLIER_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProductCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * and returns an AddProductCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUPPLIER_NAME, PREFIX_PRODUCT_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SUPPLIER_NAME, PREFIX_PRODUCT_NAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name targetSupplierName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_SUPPLIER_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name productName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product productToAdd \u003d new Product(productName, tagList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new AddProductCommand(targetSupplierName, productToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 52
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/AssignMacroCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_COMMAND_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.AssignMacroCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.SavedCommandString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Parses input arguments and creates a new AssignMacroCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class AssignMacroCommandParser implements Parser\u003cAssignMacroCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignMacroCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and returns an AssignMacroCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public AssignMacroCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALIAS, PREFIX_COMMAND_STRING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALIAS, PREFIX_COMMAND_STRING)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignMacroCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Alias alias \u003d ParserUtil.parseAlias(argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        SavedCommandString savedCommandString \u003d ParserUtil.parseCommandString(argMultimap"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .getValue(PREFIX_COMMAND_STRING).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Macro macro \u003d new Macro(alias, savedCommandString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new AssignMacroCommand(macro);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 52
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final Prefix PREFIX_SUPPLIER_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final Prefix PREFIX_WAREHOUSE_NAME \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"addr/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_NAME \u003d new Prefix(\"pd/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Prefix PREFIX_SUPPLIER_INDEX \u003d new Prefix(\"si/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Prefix PREFIX_WAREHOUSE_INDEX \u003d new Prefix(\"wi/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Prefix PREFIX_COMMAND_STRING \u003d new Prefix(\"cs/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String TYPE_SUPPLIER_PRODUCT \u003d \"ps\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String TYPE_WAREHOUSE_PRODUCT \u003d \"pw\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "qlchan24": 5,
      "tohyuting": 2,
      "-": 12,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/ClinicParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.AssignMacroCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.RemoveMacroCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ClinicParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses command string into a command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param commandString full command string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @return the command based on the command string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the command string does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Command parseCommand(String commandString) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(commandString.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        case AssignMacroCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return new AssignMacroCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        case RemoveMacroCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return new RemoveMacroCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 18,
      "tohyuting": 4,
      "-": 56,
      "jeffreytjs": 14
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Parses the given {@code String} of arguments, identifies the correct type of DeleteCommand via argument length"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * and returns the DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_INDEX, PREFIX_PRODUCT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_INDEX) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            assert index.getOneBased() \u003e\u003d 1 : \"The index is less than 1!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (type.equals(SUPPLIER) || type.equals(WAREHOUSE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new DeleteCommand(type, index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            // The product deletion must have product name prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_PRODUCT_NAME)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Name productName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new DeleteCommand(type, index, productName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 44,
      "-": 16,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_INVALID_TYPE_EDIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_INVALID_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NO_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NO_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NO_PREFIX_AND_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_SUPPLIER_NO_ADDRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_WAREHOUSE_NO_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_INDEX, PREFIX_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        logger.log(Level.INFO, \"Successfully tokenized user input.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_PREFIX_AND_INDEX,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_PREFIX,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_INDEX,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw checkInvalidArguments(PREFIX_INDEX, argMultimap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Type type;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw checkInvalidArguments(PREFIX_TYPE, argMultimap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (type.equals(Type.WAREHOUSE_PRODUCT) || type.equals(Type.SUPPLIER_PRODUCT)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TYPE_EDIT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (type.equals(Type.SUPPLIER)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"User input contains supplier prefix.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_SUPPLIER_NO_ADDRESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            EditSupplierDescriptor editSupplierDescriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editSupplierDescriptor \u003d parseSupplierForEditing(editSupplierDescriptor, argMultimap);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            logger.log(Level.INFO, \"Successfully created an editSupplierDescriptor using the given\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    + \" user input.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!editSupplierDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NOT_EDITED,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new EditCommand(index, editSupplierDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()).equals(Type.WAREHOUSE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    : \"The warehouse prefix\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    + \" should have been present.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_WAREHOUSE_NO_EMAIL,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            EditWarehouseDescriptor editWarehouseDescriptor \u003d new EditWarehouseDescriptor();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editWarehouseDescriptor \u003d parseWarehouseForEditing(editWarehouseDescriptor, argMultimap);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            if (!editWarehouseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NOT_EDITED,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new EditCommand(index, editWarehouseDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private EditWarehouseDescriptor parseWarehouseForEditing(EditWarehouseDescriptor editWarehouseDescriptor,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                                                    ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        parseGeneralDetails(editWarehouseDescriptor, argMultimap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editWarehouseDescriptor.setAddress("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return editWarehouseDescriptor;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private EditSupplierDescriptor parseSupplierForEditing(EditSupplierDescriptor editSupplierDescriptor,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                                                   ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        parseGeneralDetails(editSupplierDescriptor, argMultimap);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editSupplierDescriptor.setEmail("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return editSupplierDescriptor;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private EditDescriptor parseGeneralDetails(EditDescriptor editDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editDescriptor.setName("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            Phone phoneNumber;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                phoneNumber \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                throw checkInvalidArguments(PREFIX_PHONE, argMultimap);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editDescriptor.setPhone(phoneNumber);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            editDescriptor.setRemark("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return editDescriptor;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private ParseException checkInvalidArguments(Prefix prefix, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(prefix).get().contains(\"/\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(MESSAGE_INVALID_PREFIX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(prefix).get().split(\"\\\\s+\").length !\u003d 1) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(String.format(MESSAGE_INVALID_USAGE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (prefix.equals(PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(String.format(MESSAGE_INVALID_TYPE_EDIT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else if (prefix.equals(PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(MESSAGE_INVALID_INDEX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert prefix.equals(PREFIX_PHONE) : \"The prefix here should be of Phone type!\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(Phone.MESSAGE_CONSTRAINTS + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 162,
      "-": 30,
      "jeffreytjs": 9
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.supplier.SupplierPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.warehouse.WarehousePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_PRODUCT_NAME, PREFIX_REMARK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // Ensures that the type prefix is present and at least one of the name, product or remark prefix is present"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                || !atLeastOnePrefixPresent(argMultimap, PREFIX_NAME, PREFIX_PRODUCT_NAME, PREFIX_REMARK)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assert type !\u003d null : \"type cannot be null\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (!type.equals(SUPPLIER) \u0026\u0026 !type.equals(WAREHOUSE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String[] nameKeywords \u003d {};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String[] productKeywords \u003d {};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String[] remarkKeywords \u003d {};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            nameKeywords \u003d name.fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRODUCT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            Name productName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            productKeywords \u003d productName.fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            remarkKeywords \u003d remark.value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (type.toString().equals(\"s\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            logger.log(Level.INFO, \"Returning FindCommand to find relevant suppliers.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            return new FindCommand(new SupplierPredicate(Arrays.asList(nameKeywords),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    Arrays.asList(productKeywords), Arrays.asList(remarkKeywords)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        logger.log(Level.INFO, \"Returning FindCommand to find relevant warehouses.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return new FindCommand(new WarehousePredicate(Arrays.asList(nameKeywords),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Arrays.asList(productKeywords), Arrays.asList(remarkKeywords)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Returns true if none of the prefixes contain empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Returns true if at least one of the prefixes does not have empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private static boolean atLeastOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 76,
      "-": 21,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.ALLOWED_ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.MESSAGE_TOO_MANY_ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.MESSAGE_WRONG_ARGUMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new HelpCommand(\"all\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String[] helpKeyword \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (helpKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String helpArgument \u003d helpKeyword[0].toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!Arrays.asList(ALLOWED_ARGUMENTS).contains(helpArgument)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    MESSAGE_WRONG_ARGUMENT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new HelpCommand(helpArgument);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 40
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/MacroParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class MacroParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts user input into the corresponding command string if a macro is identified to be used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param model the model which contains the user macros"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @return the command string saved by the macro, or the original input string if no macro is used"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public String parseMacro(Model model, String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String[] inputWords \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Optional\u003cMacro\u003e targetMacro \u003d model.getMacro(inputWords[0].toLowerCase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (targetMacro.isEmpty()) { // macro does not exist"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String savedCommandText \u003d targetMacro.get().getSavedCommandString().internalString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String argumentString \u003d String.join(\" \", Arrays.copyOfRange(inputWords, 1, inputWords.length));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return savedCommandText + \" \" + argumentString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 30
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.SavedCommandString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index provided is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d \"Quantity provided is not an unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"Type is invalid, must be one of s/w/ps/pw.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"One of the prefix specified is not recognised.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Parses {@code typeKeyword} into an {@code Type} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * trimmed and the string is converted to lower cases."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws ParseException if the specified type is invalid (neither supplier or warehouse)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Type parseType(String typeKeyword) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(typeKeyword);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String trimmedType \u003d typeKeyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return Type.getType(trimmedType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses {@code quantity} into an {@code int} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the specified quantity is invalid (not unsigned integer)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static int parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!StringUtil.isUnsignedInteger(trimmedQuantity)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses a {@code String productName} and a {@code Collection\u003cString\u003e tags} into a {@code Product}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * TODO: change the signature or overload the method. Add in the test cases for parseProduct"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the given {@code productName} or the given {@code tags} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Product parseProduct(String productName, Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(productName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d parseTags(tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name trimmedName \u003d parseName(productName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Product(trimmedName, tagSet);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses a {@code String alias} into an {@code Alias}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Alias parseAlias(String alias) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String trimmedAlias \u003d alias.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!Alias.isValidAlias(trimmedAlias)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Alias(trimmedAlias);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses a {@code String commandString} into an {@code SavedCommandString}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static SavedCommandString parseCommandString(String commandString) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(commandString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String trimmedCommandString \u003d commandString.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!SavedCommandString.isValidSavedCommandString(trimmedCommandString)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException(SavedCommandString.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new SavedCommandString(trimmedCommandString);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 28,
      "qlchan24": 66,
      "tohyuting": 1,
      "-": 113,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/RemoveMacroCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.RemoveMacroCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class RemoveMacroCommandParser implements Parser\u003cRemoveMacroCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveMacroCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and returns a RemoveMacroCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public RemoveMacroCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Alias alias \u003d ParserUtil.parseAlias(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return new RemoveMacroCommand(alias);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveMacroCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 25
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    SUPPLIER(\"s\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    WAREHOUSE(\"w\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    SUPPLIER_PRODUCT(\"ps\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    WAREHOUSE_PRODUCT(\"pw\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Type(String code) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private String getCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Find the matching type given the value if {@code value} passed in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The correctly matched one among the 4 types."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws IllegalArgumentException if the value passed in does not match any of the type format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Type getType(String value) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (Type c: Type.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (c.getCode().equals(value)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return getCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 37
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/UpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand.UpdateProductDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        PREFIX_PRODUCT_QUANTITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_NAME, PREFIX_PRODUCT_NAME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Type entityType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name entityName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name productName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UpdateProductDescriptor updateProductDescriptor \u003d new UpdateProductDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRODUCT_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            updateProductDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    .getValue(PREFIX_PRODUCT_QUANTITY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(updateProductDescriptor::setTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new UpdateCommand(entityType, entityName, productName, updateProductDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 78
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_INVALID_TYPE_VIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_INVALID_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_MISSING_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_NO_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        logger.log(Level.INFO, \"Tokenised user inputs.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NO_PREFIX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_TYPE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    String.format(MESSAGE_MISSING_INDEX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Type type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw checkInvalidArguments(PREFIX_TYPE, argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        logger.log(Level.INFO, \"Successfully parsed command type of user input.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (type.equals(Type.SUPPLIER_PRODUCT) || type.equals(Type.WAREHOUSE_PRODUCT)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            throw checkInvalidArguments(PREFIX_INDEX, argMultimap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        logger.log(Level.INFO, \"Successfully parsed index of user input, creating new ViewCommand.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new ViewCommand(type, index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private ParseException checkInvalidArguments(Prefix prefix, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(prefix).get().contains(\"/\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(MESSAGE_INVALID_PREFIX + \"\\n\" + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (argMultimap.getValue(prefix).get().split(\"\\\\s+\").length !\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(String.format(MESSAGE_INVALID_USAGE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (prefix.equals(PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            assert prefix.equals(PREFIX_INDEX) : \"The prefix here should be of Index type!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return new ParseException(MESSAGE_INVALID_INDEX + \"\\n\" + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 88
    }
  },
  {
    "path": "src/main/java/seedu/clinic/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/Clinic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.UniqueSupplierList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.UniqueWarehouseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Wraps all data at the clinic level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Duplicates are not allowed (by .isSameSupplier and isSameWarehouse comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Clinic implements ReadOnlyClinic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final UniqueSupplierList suppliers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final UniqueWarehouseList warehouses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        suppliers \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouses \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Clinic() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a Clinic using the Suppliers \u0026 Warehouses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Clinic(ReadOnlyClinic toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the contents of the supplier list with {@code suppliers}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code suppliers} must not contain duplicate suppliers."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.suppliers.setSuppliers(suppliers);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the contents of the warehouse list with {@code warehouses}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code warehouses} must not contain duplicate warehouses."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses(List\u003cWarehouse\u003e warehouses) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.warehouses.setWarehouses(warehouses);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Resets the existing data of this {@code Clinic} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void resetData(ReadOnlyClinic newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        setSuppliers(newData.getSupplierList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        setWarehouses(newData.getWarehouseList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //// warehouse-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if a warehouse with the same identity as {@code warehouse} exists in the clinic."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(warehouse);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return warehouses.contains(warehouse);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds a warehouse to the clinic."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse must not already exist in the clinic."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void addWarehouse(Warehouse p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouses.add(p);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the given warehouse {@code target} in the list with {@code editedWarehouse}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code target} must exist in the clinic."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse identity of {@code editedWarehouse} must not be the same as another existing warehouse"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * in the clinic."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(editedWarehouse);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouses.setWarehouse(target, editedWarehouse);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Removes {@code key} from this {@code Clinic}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code key} must exist in the clinic."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void removeWarehouse(Warehouse key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouses.remove(key);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //// supplier-level operations"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns true if a supplier with the same identity as {@code supplier} exists in the CLI-nic app."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return suppliers.contains(supplier);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Adds a supplier to the CLI-nic app."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * The supplier must not already exist in clinic."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void addSupplier(Supplier p) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        suppliers.add(p);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the given supplier {@code target} in the list with {@code editedSupplier}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code target} must exist in clinic."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another existing supplier"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * in the CLI-nic app."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(editedSupplier);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        suppliers.setSupplier(target, editedSupplier);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Removes {@code key} from this {@code Clinic}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code key} must exist in clinic."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void removeSupplier(Supplier key) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        suppliers.remove(key);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return suppliers.asUnmodifiableObservableList().size() + \" suppliers\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + warehouses.asUnmodifiableObservableList().size() + \" warehouses\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getSupplierList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return suppliers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cWarehouse\u003e getWarehouseList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return warehouses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                || (other instanceof Clinic // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 warehouses.equals(((Clinic) other).warehouses)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u0026\u0026 suppliers.equals(((Clinic) other).suppliers));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Objects.hash(suppliers, warehouses);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 63,
      "qlchan24": 22,
      "-": 77,
      "jeffreytjs": 18
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Predicate\u003cSupplier\u003e PREDICATE_SHOW_ALL_SUPPLIERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    Predicate\u003cWarehouse\u003e PREDICATE_SHOW_ALL_WAREHOUSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the user macros file path as stated in user prefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Path getUserMacrosFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the user macros."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ReadOnlyUserMacros getUserMacros();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the user prefs\u0027 clinic file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void setUserMacrosFilePath(Path clinicFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces userMacros data with the data in {@code userMacros}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void setUserMacros(ReadOnlyUserMacros userMacros);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a macro with the same alias as {@code macro} exists in the UserMacros model."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    boolean hasMacro(Macro macro);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias string in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Optional\u003cMacro\u003e getMacro(String aliasString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Optional\u003cMacro\u003e getMacro(Alias alias);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Deletes the given macro."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro must exist in the UserMacros model."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void deleteMacro(Macro target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds the given macro."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code macro} must not already exist in the UserMacros model."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void addMacro(Macro macro);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the given macro {@code target} with {@code editedMacro}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code target} must exist in the UserMacros model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The alias of {@code editedMacro} must not be the same as another existing macro"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * in the UserMacros model."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void setMacro(Macro target, Macro editedMacro);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /** Returns an unmodifiable view of the macro list */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cMacro\u003e getMacroList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns the user prefs\u0027 clinic file path."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Path getClinicFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Sets the user prefs\u0027 clinic file path."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    void setClinicFilePath(Path clinicFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Replaces clinic data with the data in {@code clinic}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    void setClinic(ReadOnlyClinic clinic);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /** Returns the Clinic */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    ReadOnlyClinic getClinic();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns true if a supplier with the same identity as {@code supplier} exists in the CLI-nic app."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    boolean hasSupplier(Supplier supplier);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Deletes the given supplier."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * The supplier must exist in the CLI-nic app."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void deleteSupplier(Supplier target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds the given supplier."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code supplier} must not already exist in the CLI-nic app."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void addSupplier(Supplier supplier);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the given supplier {@code target} with {@code editedSupplier}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code target} must exist in the clinic."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another existing supplier"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * in the CLI-nic app."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void setSupplier(Supplier target, Supplier editedSupplier);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /** Returns an unmodifiable view of the filtered supplier list */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cSupplier\u003e getFilteredSupplierList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Updates the filter of the filtered supplier list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if a warehouse with the same identity as {@code warehouse} exists in the clinic app."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    boolean hasWarehouse(Warehouse warehouse);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Deletes the given warehouse."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse must exist in the clinic app."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void deleteWarehouse(Warehouse target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds the given warehouse."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code warehouse} must not already exist in the clinic app."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void addWarehouse(Warehouse warehouse);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the given warehouse {@code target} with {@code editedWarehouse}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code target} must exist in the clinic app."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse identity of {@code editedWarehouse} must not be the same as another existing warehouse"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * in the clinic app."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void setWarehouse(Warehouse target, Warehouse editedWarehouse);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered warehouse list */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    ObservableList\u003cWarehouse\u003e getFilteredWarehouseList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updates the filter of the filtered warehouse list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 39,
      "qlchan24": 77,
      "-": 59,
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Represents the in-memory model of the clinic data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Clinic clinic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final UserMacros userMacros;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final FilteredList\u003cSupplier\u003e filteredSuppliers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final FilteredList\u003cWarehouse\u003e filteredWarehouses;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final ObservableList\u003cMacro\u003e macroList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Initializes a ModelManager with the given clinic, userPrefs, and userMacros."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ModelManager(ReadOnlyClinic clinic, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(clinic, userPrefs, userMacros);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        logger.fine(\"Initializing with clinic: \" + clinic + \", with user prefs \" + userPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + \" and with user macros \" + userMacros);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.clinic \u003d new Clinic(clinic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.userMacros \u003d new UserMacros(userMacros);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        filteredSuppliers \u003d new FilteredList\u003c\u003e(this.clinic.getSupplierList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        filteredWarehouses \u003d new FilteredList\u003c\u003e(this.clinic.getWarehouseList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macroList \u003d this.userMacros.getMacroList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this(new Clinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return userPrefs.getClinicFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setClinicFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(clinicFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        userPrefs.setClinicFilePath(clinicFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userPrefs.getUserMacrosFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath(Path userMacrosFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(userMacrosFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userPrefs.setUserMacrosFilePath(userMacrosFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserMacros \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacros(ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.userMacros.resetData(userMacros);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ReadOnlyUserMacros getUserMacros() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasMacro(Macro macro) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(macro);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros.hasMacro(macro);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros.getMacro(aliasString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros.getMacro(alias);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void deleteMacro(Macro target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacros.removeMacro(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void addMacro(Macro macro) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacros.addMacro(macro);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(target, editedMacro);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacros.setMacro(target, editedMacro);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Macro}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macroList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clinic \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setClinic(ReadOnlyClinic clinic) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.clinic.resetData(clinic);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinic.hasSupplier(supplier);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(warehouse);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return clinic.hasWarehouse(warehouse);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.removeSupplier(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void deleteWarehouse(Warehouse target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.removeWarehouse(target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.addSupplier(supplier);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void addWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.addWarehouse(warehouse);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(target, editedSupplier);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.setSupplier(target, editedSupplier);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireAllNonNull(target, editedWarehouse);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.setWarehouse(target, editedWarehouse);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Supplier List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Supplier} backed by the internal list of"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code versionedClinic}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return filteredSuppliers;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        filteredSuppliers.setPredicate(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Warehouse List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Warehouse} backed by the internal list of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code versionedCLI-nic}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cWarehouse\u003e getFilteredWarehouseList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return filteredWarehouses;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        filteredWarehouses.setPredicate(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinic.equals(other.clinic)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 filteredSuppliers.equals(other.filteredSuppliers)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 filteredWarehouses.equals(other.filteredWarehouses)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 macroList.equals((other.macroList));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 49,
      "qlchan24": 94,
      "-": 106,
      "jeffreytjs": 22
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/ReadOnlyClinic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Unmodifiable view of a clinic"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public interface ReadOnlyClinic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an unmodifiable view of the suppliers list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This list will not contain any duplicate suppliers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cSupplier\u003e getSupplierList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an unmodifiable view of the warehouses list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * This list will not contain any duplicate warehouses."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    ObservableList\u003cWarehouse\u003e getWarehouseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 6,
      "qlchan24": 3,
      "-": 10,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/ReadOnlyUserMacros.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Unmodifiable view of user macros."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public interface ReadOnlyUserMacros {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an unmodifiable view of the macro list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This list will not contain any duplicate macros."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    ObservableList\u003cMacro\u003e getMacroList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 16
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Path getClinicFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Path getUserMacrosFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "-": 14,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/UserMacros.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.UniqueMacroList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Represents user-defined macros."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Duplicates are not allowed (by .isSameMacro comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UserMacros implements ReadOnlyUserMacros {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final UniqueMacroList macros;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacros() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macros \u003d new UniqueMacroList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code UserMacros} with the macros in {@code userMacros}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacros(ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        resetData(userMacros);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the contents of the macro list with {@code macros}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code macros} must not contain duplicate macros."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacros(List\u003cMacro\u003e macros) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.macros.setMacros(macros);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Resets the existing data of this {@code UserMacros} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void resetData(ReadOnlyUserMacros newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        setMacros(newData.getMacroList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //// macro-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a macro with the same alias as {@code macro} exists in the model."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasMacro(Macro macro) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(macro);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.contains(macro);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a macro with the alias {@code alias} exists in the model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasMacro(Alias alias) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.contains(alias);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias string in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.getMacro(aliasString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.getMacro(alias);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds a macro to the CLI-nic app."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro must not already exist in userMacros."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void addMacro(Macro p) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macros.add(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the given macro {@code target} in the list with {@code editedMacro}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code target} must exist in userMacros."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro identity of {@code editedMacro} must not be the same as another existing macro"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * in the CLI-nic app."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(editedMacro);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macros.setMacro(target, editedMacro);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Removes {@code key} from this {@code UserMacros}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code key} must exist in userMacros."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void removeMacro(Macro key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macros.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.asUnmodifiableObservableList().size() + \" macros\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return macros.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof UserMacros // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 macros.equals(((UserMacros) other).macros));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(macros);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 140
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Path clinicFilePath \u003d Paths.get(\"data\" , \"clinic.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Path userMacrosFilePath \u003d Paths.get(\"data\" , \"userMacros.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        setClinicFilePath(newUserPrefs.getClinicFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        setUserMacrosFilePath(newUserPrefs.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacrosFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath(Path userMacrosFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(userMacrosFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.userMacrosFilePath \u003d userMacrosFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinicFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setClinicFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        requireNonNull(clinicFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.clinicFilePath \u003d clinicFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 clinicFilePath.equals(o.clinicFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 userMacrosFilePath.equals(o.userMacrosFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(guiSettings, clinicFilePath, userMacrosFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(\"\\nClinic data file location : \" + clinicFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(\"\\nUser macros file location : \" + userMacrosFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 14,
      "-": 77,
      "jeffreytjs": 9
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents an address information for the supplier/warehouse in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values except for forward\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" slashes (i.e. \u0027/\u0027), and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * String must not contain forward slashes (i.e. \u0027/\u0027)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][^/]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "-": 51,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents an email information for the supplier/warehouse in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static boolean isValidEmail(String email) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (email.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return email.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 3,
      "-": 62,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents a name for the supplier/warehouse/product in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should start with an alphanumeric character,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" and it should not be blank. Name should not contain forward slashes (i.e. \u0027/\u0027)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The first character of the name must be alphanumeric."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * String must not contain forward slashes (i.e. \u0027/\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Print}][^/]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "zhengweii": 1,
      "-": 49,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/NameContainsKeywordsPredicateForSupplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Tests that a {@code Supplier}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class NameContainsKeywordsPredicateForSupplier implements Predicate\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public NameContainsKeywordsPredicateForSupplier(String keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean test(Supplier supplier) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return keywords.equals(supplier.getName().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicateForSupplier // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicateForSupplier) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "qlchan24": 2,
      "tohyuting": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/NameContainsKeywordsPredicateForWarehouse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Tests that a {{@code Warehouse}}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class NameContainsKeywordsPredicateForWarehouse implements Predicate\u003cWarehouse\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public NameContainsKeywordsPredicateForWarehouse(String keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean test(Warehouse warehouse) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return keywords.equals(warehouse.getName().fullName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicateForWarehouse // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicateForWarehouse) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 7,
      "tohyuting": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents a phone number for the supplier/warehouse/product in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents a remark for the supplier/warehouse in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values except for forward slashes\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \" (i.e. \u0027/\u0027) and it should not have more that 100 characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * The first character of the remark must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * String must not contain forward slashes (i.e. \u0027/\u0027)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][^/]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static boolean isValidRemark(String remark) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (remark.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return remark.matches(VALIDATION_REGEX) \u0026\u0026 remark.length() \u003c\u003d 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 51,
      "jeffreytjs": 10
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/attribute/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents a tag for the product related to a specific supplier/warehouse in CLI-nic app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be a single alphanumeric word\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\w+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/Alias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.model.macro.Macro.PREDEFINED_COMMANDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Represents an alias for a macro."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlias(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class Alias {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            \"Alias should contain alphanumeric characters or underscores, should not be an predefined command\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    + \" word, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\w+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public final String aliasString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code Alias}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param aliasString A valid alias string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Alias(String aliasString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        checkArgument(isValidAlias(aliasString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.aliasString \u003d aliasString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a given string is a valid alias."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static boolean isValidAlias(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 !Arrays.asList(PREDEFINED_COMMANDS).contains(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof Alias // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 aliasString.equals(((Alias) other).aliasString)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return aliasString.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return aliasString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 60
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/Macro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Represents a user Macro."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Guarantees: fields are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class Macro {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String[] PREDEFINED_COMMANDS \u003d new String[]{ AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        AddProductCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ClearCommand.COMMAND_WORD, FindCommand.COMMAND_WORD, ListCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        HelpCommand.COMMAND_WORD, UpdateCommand.COMMAND_WORD, ViewCommand.COMMAND_WORD};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Alias alias;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final SavedCommandString savedCommandString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Macro(Alias alias, SavedCommandString savedCommandString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(alias, savedCommandString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.savedCommandString \u003d savedCommandString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Alias getAlias() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SavedCommandString getSavedCommandString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return savedCommandString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if both macros have the same alias."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This defines a weaker notion of equality between two macros."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean isSameMacro(Macro otherMacro) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (otherMacro \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return otherMacro !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherMacro.getAlias().equals(getAlias());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if both macros have the same identity and data fields."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This defines a stronger notion of equality between two macros."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!(other instanceof Macro)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Macro otherMacro \u003d (Macro) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return otherMacro.getAlias().equals(getAlias())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherMacro.getSavedCommandString().equals(getSavedCommandString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(alias, savedCommandString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return getAlias()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + \"\\nSaved Command String: \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + getSavedCommandString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qlchan24": 95
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/SavedCommandString.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.ClinicParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.model.macro.Macro.PREDEFINED_COMMANDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Represents a savedCommandString for a macro."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSavedCommandString(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SavedCommandString {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Command strings should be a pre-defined command word, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"optionally followed by arguments\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public final String internalString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code SavedCommandString}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param internalString A valid string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SavedCommandString(String internalString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(internalString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        checkArgument(isValidSavedCommandString(internalString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.internalString \u003d internalString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a given string is a valid string for savedCommandString."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static boolean isValidSavedCommandString(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Arrays.asList(PREDEFINED_COMMANDS).contains(commandWord.toLowerCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof SavedCommandString // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 internalString.equals(((SavedCommandString) other).internalString)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalString.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalString;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qlchan24": 65
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/UniqueMacroList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.exceptions.MacroNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A list of macros that enforces uniqueness between its elements and does not allow nulls. A macro is considered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * unique by comparing using {@code Macro#isSameMacro(Macro)}. As such, adding and updating of macros uses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Macro#isSameMacro(Macro) for equality so as to ensure that the macro being added or updated is unique in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * terms of identity in the UniqueMacroList. However, the removal of a macro uses Macro#equals(Object) so as to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * ensure that the macro with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * @see Macro#isSameMacro(Macro)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UniqueMacroList implements Iterable\u003cMacro\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final ObservableList\u003cMacro\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final ObservableList\u003cMacro\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if the macro list contains an equivalent macro as the given macro argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean contains(Macro toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMacro);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if the macro list contains an equivalent macro as the given alias."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean contains(Alias toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.stream().anyMatch((Macro macro)-\u003emacro.getAlias().equals(toCheck));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias string in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Alias alias;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            alias \u003d new Alias(aliasString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (IllegalArgumentException e) { // Invalid Alias"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return getMacro(alias);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the macro corresponding to the alias in an optional wrapper if it exists,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and an empty optional otherwise."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.stream().filter((Macro macro)-\u003emacro.getAlias().equals(alias)).findFirst();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds a macro to the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro must not already exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void add(Macro toAdd) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateMacroException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the macro {@code target} in the list with {@code editedMacro}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro identity of {@code editedMacro} must not be the same as another existing macro in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(target, editedMacro);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new MacroNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!target.isSameMacro(editedMacro) \u0026\u0026 contains(editedMacro)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateMacroException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.set(index, editedMacro);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Removes the equivalent macro from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The macro must exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void remove(Macro toRemove) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new MacroNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacros(UniqueMacroList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the contents of this list with {@code macros}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code macros} must not contain duplicate macros."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacros(List\u003cMacro\u003e macros) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(macros);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!macrosAreUnique(macros)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateMacroException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.setAll(macros);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cMacro\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Iterator\u003cMacro\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof UniqueMacroList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMacroList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if {@code macros} contains only unique macros."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private boolean macrosAreUnique(List\u003cMacro\u003e macros) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (int i \u003d 0; i \u003c macros.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            for (int j \u003d i + 1; j \u003c macros.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                if (macros.get(i).isSameMacro(macros.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qlchan24": 173
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/exceptions/DuplicateMacroException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Signals that the operation will result in duplicate Macros (Macros are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * have the same alias)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class DuplicateMacroException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public DuplicateMacroException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        super(\"Operation would result in duplicate macros\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 11
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/macro/exceptions/MacroNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.model.macro.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Signals that the operation is unable to find the specified macro."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class MacroNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public MacroNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        super(\"The macro is not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 10
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/product/Product.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents Product sold by Suppliers or stored in Warehouse."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"Quantity should only be non-negative\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Name productName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final int productQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Set\u003cTag\u003e productTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Constructs a Product with a productName and the productQuantity associated with the product."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Product objects constructed will not have any product tags associated with it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productQuantity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product(Name productName, int productQuantity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Constructs a Product with a productName and the tags (if any) associated with the products."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Tags can be 0 or more than 1."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productTags"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product(Name productName, Set\u003cTag\u003e productTags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productQuantity \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productTags.addAll(productTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Constructs a Product with a productName, the product\u0027s productQuantity"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * and tags associated with the current product."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productName"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productQuantity"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param productTags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product(Name productName, int productQuantity, Set\u003cTag\u003e productTags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productTags.addAll(productTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Name getProductName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this.productName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public int getProductQuantity() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this.productQuantity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Set\u003cTag\u003e getProductTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return Collections.unmodifiableSet(this.productTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Returns a new Product with the change in quantity reflected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param updatedQuantity"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product updateQuantityForWarehouse(int updatedQuantity) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new Product(this.productName, updatedQuantity, this.productTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Compares if two products are equal by checking if they have the same product name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @param other Object to compare with."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @return Is the other object equals to this object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                || (other instanceof Product // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 productName.equals(((Product) other).productName)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(productName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Displays String representation of Product displayed under a warehouse."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * @return String representation of Product displayed under a warehouse."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        builder.append(getProductName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .append(getProductQuantity())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .append(\" left\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Examine if a quantity is a valid product quantity."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param productQuantity the amount of a product entered."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return True if the number entered is valid, else False."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static boolean isValidQuantity(int productQuantity) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return productQuantity \u003e\u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 15,
      "qlchan24": 5,
      "tohyuting": 101,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/product/exceptions/ProductNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class ProductNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ProductNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(\"The product is not found!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 7
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/supplier/Supplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Represents a Supplier in the CLI-nic app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class Supplier {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Set\u003cProduct\u003e products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Supplier(Name name, Phone phone, Email email, Remark remark, Set\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(name, phone, email, remark, products);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.products.addAll(products);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an immutable product set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Set\u003cProduct\u003e getProducts() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Collections.unmodifiableSet(products);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a product with the {@code targetName} sold by the supplier."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The product matching the target name."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws ProductNotFoundException if these is no product in the list matching the name asked."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Product getProductByName(Name targetName) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product matchedProduct \u003d products.stream().filter(p -\u003e p.getProductName().equals(targetName))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .findFirst().orElseThrow(ProductNotFoundException::new);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return matchedProduct;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Removes a product sold by the Supplier."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return a new Supplier with the {@code targetProduct} removed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Supplier removeProduct(Product targetProduct) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assert this.getProducts().contains(targetProduct) : \"Target product not in list\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Set\u003cProduct\u003e updatedProductSet \u003d new HashSet\u003c\u003e(this.getProducts());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        updatedProductSet.remove(targetProduct); // removes the matching product"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier updatedSupplier \u003d new Supplier(this.getName(), this.getPhone(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.getEmail(), this.getRemark(), updatedProductSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return updatedSupplier;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns true if a product with the {@code targetName} is found in the supplier."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasProductWithName(Name targetName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return products.stream().anyMatch(p -\u003e p.getProductName().equals(targetName));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if both suppliers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This defines a weaker notion of equality between two suppliers."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean isSameSupplier(Supplier otherSupplier) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        if (otherSupplier \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return otherSupplier !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u0026\u0026 otherSupplier.getName().equals(getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if both suppliers have the same identity and data fields."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * This defines a stronger notion of equality between two suppliers."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!(other instanceof Supplier)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier otherSupplier \u003d (Supplier) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return otherSupplier.getName().equals(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherSupplier.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherSupplier.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherSupplier.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 otherSupplier.getProducts().equals(getProducts());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Objects.hash(name, phone, email, remark, products);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .append(\" Remarks: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .append(\" Products: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        getProducts().forEach(s -\u003e builder.append(s.toString()).append(\" \"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 33,
      "qlchan24": 31,
      "tohyuting": 9,
      "-": 80,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/supplier/SupplierPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "package seedu.clinic.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Tests whether the {@code Name}, {@code Remark} or any of the {@code Product} sold by {@code Supplier} matches any"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "public class SupplierPredicate implements Predicate\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e nameKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e productKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e remarkKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Constructs a new {@code SupplierPredicate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public SupplierPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e productKeywords,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            List\u003cString\u003e remarkKeywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (nameKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.nameKeywords \u003d Optional.ofNullable(nameKeywords);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (productKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.productKeywords \u003d Optional.ofNullable(productKeywords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (remarkKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.remarkKeywords \u003d Optional.ofNullable(remarkKeywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public boolean test(Supplier supplier) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (nameKeywords.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            boolean match \u003d nameKeywords.get().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(supplier.getName().fullName, keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (productKeywords.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            Product[] products \u003d supplier.getProducts().toArray(Product[]::new);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            for (int i \u003d 0; i \u003c products.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                String productName \u003d products[i].getProductName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                boolean match \u003d productKeywords.get().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(productName, keyword));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                if (match) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (remarkKeywords.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            return remarkKeywords.get().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(supplier.getRemark().value, keyword));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                || (other instanceof SupplierPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 nameKeywords.equals(((SupplierPredicate) other).nameKeywords)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 productKeywords.equals(((SupplierPredicate) other).productKeywords)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 remarkKeywords.equals(((SupplierPredicate) other).remarkKeywords)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 78
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/supplier/UniqueSupplierList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.exceptions.SupplierNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A list of suppliers that enforces uniqueness between its elements and does not allow nulls. A supplier is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * unique by comparing using {@code Supplier#isSameSupplier(Supplier)}. As such, adding and updating of suppliers uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Supplier#isSameSupplier(Supplier) for equality so as to ensure that the supplier being added or updated is unique in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * terms of identity in the UniqueSupplierList. However, the removal of a supplier uses Supplier#equals(Object) so as to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * ensure that the supplier with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * @see Supplier#isSameSupplier(Supplier)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UniqueSupplierList implements Iterable\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final ObservableList\u003cSupplier\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final ObservableList\u003cSupplier\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if the list contains an equivalent supplier as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean contains(Supplier toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSupplier);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds a supplier to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The supplier must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void add(Supplier toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the supplier {@code target} in the list with {@code editedSupplier}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The supplier identity of {@code editedSupplier} must not be the same as another existing supplier in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(target, editedSupplier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new SupplierNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!target.isSameSupplier(editedSupplier) \u0026\u0026 contains(editedSupplier)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.set(index, editedSupplier);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Removes the equivalent supplier from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * The supplier must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void remove(Supplier toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new SupplierNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers(UniqueSupplierList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Replaces the contents of this list with {@code suppliers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code suppliers} must not contain duplicate suppliers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireAllNonNull(suppliers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!suppliersAreUnique(suppliers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DuplicateSupplierException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        internalList.setAll(suppliers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cSupplier\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Iterator\u003cSupplier\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                || (other instanceof UniqueSupplierList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueSupplierList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if {@code suppliers} contains only unique suppliers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private boolean suppliersAreUnique(List\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (int i \u003d 0; i \u003c suppliers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            for (int j \u003d i + 1; j \u003c suppliers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                if (suppliers.get(i).isSameSupplier(suppliers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 133,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/supplier/exceptions/DuplicateSupplierException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Signals that the operation will result in duplicate Suppliers (Suppliers are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class DuplicateSupplierException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public DuplicateSupplierException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        super(\"Operation would result in duplicate suppliers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 10,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/supplier/exceptions/SupplierNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Signals that the operation is unable to find the specified supplier."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class SupplierNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public SupplierNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(\"The supplier is not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "qlchan24": 4,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Contains utility methods for populating {@code Clinic} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Supplier[] getSampleSuppliers() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Supplier[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"Alex Yeoh Ltd\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"Bernice Yu Pte Ltd\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"Charlotte Oliveiro Ltd\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"David Li Pte Ltd\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"Irfan Ibrahim Pte Ltd\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new Supplier(new Name(\"Roy Balakrishnan Pte Ltd\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                getProductSet(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", new String[]{\"fever\"}))),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Warehouse[] getSampleWarehouses() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Warehouse[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"Alex Yeoh warehouse\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 10))),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"Bernice Yu warehouse\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 20))),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"Charlotte Oliveiro warehouse\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 30))),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"David Li warehouse\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 100))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"Irfan Ibrahim warehouse\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 50))),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            new Warehouse(new Name(\"Roy Balakrishnan warehouse\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"), new Remark(\"long term partner\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    getProductSetForWarehouse(new HashSet\u003cProduct\u003e(), Map.of(\"Panadol\", 70))),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static ReadOnlyClinic getSampleClinic() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic sampleAb \u003d new Clinic();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (Supplier sampleSupplier : getSampleSuppliers()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            sampleAb.addSupplier(sampleSupplier);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (Warehouse sampleWarehouse : getSampleWarehouses()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            sampleAb.addWarehouse(sampleWarehouse);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns a product set containing the hashmap of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static Set\u003cProduct\u003e getProductSet(Set\u003cProduct\u003e productSet, Map\u003cString, String[]\u003e productMap) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (String productName:productMap.keySet()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Set\u003cTag\u003e productTags \u003d getTagSet(productMap.get(productName));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Product product \u003d new Product(new Name(productName), productTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productSet.add(product);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return productSet;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns a product set containing the hashmap of strings given."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public static Set\u003cProduct\u003e getProductSetForWarehouse(Set\u003cProduct\u003e productSet, Map\u003cString, Integer\u003e productMap) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (String productName:productMap.keySet()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Product product \u003d new Product(new Name(productName), productMap.get(productName));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productSet.add(product);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return productSet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 29,
      "qlchan24": 38,
      "zhengweii": 14,
      "-": 26,
      "jeffreytjs": 8
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/warehouse/UniqueWarehouseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.warehouse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.exceptions.DuplicateWarehouseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.exceptions.WarehouseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * A list of warehouses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * A warehouse is considered unique by comparing using {@code Warehouse#isSameWarehouse(Warehouse)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * and updating of warehouses uses Warehouse#isSameWarehouse(Warehouse) for equality so as to ensure that the warehouse"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueWarehouseList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * However, the removal of a warehouse uses Warehouse#equals(Object) so as to ensure that the warehouse with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * @see Warehouse#isSameWarehouse(Warehouse)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class UniqueWarehouseList implements Iterable\u003cWarehouse\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final ObservableList\u003cWarehouse\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final ObservableList\u003cWarehouse\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if the list contains an equivalent warehouses as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean contains(Warehouse toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameWarehouse);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds a warehouse to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void add(Warehouse warehouseToAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(warehouseToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (contains(warehouseToAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DuplicateWarehouseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        internalList.add(warehouseToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the warehouse {@code target} in the list with {@code editedWarehouse}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse identity of {@code editedWarehouse} must not be the same as another existing warehouse in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireAllNonNull(target, editedWarehouse);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new WarehouseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!target.isSameWarehouse(editedWarehouse) \u0026\u0026 contains(editedWarehouse)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DuplicateWarehouseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        internalList.set(index, editedWarehouse);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Removes the equivalent warehouse from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The warehouse must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void remove(Warehouse toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new WarehouseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the current list of warehouses in {@code internalList} with a new {@code replacement}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses(UniqueWarehouseList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Replaces the contents of this list with {@code warehouses}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * {@code warehouses} must not contain duplicate warehouses."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses(List\u003cWarehouse\u003e warehouses) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireAllNonNull(warehouses);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!warehousesAreUnique(warehouses)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DuplicateWarehouseException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        internalList.setAll(warehouses);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cWarehouse\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Iterator\u003cWarehouse\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                || (other instanceof UniqueWarehouseList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u0026\u0026 internalList.equals(((UniqueWarehouseList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if {@code warehouses} contains only unique warehouses."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private boolean warehousesAreUnique(List\u003cWarehouse\u003e warehouses) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (int i \u003d 0; i \u003c warehouses.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c warehouses.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                if (warehouses.get(i).isSameWarehouse(warehouses.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 135,
      "qlchan24": 1,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/warehouse/Warehouse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.warehouse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Represents a Warehouse in the CLI-nic app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Warehouse {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // Each Warehouse identified by its unique name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Set\u003cProduct\u003e products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updated warehouse with new product information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Warehouse(Name name, Phone phone, Address address, Remark remark, Set\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        requireAllNonNull(name, phone, address, remark, products);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.products.addAll(products);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an immutable product set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A set of products stored in the warehouse."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Set\u003cProduct\u003e getProducts() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Collections.unmodifiableSet(products);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a product with the {@code targetName} stored in the warehouse."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The product matching the target name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws ProductNotFoundException if these is no product in the list matching the name asked."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Product getProductByName(Name targetName) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product matchedProduct \u003d products.stream().filter(p -\u003e p.getProductName().equals(targetName))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .findFirst().orElseThrow(ProductNotFoundException::new);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return matchedProduct;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Removes a product sold by the Warehouse."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return a new Warehouse with the {@code targetProduct} removed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Warehouse removeProduct(Product targetProduct) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assert this.getProducts().contains(targetProduct) : \"Target product not in list\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Set\u003cProduct\u003e updatedProductSet \u003d new HashSet\u003c\u003e(this.getProducts());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        updatedProductSet.remove(targetProduct); // removes the matching product"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse updatedWarehouse \u003d new Warehouse(this.getName(), this.getPhone(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.getAddress(), this.getRemark(), updatedProductSet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return updatedWarehouse;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns true if a product with the {@code targetName} is found in the warehouse."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasProductWithName(Name targetName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return products.stream().anyMatch(p -\u003e p.getProductName().equals(targetName));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if both warehouses of the same name."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * This defines a weaker notion of equality between two warehouses."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean isSameWarehouse(Warehouse otherWarehouse) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (otherWarehouse \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return otherWarehouse !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 otherWarehouse.getName().equals(getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns true if both warehouses have the same identity and data fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * This defines a stronger notion of equality between two warehouses."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!(other instanceof Warehouse)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse otherWarehouse \u003d (Warehouse) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return otherWarehouse.getName().equals(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 otherWarehouse.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 otherWarehouse.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 otherWarehouse.getProducts().equals(getProducts())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 otherWarehouse.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Objects.hash(name, phone, address, remark, products);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        builder.append(\" Products: \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        getProducts().forEach(s -\u003e builder.append(s.toString()).append(\" \"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 152,
      "qlchan24": 8,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/warehouse/WarehousePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "package seedu.clinic.model.warehouse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Tests whether the {@code Name}, {@code Remark} or any of the {@code Product} stored in {@code Warehouse} matches any"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "public class WarehousePredicate implements Predicate\u003cWarehouse\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e nameKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e productKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Optional\u003cList\u003cString\u003e\u003e remarkKeywords \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Constructs a new {@code WarehousePredicate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public WarehousePredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e productKeywords,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            List\u003cString\u003e remarkKeywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (nameKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.nameKeywords \u003d Optional.ofNullable(nameKeywords);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (productKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.productKeywords \u003d Optional.ofNullable(productKeywords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (remarkKeywords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            this.remarkKeywords \u003d Optional.ofNullable(remarkKeywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public boolean test(Warehouse warehouse) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (nameKeywords.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            boolean match \u003d nameKeywords.get().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(warehouse.getName().fullName, keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (productKeywords.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            Product[] products \u003d warehouse.getProducts().toArray(Product[]::new);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            for (int i \u003d 0; i \u003c products.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                String productName \u003d products[i].getProductName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                boolean match \u003d productKeywords.get().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(productName, keyword));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                if (match) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        if (remarkKeywords.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            return remarkKeywords.get().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(warehouse.getRemark().value, keyword));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                || (other instanceof WarehousePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 nameKeywords.equals(((WarehousePredicate) other).nameKeywords)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 productKeywords.equals(((WarehousePredicate) other).productKeywords)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u0026\u0026 remarkKeywords.equals(((WarehousePredicate) other).remarkKeywords)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 78
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/warehouse/exceptions/DuplicateWarehouseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.warehouse.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Signals that the operation will result in duplicate Warehouses (Warehouses are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DuplicateWarehouseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DuplicateWarehouseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(\"Operation would result in duplicate warehouses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 10,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/model/warehouse/exceptions/WarehouseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.warehouse.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Signals that the operation is unable to find the specified warehouse."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class WarehouseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(\"The warehouse is not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "qlchan24": 1,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/ClinicStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Represents a storage for {@link Clinic}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public interface ClinicStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Path getClinicFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns Clinic data as a {@link ReadOnlyClinic}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Optional\u003cReadOnlyClinic\u003e readClinic() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @see #getClinicFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Saves the given {@link ReadOnlyClinic} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param clinic cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    void saveClinic(ReadOnlyClinic clinic) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @see #saveClinic(ReadOnlyClinic)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 46
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonAdaptedMacro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.SavedCommandString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Jackson-friendly version of {@link Macro}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "class JsonAdaptedMacro {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Macro\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final String savedCommandString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code JsonAdaptedMacro} with the given macro details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedMacro(@JsonProperty(\"alias\") String alias,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            @JsonProperty(\"savedCommandString\") String savedCommandString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.savedCommandString \u003d savedCommandString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts a given {@code Macro} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedMacro(Macro source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        alias \u003d source.getAlias().aliasString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        savedCommandString \u003d source.getSavedCommandString().internalString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts this Jackson-friendly adapted macro object into the model\u0027s {@code Macro} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted macro."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Macro toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (alias \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Alias.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!Alias.isValidAlias(alias)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(Alias.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Alias modelAlias \u003d new Alias(alias);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (savedCommandString \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    SavedCommandString.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!SavedCommandString.isValidSavedCommandString(savedCommandString)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(SavedCommandString.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final SavedCommandString modelSavedCommandString \u003d new SavedCommandString(savedCommandString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Macro(modelAlias, modelSavedCommandString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qlchan24": 67
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonAdaptedProduct.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class JsonAdaptedProduct {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Product\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code JsonAdaptedProduct} with the given product details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedProduct(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                              @JsonProperty(\"quantity\") int quantity) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts a given {@code Product} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        name \u003d source.getProductName().fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        quantity \u003d source.getProductQuantity();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        tagged.addAll(source.getProductTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts this Jackson-friendly adapted product object into the model\u0027s {@code Product} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted product."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Product toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final List\u003cTag\u003e productTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Product.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(String.format(Product.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(productTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Product(modelName, quantity, modelTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 12,
      "qlchan24": 60,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonAdaptedSupplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Jackson-friendly version of {@link Supplier}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "class JsonAdaptedSupplier {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Supplier\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final List\u003cJsonAdaptedProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code JsonAdaptedSupplier} with the given supplier details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedSupplier(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            @JsonProperty(\"products\") List\u003cJsonAdaptedProduct\u003e products) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (products !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.products.addAll(products);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts a given {@code Supplier} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonAdaptedSupplier(Supplier source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        products.addAll(source.getProducts().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts this Jackson-friendly adapted supplier object into the model\u0027s {@code Supplier} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted supplier."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Supplier toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final List\u003cProduct\u003e supplierProducts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (JsonAdaptedProduct product : products) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            supplierProducts.add(product.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Set\u003cProduct\u003e modelProducts \u003d new HashSet\u003c\u003e(supplierProducts);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Supplier(modelName, modelPhone, modelEmail, modelRemark, modelProducts);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 30,
      "-": 71,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 1,
      "-": 45,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonAdaptedWarehouse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Jackson-friendly version of {@link Warehouse}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class JsonAdaptedWarehouse {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Warehouse\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final List\u003cJsonAdaptedProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Constructs a {@code JsonAdaptedWarehouse} with the given warehouse details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public JsonAdaptedWarehouse(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                               @JsonProperty(\"address\") String address, @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                               @JsonProperty(\"products\") List\u003cJsonAdaptedProduct\u003e products) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (products !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.products.addAll(products);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Converts a given {@code Warehouse} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public JsonAdaptedWarehouse(Warehouse source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        products.addAll(source.getProducts().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Converts this Jackson-friendly adapted warehouse object into the model\u0027s {@code Warehouse} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted warehouse."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Warehouse toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final List\u003cProduct\u003e warehouseProducts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (JsonAdaptedProduct product : products) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            warehouseProducts.add(product.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Set\u003cProduct\u003e modelProducts \u003d new HashSet\u003c\u003e(warehouseProducts);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Warehouse(modelName, modelPhone, modelAddress, modelRemark, modelProducts);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 109
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonClinicStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * A class to access Clinic data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class JsonClinicStorage implements ClinicStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonClinicStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public JsonClinicStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Optional\u003cReadOnlyClinic\u003e readClinic() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return readClinic(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Similar to {@link #readClinic()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Optional\u003cJsonSerializableClinic\u003e jsonClinic \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                filePath, JsonSerializableClinic.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (!jsonClinic.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return Optional.of(jsonClinic.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic(ReadOnlyClinic clinic) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        saveClinic(clinic, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Similar to {@link #saveClinic(ReadOnlyClinic)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        requireNonNull(clinic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableClinic(clinic), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "jeffreytjs": 26
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonSerializableClinic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * An Immutable Clinic that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "@JsonRootName(value \u003d \"clinic\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "class JsonSerializableClinic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUPPLIER \u003d \"Suppliers list contains duplicate supplier(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WAREHOUSE \u003d \"Warehouses list contains duplicate warehouse(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final List\u003cJsonAdaptedSupplier\u003e suppliers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final List\u003cJsonAdaptedWarehouse\u003e warehouses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Constructs a {@code JsonSerializableClinic} with the given suppliers and warehouses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public JsonSerializableClinic(@JsonProperty(\"suppliers\") List\u003cJsonAdaptedSupplier\u003e suppliers,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                                  @JsonProperty(\"warehouses\") List\u003cJsonAdaptedWarehouse\u003e warehouses) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.suppliers.addAll(suppliers);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.warehouses.addAll(warehouses);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Converts a given {@code ReadOnlyClinic} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableClinic}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public JsonSerializableClinic(ReadOnlyClinic source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        suppliers.addAll(source.getSupplierList().stream().map(JsonAdaptedSupplier::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouses.addAll(source.getWarehouseList().stream().map(JsonAdaptedWarehouse::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Converts this clinic into the model\u0027s {@code Clinic} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Clinic toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (JsonAdaptedSupplier jsonAdaptedSupplier : suppliers) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Supplier supplier \u003d jsonAdaptedSupplier.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (clinic.hasSupplier(supplier)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            clinic.addSupplier(supplier);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (JsonAdaptedWarehouse jsonAdaptedWarehouse : warehouses) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Warehouse warehouse \u003d jsonAdaptedWarehouse.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (clinic.hasWarehouse(warehouse)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            clinic.addWarehouse(warehouse);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 23,
      "qlchan24": 5,
      "-": 34,
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonSerializableUserMacros.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * An Immutable Macro list that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "@JsonRootName(value \u003d \"userMacros\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "class JsonSerializableUserMacros {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MACRO \u003d \"List contains duplicate macros(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final List\u003cJsonAdaptedMacro\u003e macros \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Constructs a {@code JsonSerializableUserMacros} with the given macros."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonSerializableUserMacros(@JsonProperty(\"macros\") List\u003cJsonAdaptedMacro\u003e macros) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.macros.addAll(macros);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts a given {@code ReadOnlyUserMacros} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableUserMacros}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonSerializableUserMacros(ReadOnlyUserMacros source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        macros.addAll(source.getMacroList().stream().map(JsonAdaptedMacro::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Converts this userMacros into the model\u0027s {@code UserMacros} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacros toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacros userMacros \u003d new UserMacros();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (JsonAdaptedMacro jsonAdaptedMacro : macros) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Macro macro \u003d jsonAdaptedMacro.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (userMacros.hasMacro(macro)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MACRO);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            userMacros.addMacro(macro);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 62
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonUserMacrosStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A class to access UserMacros stored in the hard disk as a json file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class JsonUserMacrosStorage implements UserMacrosStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserMacrosStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public JsonUserMacrosStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cReadOnlyUserMacros\u003e readUserMacros() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return readUserMacros(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Similar to {@link #readUserMacros()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cReadOnlyUserMacros\u003e readUserMacros(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Optional\u003cJsonSerializableUserMacros\u003e jsonUserMacros \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                filePath, JsonSerializableUserMacros.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (jsonUserMacros.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return Optional.of(jsonUserMacros.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void saveUserMacros(ReadOnlyUserMacros userMacros) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        saveUserMacros(userMacros, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Similar to {@link #saveUserMacros(ReadOnlyUserMacros)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void saveUserMacros(ReadOnlyUserMacros userMacros, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(userMacros);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserMacros(userMacros), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 80
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public interface Storage extends ClinicStorage, UserPrefsStorage, UserMacrosStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Path getUserMacrosFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Optional\u003cReadOnlyUserMacros\u003e readUserMacros() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void saveUserMacros(ReadOnlyUserMacros userMacros) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Path getClinicFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    Optional\u003cReadOnlyClinic\u003e readClinic() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    void saveClinic(ReadOnlyClinic clinic) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 11,
      "-": 23,
      "jeffreytjs": 8
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Manages storage of Clinic data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private ClinicStorage clinicStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private UserMacrosStorage userMacrosStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ClinicStorage}, {@code UserPrefStorage},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * and {@code UserMacrosStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public StorageManager(ClinicStorage clinicStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            UserMacrosStorage userMacrosStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.clinicStorage \u003d clinicStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.userMacrosStorage \u003d userMacrosStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserMacros methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacrosStorage.getUserMacrosFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cReadOnlyUserMacros\u003e readUserMacros() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return readUserMacros(userMacrosStorage.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cReadOnlyUserMacros\u003e readUserMacros(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacrosStorage.readUserMacros(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void saveUserMacros(ReadOnlyUserMacros userMacros) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        saveUserMacros(userMacros, userMacrosStorage.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void saveUserMacros(ReadOnlyUserMacros userMacros, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacrosStorage.saveUserMacros(userMacros, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clinic methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinicStorage.getClinicFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Optional\u003cReadOnlyClinic\u003e readClinic() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return readClinic(clinicStorage.getClinicFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Optional\u003cReadOnlyClinic\u003e readClinic(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinicStorage.readClinic(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic(ReadOnlyClinic clinic) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        saveClinic(clinic, clinicStorage.getClinicFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinicStorage.saveClinic(clinic, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 35,
      "-": 57,
      "jeffreytjs": 20
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/UserMacrosStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Represents a storage for {@link UserMacros}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public interface UserMacrosStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the file path of the UserMacros data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Path getUserMacrosFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns user macro data as a {@link ReadOnlyUserMacros}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Optional\u003cReadOnlyUserMacros\u003e readUserMacros() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @see #getUserMacrosFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    Optional\u003cReadOnlyUserMacros\u003e readUserMacros(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Saves the given {@link seedu.clinic.model.ReadOnlyUserMacros} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param userMacros cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void saveUserMacros(ReadOnlyUserMacros userMacros) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @see #saveUserMacros(ReadOnlyUserMacros)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void saveUserMacros(ReadOnlyUserMacros userMacros, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 44
    }
  },
  {
    "path": "src/main/java/seedu/clinic/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Represents a storage for {@link seedu.clinic.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Saves the given {@link seedu.clinic.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "         * @see seedu.clinic.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-w14-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 1,
      "-": 99,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private SupplierListPanel supplierListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private WarehouseListPanel warehouseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // private SupplierListPanel supplierListPanel2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private StackPane supplierListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private StackPane warehouseListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    //private StackPane supplierListPanelPlaceholder2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        supplierListPanel \u003d new SupplierListPanel(logic.getFilteredSupplierList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        supplierListPanelPlaceholder.getChildren().add(supplierListPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouseListPanel \u003d new WarehouseListPanel(logic.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouseListPanelPlaceholder.getChildren().add(warehouseListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // supplierListPanel2 \u003d new SupplierListPanel(logic.getFilteredSupplierList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // supplierListPanelPlaceholder2.getChildren().add(supplierListPanel2.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierListPanel getSupplierListPanel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return supplierListPanel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseListPanel getWarehouseListPanel() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return warehouseListPanel;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @see seedu.clinic.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 10,
      "qlchan24": 6,
      "-": 181,
      "jeffreytjs": 8
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/SupplierCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * An UI component that displays information of a {@code Supplier}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SupplierCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String FXML \u003d \"SupplierListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public final Supplier supplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Label noProductsLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private VBox products;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private TitledPane productsTitledPane;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code supplierCode} with the given {@code Supplier} and index to display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierCard(Supplier supplier, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        name.setText(supplier.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        phone.setText(supplier.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        //remark.getChildren().add(new Label(supplier.getRemark().value));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        remark.setText(supplier.getRemark().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        remark.setWrapText(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        email.setText(supplier.getEmail().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        supplier.getProducts().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .sorted(Comparator.comparing(product -\u003e product.getProductName().fullName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .forEach(product -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    products.getChildren().add(new Label(product.getProductName().fullName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    product.getProductTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        //Keep products pane closed by default"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        productsTitledPane.setExpanded(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int productIndex \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (!supplier.getProducts().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            noProductsLabel.setVisible(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            for (Product product : supplier.getProducts()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                VBox productBox \u003d new VBox();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productBox.setMaxWidth(400);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                FlowPane productTags \u003d new FlowPane();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                productTags.setId(\"tags\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Label productName \u003d new Label(productIndex + \". \" + product.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                productName.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productName.setMaxWidth(400);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                productBox.getChildren().add(productName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                product.getProductTags().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            tagLabel.setWrapText(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            tagLabel.setMaxWidth(400);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                            productTags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                productBox.getChildren().add(productTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                products.getChildren().add(productBox);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productIndex++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (!(other instanceof SupplierCard)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        SupplierCard card \u003d (SupplierCard) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                \u0026\u0026 supplier.equals(card.supplier);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 13,
      "tohyuting": 24,
      "-": 54,
      "jeffreytjs": 31
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/SupplierListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Panel containing the list of Suppliers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SupplierListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String FXML \u003d \"SupplierListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SupplierListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private ListView\u003cSupplier\u003e supplierListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code SupplierListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierListPanel(ObservableList\u003cSupplier\u003e supplierList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        supplierListView.setItems(supplierList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        supplierListView.setCellFactory(listView -\u003e new SupplierListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        supplierListView.setPlaceholder(new Label(\"There are no suppliers yet.\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Supplier} using a {@code SupplierCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    class SupplierListViewCell extends ListCell\u003cSupplier\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        protected void updateItem(Supplier supplier, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            super.updateItem(supplier, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            if (empty || supplier \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                setGraphic(new SupplierCard(supplier, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 46,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/CLInic_Logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/WarehouseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * An UI component that displays information of a {@code Warehouse}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class WarehouseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String FXML \u003d \"WarehouseListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public final Warehouse warehouse;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Label noProductsLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private VBox products;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private TitledPane productsTitledPane;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a {@code WarehouseCard} with the given {@code Warehouse} and index to display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseCard(Warehouse warehouse, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        name.setText(warehouse.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        phone.setText(warehouse.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // remark.getChildren().add(new Label(warehouse.getRemark().value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        remark.setText(warehouse.getRemark().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        remark.setWrapText(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        address.setText(warehouse.getAddress().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        warehouse.getProducts().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .sorted(Comparator.comparing(product -\u003e product.toStringForWareHouse()))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .forEach(product -\u003e products.getChildren().add(new Label(product.toStringForWareHouse())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        //Keep products pane closed by default"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        productsTitledPane.setExpanded(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int productIndex \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (!warehouse.getProducts().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            noProductsLabel.setVisible(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            for (Product product : warehouse.getProducts()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                VBox productBox \u003d new VBox();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productBox.setMaxWidth(400);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                FlowPane productTags \u003d new FlowPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productTags.setId(\"tags\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Label productName \u003d new Label(productIndex + \". \" + product.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productName.setWrapText(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productName.setMaxWidth(400);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productBox.getChildren().add(productName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                product.getProductTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            tagLabel.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            tagLabel.setMaxWidth(400);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            productTags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productBox.getChildren().add(productTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                products.getChildren().add(productBox);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productIndex++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!(other instanceof WarehouseCard)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        WarehouseCard card \u003d (WarehouseCard) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u0026\u0026 warehouse.equals(card.warehouse);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 68,
      "tohyuting": 1,
      "jeffreytjs": 46
    }
  },
  {
    "path": "src/main/java/seedu/clinic/ui/WarehouseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * Panel containing the list of Warehouses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class WarehouseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String FXML \u003d \"WarehouseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WarehouseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private ListView\u003cWarehouse\u003e warehouseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a {@code WarehouseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseListPanel(ObservableList\u003cWarehouse\u003e warehouseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouseListView.setItems(warehouseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        warehouseListView.setCellFactory(listView -\u003e new WarehouseListViewCall());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        warehouseListView.setPlaceholder(new Label(\"There are no warehouses yet.\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Warehouse} using a {@code WarehouseCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    class WarehouseListViewCall extends ListCell\u003cWarehouse\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        protected void updateItem(Warehouse warehouse, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            super.updateItem(warehouse, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (empty || warehouse \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                setGraphic(new WarehouseCard(warehouse, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 48,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/resources/view/BlueProTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     -fx-background-color: derive(#233d4d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     -fx-border-color: derive(#233d4d, 10%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: derive(#192b36, 50%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: derive(#192b36, 20%);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #99CAF0; /* bluish */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #fefefe; /* white */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".table-row-cell:filled:selected {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #75a2c7; /* on click */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #E6B89C; /* light blue for tags */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#remark {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#remark .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #E6B89C; /* light blue for tags */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#warehouseListView {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 1, 0, 0, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#supplierListView {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 1, 0, 0, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 106
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".table-view .column-header,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".button:disabled,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".button:default:disabled {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".button:pressed,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".button:default:hover:pressed {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar .increment-button,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar:vertical .increment-arrow,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: #f70d1a;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#products {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    background-color: #424d5f;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#filterField,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#supplierListPanel,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#supplierWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".remark {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 9,
      "-": 306,
      "jeffreytjs": 63
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background: #bdbdbd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #99CAF0; /* bluish */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #FEFEFE; /* white */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #75a2c7; /* on click */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".table-row-cell:filled:selected {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #6FB6ED; /* light blue for tags */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ".remark {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-color: #6FB6ED; /* light blue for tags */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#warehouseListView {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 1, 0, 0, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "#supplierListView {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 1, 0, 0, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 1,
      "jeffreytjs": 86
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "         title\u003d\"CLI-nic\" minWidth\u003d\"1200\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cImage url\u003d\"@/images/CLInic_Logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u003cVBox fx:id\u003d\"warehouseList\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"warehouseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    \u003cVBox fx:id\u003d\"supplierList\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"supplierListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 5,
      "zhengweii": 12,
      "-": 48,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/SupplierListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"productsTitledPane\" text\u003d\"Products\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "          \u003cVBox fx:id\u003d\"products\" styleClass\u003d\"products\" minWidth\u003d\"10\" prefWidth\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "          \u003cLabel fx:id\u003d\"noProductsLabel\" styleClass\u003d\"cell_small_label\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                 text\u003d\"This supplier has no products.\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jeffreytjs": 9
    }
  },
  {
    "path": "src/main/resources/view/SupplierListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \u003cListView fx:id\u003d\"supplierListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/WarehouseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            \u003cTitledPane fx:id\u003d\"productsTitledPane\" text\u003d\"Products\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    \u003cVBox fx:id\u003d\"products\" minWidth\u003d\"10\" prefWidth\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    \u003cLabel fx:id\u003d\"noProductsLabel\" styleClass\u003d\"cell_small_label\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                           text\u003d\"This warehouse has no products.\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 34,
      "jeffreytjs": 9
    }
  },
  {
    "path": "src/main/resources/view/WarehouseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \u003cListView fx:id\u003d\"warehouseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/duplicateSupplierClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\": \"Trusted company\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"tagged\": [\"fever\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\": \"Focuses on skin medication\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 18
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/duplicateWarehouseClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"alice address\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"long term warehouse\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"johnd address\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"biggest warehouse\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 20"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 22
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/invalidAndValidSupplierClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"suppliers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\": \"Valid Supplier\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\": \"Trusted seller\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\": \"Supplier With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\": \"Rare medicine\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouse\": [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/invalidAndValidWarehouseClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\": [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouse\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"Valid Warehouse\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\": \"hans address\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\": \"Trusted warehouse\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"Warehouse With Invalid Phone Field\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\": \"hans address\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\": \"small warehouse\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 14
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/invalidSupplierClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"suppliers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\": \"Supplier with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\": \"Trusted seller\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouse\": [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 2,
      "zhengweii": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonClinicStorageTest/invalidWarehouseClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\": [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouse\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"@ invalid name warehouse\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\": \"hans address\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\": \"Biggest warehouse\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "zhengweii": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/duplicateSupplierClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"suppliers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\": \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\": \"Trusted company\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"tagged\": [\"fever\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\": \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\": \"Focuses on skin medication\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 9,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/duplicateWarehouseClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"alice address\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"long term warehouse\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"johnd address\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\" : \"biggest warehouse\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 20"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 21,
      "zhengweii": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/invalidSupplierClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"suppliers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remarks\": \"Focuses on skin medication\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/invalidWarehouseClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\": [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\": \" invalid address\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remarks\": \"Focuses on skin medication\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/typicalSuppliersClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  \"_comment\": \"Clinic save file which contains the same supplier values as in TypicalSuppliers#getTypicalSupplierOnlyClinic()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"suppliers\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Alice Pauline Ltd\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\" : \"long term supplier\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"tagged\": [\"fever\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Benson Meier Ltd\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\" : \"trusted supplier\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"tagged\": [\"fever\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Carl Kurz Ltd\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\" : \"cheap\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"products\" : [{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Mask\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"black\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Thermometer\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"digital\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Daniel Meier Ltd\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\" : \"premium prices\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "      \"tagged\": [\"fever\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Elle Meyer Ltd\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\" : \"industry leader\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"products\" : [{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Mask\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"black\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Medical Glove\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"rubber\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"Fiona Kunz Ltd\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\" : \"cheap and fast deliveries\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"products\" : [{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Mask\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"black\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Needle\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"1mm\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Cough Syrup\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"tagged\": [\"cough\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"name\" : \"George Best Ltd\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"remark\" : \"frequent discount\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    \"products\" : [ ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\" : [ ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "qlchan24": 26,
      "tohyuting": 1,
      "zhengweii": 26,
      "-": 22
    }
  },
  {
    "path": "src/test/data/JsonSerializableClinicTest/typicalWarehousesClinic.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "  \"_comment\": \"Clinic save file which contains the same supplier values as in TypicalWarehouses#getTypicalWarehouseOnlyClinic()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"suppliers\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  \"warehouses\": [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    \"name\" : \"Alice Warehouse\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"alice address\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\" : \"Warehouse 1 biggest\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Gauze\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 100"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse Benson\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94351453\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"benson address\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"remark\" : \"Warehouse 2 near central\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Towel\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 200"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse Carl\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94361253\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"carl address\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"Warehouse 3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"products\" : [ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Cough Syrup\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"quantity\": 20"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse Daniel\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94351233\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"daniel address\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"Warehouse 4\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\": [ {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse Elle\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"94651253\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"elle address\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"Warehouse 5\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    \"products\" : [ {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Cough Syrup\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"quantity\": 30"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Medical Glove\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"quantity\": 50"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse Fiona\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"92351253\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"fiona address\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"Warehouse 10\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\" : [ {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Flu Syrup\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 1000"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Medical Glove\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"quantity\": 50"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"name\": \"Syringe\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "      \"quantity\": 500"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"name\" : \"Warehouse George\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"phone\" : \"84351253\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"address\" : \"george address\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"remark\" : \"Warehouse to be removed\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    \"products\" : [ {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"name\": \"Panadol\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "      \"quantity\": 50"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 53,
      "tohyuting": 2,
      "zhengweii": 22
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"clinicFilePath\" : \"clinic.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"userMacrosFilePath\" : \"userMacros.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"clinicFilePath\" : \"clinic.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "  \"userMacrosFilePath\" : \"userMacros.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/clinic/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final Index fifthSupplierIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        final Index ninthWarehouseIndex \u003d Index.fromOneBased(9);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(fifthSupplierIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(fifthSupplierIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(ninthWarehouseIndex.equals(Index.fromOneBased(9)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(ninthWarehouseIndex.equals(Index.fromZeroBased(8)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(fifthSupplierIndex.equals(fifthSupplierIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(ninthWarehouseIndex.equals(ninthWarehouseIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(fifthSupplierIndex.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(fifthSupplierIndex.equals(5.0f));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(ninthWarehouseIndex.equals(9.0f));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(fifthSupplierIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(ninthWarehouseIndex.equals(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 6,
      "qlchan24": 7,
      "-": 51,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/CLInic_Logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/java/seedu/clinic/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "//import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import static seedu.clinic.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import static seedu.clinic.testutil.TypicalSupplier.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.JsonClinicStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.storage.JsonUserMacrosStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonClinicStorage clinicStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new JsonClinicStorage(temporaryFolder.resolve(\"clinic.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonUserMacrosStorage userMacrosStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonUserMacrosStorage(temporaryFolder.resolve(\"userMacros.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        StorageManager storage \u003d new StorageManager(clinicStorage, userPrefsStorage, userMacrosStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String deleteCommand \u003d \"delete ct/s i/9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        deleteCommand \u003d \"delete ct/w i/9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Setup LogicManager with JsonClinicIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonClinicStorage clinicStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new JsonClinicIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionClinic.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(clinicStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder(AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel.addSupplier(expectedSupplier);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getFilteredSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredSupplierList().remove(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getFilteredWarehouseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredWarehouseList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getMacroList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getMacroList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), model.getUserMacros());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for Clinic data."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class JsonClinicIoExceptionThrowingStub extends JsonClinicStorage {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        private JsonClinicIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void saveClinic(ReadOnlyClinic clinic, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for User Macro data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static class JsonUserMacrosIoExceptionThrowingStub extends JsonUserMacrosStorage {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private JsonUserMacrosIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void saveUserMacros(ReadOnlyUserMacros userMacros, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 17,
      "qlchan24": 23,
      "-": 126,
      "jeffreytjs": 30
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_newSupplier_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel.addSupplier(validSupplier);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertCommandSuccess(new AddCommand(validSupplier), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUPPLIER_SUCCESS, validSupplier), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_duplicateSupplier_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Supplier supplierInList \u003d model.getClinic().getSupplierList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertCommandFailure(new AddCommand(supplierInList), model, AddCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_newWarehouse_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse validWarehouse \u003d new WarehouseBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        expectedModel.addWarehouse(validWarehouse);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertCommandSuccess(new AddCommand(validWarehouse), model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_WAREHOUSE_SUCCESS, validWarehouse), expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_duplicateWarehouse_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse warehouseInList \u003d model.getClinic().getWarehouseList().get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertCommandFailure(new AddCommand(warehouseInList), model, AddCommand.MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 10,
      "-": 26,
      "jeffreytjs": 29
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void constructor_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand((Supplier) null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void constructor_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand((Warehouse) null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_supplierAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubAcceptingSupplierAdded modelStub \u003d new ModelStubAcceptingSupplierAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validSupplier).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUPPLIER_SUCCESS, validSupplier),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(Arrays.asList(validSupplier), modelStub.suppliersAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_warehouseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ModelStubAcceptingWarehouseAdded modelStub \u003d new ModelStubAcceptingWarehouseAdded();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse validWarehouse \u003d new WarehouseBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validWarehouse).execute(modelStub);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_WAREHOUSE_SUCCESS, validWarehouse),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(Arrays.asList(validWarehouse), modelStub.warehousesAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_duplicateSupplier_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier validSupplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validSupplier);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSupplier(validSupplier);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_SUPPLIER, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_duplicateWarehouse_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse validWarehouse \u003d new WarehouseBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validWarehouse);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithWarehouse(validWarehouse);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_WAREHOUSE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier alice \u003d new SupplierBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier bob \u003d new SupplierBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse alpha \u003d new WarehouseBuilder().withName(\"Alpha\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse beta \u003d new WarehouseBuilder().withName(\"Beta\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        AddCommand addAlphaCommand \u003d new AddCommand(alpha);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        AddCommand addBetaCommand \u003d new AddCommand(beta);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(addAlphaCommand, addAlphaCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(addAliceCommandCopy, addAliceCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        AddCommand addAlphaCommandCopy \u003d new AddCommand(alpha);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(addAlphaCommandCopy, addAlphaCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addAliceCommand, 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addAlphaCommand, 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addAliceCommand, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addAlphaCommand, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addBobCommand, addAliceCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // different warehouse -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotEquals(addBetaCommand, addAlphaCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class ModelStub implements Model {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ReadOnlyUserMacros getUserMacros() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setUserMacrosFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setUserMacros(ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasMacro(Macro macro) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void deleteMacro(Macro target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addMacro(Macro macro) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void setClinicFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void setClinic(ReadOnlyClinic newData) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void deleteWarehouse(Warehouse target) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void addWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public ObservableList\u003cWarehouse\u003e getFilteredWarehouseList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * A Model stub that contains a single supplier."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class ModelStubWithSupplier extends ModelStub {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private final Supplier supplier;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return this.supplier.isSameSupplier(supplier);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * A Model stub that always accept the supplier being added."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class ModelStubAcceptingSupplierAdded extends ModelStub {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        final ArrayList\u003cSupplier\u003e suppliersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return suppliersAdded.stream().anyMatch(supplier::isSameSupplier);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            suppliersAdded.add(supplier);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return new Clinic();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * A Model stub that contains a single warehouse."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class ModelStubWithWarehouse extends ModelStub {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        private final Warehouse warehouse;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ModelStubWithWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return this.warehouse.isSameWarehouse(warehouse);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * A Model stub that always accept the warehouse being added."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static class ModelStubAcceptingWarehouseAdded extends ModelStub {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        final ArrayList\u003cWarehouse\u003e warehousesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return warehousesAdded.stream().anyMatch(warehouse::isSameWarehouse);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public void addWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            warehousesAdded.add(warehouse);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return new Clinic();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 98,
      "-": 125,
      "jeffreytjs": 142
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/AddProductCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.AddProductCommand.MESSAGE_DUPLICATE_PRODUCT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.AddProductCommand.getSupplierByName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.ModelStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class AddProductCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Product VALID_PRODUCT_A \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            getTagSet(VALID_TAG_ANTIBIOTICS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void constructor_nullSupplierName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProductCommand(null, VALID_PRODUCT_A));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void constructor_nullProduct_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProductCommand(ALICE.getName(), null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getSupplierByName_supplierFound_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier modelStub \u003d new ModelStubWithSupplier(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplier \u003d getSupplierByName(ALICE.getName(), modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(supplier, ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void geSupplierByName_supplierNotFound_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier modelStub \u003d new ModelStubWithSupplier(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e getSupplierByName(new Name(VALID_NAME_AMY), modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_supplierNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier modelStub \u003d new ModelStubWithSupplier(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddProductCommand(new Name(VALID_NAME_AMY), VALID_PRODUCT_A)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_productAlreadyExist_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier modelStub \u003d new ModelStubWithSupplier(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product duplicateProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_PANADOL), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AddProductCommand(ALICE.getName(), duplicateProduct)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_PRODUCT, ()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                -\u003e new AddProductCommand(ALICE.getName(), duplicateProduct).execute(modelStub)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_newProduct_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier modelStub \u003d new ModelStubWithSupplier(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        CommandResult commandResult \u003d new AddProductCommand(ALICE.getName(), VALID_PRODUCT_A).execute(modelStub);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Map\u003cString, String[]\u003e productMap \u003d new HashMap\u003cString, String[]\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        productMap.put(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS});"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        productMap.put(VALID_PRODUCT_NAME_PANADOL, new String[]{VALID_TAG_FEVER});"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder(ALICE).withProducts("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                productMap).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(String.format(AddProductCommand.MESSAGE_SUCCESS, editedSupplier.getName().fullName,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                VALID_PRODUCT_A.getProductName()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(editedSupplier, modelStub.supplier);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private class ModelStubWithSupplier extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        private Supplier supplier;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        private Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ModelStubWithSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            requireNonNull(supplier);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            clinic.setSuppliers(List.of(supplier));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return clinic;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.supplier \u003d editedSupplier;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            clinic.setSuppliers(List.of(editedSupplier));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 112,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_emptyClinic_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void execute_nonEmptyClinic_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        expectedModel.setClinic(new Clinic());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 3,
      "-": 20,
      "jeffreytjs": 10
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_SUPPLIER_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_WAREHOUSE_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand.UpdateProductDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForSupplier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForWarehouse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.EditWarehouseDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.testutil.UpdateProductDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // Warehouse test samples"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_NAME_A \u003d \"Warehouse A\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_NAME_B \u003d \"Warehouse B\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PHONE_A \u003d \"11111111\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PHONE_B \u003d \"22222222\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_ADDRESS_A \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_ADDRESS_B \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_REMARK_A \u003d \"Big\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_REMARK_B \u003d \"Small\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PRODUCT_NAME_A \u003d \"Panadol\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PRODUCT_NAME_B \u003d \"Aspirin\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final int VALID_WAREHOUSE_PRODUCT_QUANTITY_A \u003d 10;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final int VALID_WAREHOUSE_PRODUCT_QUANTITY_B \u003d 20;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final int VALID_WAREHOUSE_PRODUCT_QUANTITY_50 \u003d 50;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PRODUCT_TAG_FEVER \u003d \"fever\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String VALID_WAREHOUSE_PRODUCT_TAG_HEADACHE \u003d \"headache\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    // Product test samples"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_PRODUCT_NAME_PANADOL \u003d \"Panadol\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_PRODUCT_NAME_ASPIRIN \u003d \"Aspirin\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final int VALID_PRODUCT_QUANTITY_A \u003d 90;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final int VALID_PRODUCT_QUANTITY_B \u003d 600;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    // general test samples"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String VALID_NAME_GEORGE \u003d \"George Best Ltd\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String VALID_PHONE_GEORGE \u003d \"9482442\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String VALID_EMAIL_GEORGE \u003d \"anna@example.com\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_TAG_FEVER \u003d \"fever\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_TAG_ANTIBIOTICS \u003d \"antibiotics\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String VALID_TAG_PAINKILLER \u003d \"painkiller\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String VALID_TYPE_SUPPLIER \u003d \"s\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String VALID_TYPE_WAREHOUSE \u003d \"w\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Sells a diverse range of products\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Long term partner\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String VALID_REMARK_GEORGE \u003d \"frequent discount\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_SUPPLIER_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String NAME_DESC_AMY2 \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_SUPPLIER_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_BOB2 \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_WAREHOUSE_A \u003d \" \" + PREFIX_WAREHOUSE_NAME + VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_WAREHOUSE_B \u003d \" \" + PREFIX_WAREHOUSE_NAME + VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_WAREHOUSE_A2 \u003d \" \" + PREFIX_NAME + VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String NAME_DESC_WAREHOUSE_B2 \u003d \" \" + PREFIX_NAME + VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String PHONE_DESC_WAREHOUSE_A \u003d \" \" + PREFIX_PHONE + VALID_WAREHOUSE_PHONE_A;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String PHONE_DESC_WAREHOUSE_B \u003d \" \" + PREFIX_PHONE + VALID_WAREHOUSE_PHONE_B;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // Todo remove address for suppliers"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String ADDRESS_DESC_WAREHOUSE_A \u003d \" \" + PREFIX_ADDRESS + VALID_WAREHOUSE_ADDRESS_A;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String ADDRESS_DESC_WAREHOUSE_B \u003d \" \" + PREFIX_ADDRESS + VALID_WAREHOUSE_ADDRESS_B;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String PRODUCT_NAME_DESC_AMY \u003d \" \" + PREFIX_PRODUCT_NAME + VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String PRODUCT_NAME_DESC_BOB \u003d \" \" + PREFIX_PRODUCT_NAME + VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String TAG_DESC_FEVER \u003d \" \" + PREFIX_TAG + VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String TAG_DESC_ANTIBIOTICS \u003d \" \" + PREFIX_TAG + VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String TAG_DESC_ANTIBIOTICS_FEVER \u003d \" \" + PREFIX_TAG + VALID_TAG_ANTIBIOTICS + VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String REMARK_DESC_WAREHOUSE_A \u003d \" \" + PREFIX_REMARK + VALID_WAREHOUSE_REMARK_A;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String REMARK_DESC_WAREHOUSE_B \u003d \" \" + PREFIX_REMARK + VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String TYPE_DESC_SUPPLIER \u003d \" \" + PREFIX_TYPE + VALID_TYPE_SUPPLIER;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String TYPE_DESC_WAREHOUSE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_WAREHOUSE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String TYPE_DESC_SUPPLIER_PRODUCT \u003d \" \" + PREFIX_TYPE + Type.SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String TYPE_DESC_WAREHOUSE_PRODUCT \u003d \" \" + PREFIX_TYPE + Type.WAREHOUSE_PRODUCT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String INDEX_DESC \u003d \" \" + PREFIX_INDEX;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String WAREHOUSE_NAME_DESC_C \u003d \" \" + PREFIX_NAME + VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String SUPPLIER_NAME_DESC_C \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // Todo, keeping for backward compatibility. Standardize naming convention as above"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String WAREHOUSE_NAME_DESC_A \u003d \" \" + PREFIX_WAREHOUSE_NAME + VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String WAREHOUSE_NAME_DESC_A2 \u003d \" \" + PREFIX_NAME + VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String WAREHOUSE_NAME_DESC_B \u003d \" \" + PREFIX_WAREHOUSE_NAME + VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String PRODUCT_NAME_DESC_A \u003d \" \" + PREFIX_PRODUCT_NAME + VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String PRODUCT_NAME_DESC_B \u003d \" \" + PREFIX_PRODUCT_NAME + VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String PRODUCT_QUANTITY_DESC_A \u003d \" \" + PREFIX_PRODUCT_QUANTITY"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + VALID_WAREHOUSE_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String PRODUCT_QUANTITY_DESC_B \u003d \" \" + PREFIX_PRODUCT_QUANTITY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    // invalid test samples"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"pp\"; // Type can only be one of \u0027s\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    // \u0027w\u0027, \u0027ps\u0027, \u0027pw\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_SUPPLIER_NAME + \"\u0026James\"; // names cannot"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_NAME_DESC2 \u003d \" \" + PREFIX_NAME + \"\u0026James\"; // names cannot"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_NAME_DESC_WAREHOUSE \u003d \" \" + PREFIX_WAREHOUSE_NAME + \"\u0026John\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_NAME_DESC_WAREHOUSE2 \u003d \" \" + PREFIX_NAME + \"\u0026John\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK + \"iiiiiiiiiiiiiiiiiiiiiiii\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            + \"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"; // more than"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    // 100 characters not allowed for remarks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_SUPPLIER_NAME_DESC \u003d \" \" + PREFIX_SUPPLIER_NAME"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            + \"\u0026Amy\"; // names cannot start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static final String INVALID_WAREHOUSE_NAME_DESC \u003d \" \" + PREFIX_WAREHOUSE_NAME"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"\u0026Amy\"; // names cannot start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String INVALID_ENTITY_NAME_DESC \u003d \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"\u0026Amy\"; // names cannot start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String INVALID_PRODUCT_NAME_DESC \u003d \" \" + PREFIX_PRODUCT_NAME"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"\u0026Amy\"; // names cannot start with \u0027\u0026\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String INVALID_WAREHOUSE_ADDRESS_DESC \u003d \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String INVALID_PRODUCT_QUANTITY_DESC \u003d \" \" + PREFIX_PRODUCT_QUANTITY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            + \"+20\"; // Signed integers are not allowed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final EditSupplierDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final EditSupplierDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final EditWarehouseDescriptor DESC_A;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final EditWarehouseDescriptor DESC_B;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final UpdateProductDescriptor DESC_PRODUCT_A;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final UpdateProductDescriptor DESC_PRODUCT_B;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        DESC_AMY \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_PANADOL, new String[]{VALID_TAG_FEVER})).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        DESC_BOB \u003d new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS})).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        DESC_A \u003d new EditWarehouseDescriptorBuilder().withName(VALID_WAREHOUSE_NAME_A)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withPhone(VALID_WAREHOUSE_PHONE_A).withAddress(VALID_WAREHOUSE_ADDRESS_A)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withRemark(VALID_WAREHOUSE_REMARK_A)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_WAREHOUSE_PRODUCT_QUANTITY_A)).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        DESC_B \u003d new EditWarehouseDescriptorBuilder().withName(VALID_WAREHOUSE_NAME_B)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withPhone(VALID_WAREHOUSE_PHONE_B).withAddress(VALID_WAREHOUSE_ADDRESS_B)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_A)).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        DESC_PRODUCT_A \u003d new UpdateProductDescriptorBuilder().withQuantity(VALID_WAREHOUSE_PRODUCT_QUANTITY_A)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withTags(VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        DESC_PRODUCT_B \u003d new UpdateProductDescriptorBuilder().withQuantity(VALID_PRODUCT_QUANTITY_B).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * - the clinic, filtered supplier list and selected supplier,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * - filtered warehouse list and selected warehouse in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic expectedClinic \u003d new Clinic(actualModel.getClinic());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cSupplier\u003e expectedFilteredSupplierList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredSupplierList());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cWarehouse\u003e expectedFilteredWarehouseList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedClinic, actualModel.getClinic());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedFilteredSupplierList, actualModel.getFilteredSupplierList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedFilteredWarehouseList, actualModel.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updates {@code model}\u0027s filtered supplier list to show only the supplier at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * {@code model}\u0027s clinic."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static void showSupplierAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier supplier \u003d model.getFilteredSupplierList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        model.updateFilteredSupplierList(new NameContainsKeywordsPredicateForSupplier("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                supplier.getName().fullName));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(1, model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updates {@code model}\u0027s filtered warehouse list to show only the warehouse at"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * the given {@code targetIndex} in the {@code model}\u0027s clinic."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static void showWarehouseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredWarehouseList().size());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse warehouse \u003d model.getFilteredWarehouseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        model.updateFilteredWarehouseList(new NameContainsKeywordsPredicateForWarehouse("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                warehouse.getName().fullName));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(1, model.getFilteredWarehouseList().size());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 59,
      "qlchan24": 55,
      "tohyuting": 17,
      "-": 86,
      "jeffreytjs": 51
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showWarehouseAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.DeleteCommand.MESSAGE_DELETE_PRODUCT_IN_SUPPLIER_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalSupplierOnlyClinic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.getTypicalWarehouseOnlyClinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model modelForSupplier \u003d new ModelManager(getTypicalSupplierOnlyClinic(), new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new UserMacros());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model modelForWarehouse \u003d new ModelManager(getTypicalWarehouseOnlyClinic(), new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new UserMacros());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_noModel_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e deleteCommand.execute(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplierToDelete \u003d modelForSupplier.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(modelForSupplier.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelForSupplier, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse warehouseToDelete \u003d modelForWarehouse.getFilteredWarehouseList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .get(INDEX_FIRST_WAREHOUSE.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(WAREHOUSE, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_WAREHOUSE_SUCCESS, warehouseToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel \u003d new ModelManager(modelForWarehouse.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedModel.deleteWarehouse(warehouseToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelForWarehouse, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_validIndexValidProductNameDelete_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplierToUpdate \u003d modelForSupplier.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withName(supplierToUpdate.getName().fullName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withEmail(supplierToUpdate.getEmail().value)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withPhone(supplierToUpdate.getPhone().value)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withRemark(supplierToUpdate.getRemark().value).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name productToDeleteName \u003d new Name(VALID_PRODUCT_NAME_PANADOL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER_PRODUCT, INDEX_FIRST_SUPPLIER, productToDeleteName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_PRODUCT_IN_SUPPLIER_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                productToDeleteName, supplierToUpdate.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(modelForSupplier.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedModel.setSupplier(supplierToUpdate, expectedSupplier);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelForSupplier, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelForSupplier.getFilteredSupplierList().size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER, outOfBoundIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandFailure(deleteCommand, modelForSupplier, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        outOfBoundIndex \u003d Index.fromOneBased(modelForWarehouse.getFilteredWarehouseList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(WAREHOUSE, outOfBoundIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandFailure(deleteCommand, modelForWarehouse, Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void execute_validIndexInvalidProductNameDeletion_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplierToUpdate \u003d modelForSupplier.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name invalidProductToDeleteName \u003d new Name(VALID_PRODUCT_NAME_ASPIRIN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_PRODUCT_NAME_IN_SUPPLIER,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                invalidProductToDeleteName, supplierToUpdate.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER_PRODUCT, INDEX_FIRST_SUPPLIER, invalidProductToDeleteName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandFailure(deleteCommand, modelForSupplier, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        showSupplierAtIndex(modelForSupplier, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplierToDelete \u003d modelForSupplier.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SUPPLIER_SUCCESS, supplierToDelete);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModel \u003d new ModelManager(modelForSupplier.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel.deleteSupplier(supplierToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        showNoSupplier(expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelForSupplier, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        showWarehouseAtIndex(modelForWarehouse, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse warehouseToDelete \u003d modelForWarehouse.getFilteredWarehouseList()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .get(INDEX_FIRST_WAREHOUSE.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(WAREHOUSE, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_WAREHOUSE_SUCCESS, warehouseToDelete);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel \u003d new ModelManager(modelForWarehouse.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedModel.deleteWarehouse(warehouseToDelete);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        showNoWarehouse(expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelForWarehouse, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        showSupplierAtIndex(modelForSupplier, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of clinic list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelForSupplier.getClinic().getSupplierList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(SUPPLIER, outOfBoundIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandFailure(deleteCommand, modelForSupplier, Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        showWarehouseAtIndex(modelForWarehouse, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        outOfBoundIndex \u003d INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of clinic list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelForWarehouse.getClinic().getWarehouseList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(WAREHOUSE, outOfBoundIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertCommandFailure(deleteCommand, modelForWarehouse, Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(SUPPLIER, INDEX_SECOND_SUPPLIER);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updates {@code model}\u0027s filtered supplier list to show no one."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private void showNoSupplier(Model model) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model.updateFilteredSupplierList(p -\u003e false);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(model.getFilteredSupplierList().isEmpty());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Updates {@code model}\u0027s filtered warehouse list to show no one."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private void showNoWarehouse(Model model) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        model.updateFilteredWarehouseList(p -\u003e false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(model.getFilteredWarehouseList().isEmpty());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 119,
      "qlchan24": 20,
      "-": 64,
      "jeffreytjs": 13
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_50;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showWarehouseAtIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_SUPPLIER_UNCHANGED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_WAREHOUSE_UNCHANGED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.EditWarehouseDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.ModelStub;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder(editedSupplier)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER, descriptorSupplier);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageSupplier \u003d String.format(EditCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedSupplier);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelSupplier \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelSupplier.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandSupplier, model, expectedMessageSupplier, expectedModelSupplier);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        Warehouse editedWarehouse \u003d new WarehouseBuilder().withProducts(Map.of(\"Gauze\", 100)).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder(editedWarehouse)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(INDEX_FIRST_WAREHOUSE, descriptorWarehouse);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageWarehouse \u003d String.format(EditCommand.MESSAGE_EDIT_WAREHOUSE_SUCCESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedWarehouse);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelWarehouse \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelWarehouse.setWarehouse(model.getFilteredWarehouseList().get(0), editedWarehouse);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandWarehouse, model, expectedMessageWarehouse, expectedModelWarehouse);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Index indexLastSupplier \u003d Index.fromOneBased(model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier lastSupplier \u003d model.getFilteredSupplierList().get(indexLastSupplier.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        SupplierBuilder supplierInList \u003d new SupplierBuilder(lastSupplier);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier editedSupplier \u003d supplierInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(indexLastSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageSupplier \u003d String.format(EditCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedSupplier);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelSupplier \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelSupplier.setSupplier(lastSupplier, editedSupplier);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandSupplier, model, expectedMessageSupplier, expectedModelSupplier);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index indexLastWarehouse \u003d Index.fromOneBased(model.getFilteredWarehouseList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse lastWarehouse \u003d model.getFilteredWarehouseList().get(indexLastWarehouse.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        WarehouseBuilder warehouseInList \u003d new WarehouseBuilder(lastWarehouse);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse editedWarehouse \u003d warehouseInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_WAREHOUSE_PRODUCT_QUANTITY_50)).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_WAREHOUSE_PRODUCT_QUANTITY_50)).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(indexLastWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageWarehouse \u003d String.format(EditCommand.MESSAGE_EDIT_WAREHOUSE_SUCCESS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedWarehouse);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelWarehouse \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelWarehouse.setWarehouse(lastWarehouse, editedWarehouse);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandWarehouse, model, expectedMessageWarehouse, expectedModelWarehouse);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER, new EditSupplierDescriptor());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageSupplier \u003d MESSAGE_SUPPLIER_UNCHANGED;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandSupplier, model, expectedMessageSupplier);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(INDEX_FIRST_WAREHOUSE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new EditWarehouseDescriptor());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageWarehouse \u003d MESSAGE_WAREHOUSE_UNCHANGED;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandWarehouse, model, expectedMessageWarehouse);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier supplierInFilteredList \u003d model.getFilteredSupplierList()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier editedSupplier \u003d new SupplierBuilder(supplierInFilteredList).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageSupplier \u003d String.format(EditCommand.MESSAGE_EDIT_SUPPLIER_SUCCESS,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedSupplier);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelSupplier \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelSupplier.setSupplier(model.getFilteredSupplierList().get(0), editedSupplier);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandSupplier, model, expectedMessageSupplier, expectedModelSupplier);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        showWarehouseAtIndex(model, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse warehouseInFilteredList \u003d model.getFilteredWarehouseList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .get(INDEX_FIRST_WAREHOUSE.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse editedWarehouse \u003d new WarehouseBuilder(warehouseInFilteredList).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                .withProducts(Map.of(\"Gauze\", 100)).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(INDEX_FIRST_WAREHOUSE,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new EditWarehouseDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessageWarehouse \u003d String.format(EditCommand.MESSAGE_EDIT_WAREHOUSE_SUCCESS,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                editedWarehouse);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Model expectedModelWarehouse \u003d new ModelManager(new Clinic(model.getClinic()), new UserPrefs(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UserMacros());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModelWarehouse.setWarehouse(model.getFilteredWarehouseList().get(0), editedWarehouse);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(editCommandWarehouse, model, expectedMessageWarehouse, expectedModelWarehouse);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_duplicateSupplierUnfilteredList_failure() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier firstSupplier \u003d model.getFilteredSupplierList().get(INDEX_FIRST_SUPPLIER.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder(firstSupplier).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(INDEX_SECOND_SUPPLIER, descriptorSupplier);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandSupplier, model, EditCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_duplicateWarehouseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse firstWarehouse \u003d model.getFilteredWarehouseList().get(INDEX_FIRST_WAREHOUSE.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder(firstWarehouse)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(INDEX_SECOND_WAREHOUSE, descriptorWarehouse);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandWarehouse, model, EditCommand.MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_duplicateSupplierFilteredList_failure() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // edit supplier in filtered list into a duplicate in clinic"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier supplierInList \u003d model.getClinic().getSupplierList().get(INDEX_SECOND_SUPPLIER"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new EditSupplierDescriptorBuilder(supplierInList).build());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandSupplier, model, EditCommand.MESSAGE_DUPLICATE_SUPPLIER);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_duplicateWarehouseFilteredList_failure() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        showWarehouseAtIndex(model, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // edit warehouse in filtered list into a duplicate in clinic"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse warehouseInList \u003d model.getClinic().getWarehouseList().get(INDEX_SECOND_WAREHOUSE"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(INDEX_FIRST_WAREHOUSE,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new EditWarehouseDescriptorBuilder(warehouseInList).build());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandWarehouse, model, EditCommand.MESSAGE_DUPLICATE_WAREHOUSE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_invalidSupplierIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index outOfBoundIndexSupplier \u003d Index.fromOneBased(model.getFilteredSupplierList().size() + 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(outOfBoundIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandSupplier, model, MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_invalidWarehouseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index outOfBoundIndexWarehouse \u003d Index.fromOneBased(model.getFilteredWarehouseList().size() + 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(outOfBoundIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandWarehouse, model, MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Edit filtered supplier list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * but smaller than size of clinic"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_invalidSupplierIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index outOfBoundIndexSupplier \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // ensures that outOfBoundIndexSupplier is still in bounds of clinic list"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(outOfBoundIndexSupplier.getZeroBased()"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u003c model.getClinic().getSupplierList().size());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandSupplier \u003d new EditCommand(outOfBoundIndexSupplier,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new EditSupplierDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandSupplier, model, MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Edit filtered warehouse list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * but smaller than size of clinic"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_invalidWarehouseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        showWarehouseAtIndex(model, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index outOfBoundIndexWarehouse \u003d INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // ensures that outOfBoundIndexWarehouse is still in bounds of clinic list"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(outOfBoundIndexWarehouse.getZeroBased()"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                \u003c model.getClinic().getWarehouseList().size());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand editCommandWarehouse \u003d new EditCommand(outOfBoundIndexWarehouse,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new EditWarehouseDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(editCommandWarehouse, model, MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        final EditCommand standardCommandSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER, DESC_AMY);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        final EditCommand standardCommandWarehouse \u003d new EditCommand(INDEX_FIRST_SUPPLIER, DESC_BOB);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorForSupplier \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier.setName(new Name(\"Test\"));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier.setEmail(new Email(\"testing@gmail.com\"));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier.setPhone(new Phone(\"98653257\"));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorForSupplier2 \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier2.setName(new Name(\"Test2\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier2.setEmail(new Email(\"testing@yahoo.com\"));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForSupplier2.setPhone(new Phone(\"98653257\"));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorForWarehouse \u003d new EditWarehouseDescriptor();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setName(new Name(\"warehouse here\"));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setAddress(new Address(\"testing addr\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setPhone(new Phone(\"54287163\"));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setRemark(new Remark(\"first warehouse\"));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorForWarehouse2 \u003d new EditWarehouseDescriptor();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setName(new Name(\"warehouse2 here\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setAddress(new Address(\"testing addr2\"));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setPhone(new Phone(\"78564210\"));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorForWarehouse.setRemark(new Remark(\"second warehouse\"));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand commandForSupplier \u003d new EditCommand(INDEX_FIRST_SUPPLIER, descriptorForSupplier);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand commandForSupplier2 \u003d new EditCommand(INDEX_FIRST_SUPPLIER, descriptorForSupplier2);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand commandForWarehouse \u003d new EditCommand(INDEX_FIRST_WAREHOUSE, descriptorForWarehouse);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand commandForWarehouse2 \u003d new EditCommand(INDEX_FIRST_WAREHOUSE, descriptorForWarehouse2);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForSupplier.equals(commandForWarehouse));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForSupplier.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForWarehouse.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different values -\u003e returns false"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForSupplier.equals(commandForSupplier2));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForWarehouse.equals(commandForWarehouse2));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(commandForSupplier.equals(commandForSupplier));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(commandForWarehouse2.equals(commandForWarehouse2));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForSupplier.equals(null));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForWarehouse.equals(null));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForSupplier.equals(new EditCommand(INDEX_SECOND_SUPPLIER, DESC_AMY)));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(commandForWarehouse.equals(new EditCommand(INDEX_SECOND_WAREHOUSE, DESC_BOB)));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(standardCommandSupplier.equals(new EditCommand(INDEX_FIRST_SUPPLIER, DESC_BOB)));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(standardCommandWarehouse.equals(commandForWarehouse));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private class ModelStubWithWarehouse extends ModelStub {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        private Warehouse warehouse;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        private Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ModelStubWithWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.setWarehouses(List.of(warehouse));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        @Override public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            return clinic;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            this.warehouse \u003d editedWarehouse;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.setWarehouses(List.of(editedWarehouse));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 31,
      "tohyuting": 272,
      "zhengweii": 2,
      "-": 70,
      "jeffreytjs": 15
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/EditSupplierDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class EditSupplierDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        EditSupplierDescriptor descriptorWithSameValues \u003d new EditSupplierDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different products -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAmy \u003d new EditSupplierDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 10,
      "tohyuting": 6,
      "-": 38,
      "jeffreytjs": 11
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/EditWarehouseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_ADDRESS_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PHONE_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.EditWarehouseDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class EditWarehouseDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        EditWarehouseDescriptor descriptorWithSameValues \u003d new EditWarehouseDescriptor(DESC_A);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(DESC_A.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(DESC_A.equals(DESC_A));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(DESC_B));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor editedA \u003d new EditWarehouseDescriptorBuilder(DESC_A)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withName(VALID_WAREHOUSE_NAME_B).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(editedA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        editedA \u003d new EditWarehouseDescriptorBuilder(DESC_A).withPhone(VALID_WAREHOUSE_PHONE_B).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(editedA));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        editedA \u003d new EditWarehouseDescriptorBuilder(DESC_A).withAddress(VALID_WAREHOUSE_ADDRESS_B).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(editedA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        editedA \u003d new EditWarehouseDescriptorBuilder(DESC_A).withRemark(VALID_WAREHOUSE_REMARK_B).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(editedA));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different products -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        editedA \u003d new EditWarehouseDescriptorBuilder(DESC_A)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(DESC_A.equals(editedA));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 57,
      "tohyuting": 6
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_WAREHOUSE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.getTypicalWarehouseOnlyClinic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.supplier.SupplierPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.warehouse.WarehousePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Model modelForSupplier \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Model expectedModelForSupplier \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Model modelForWarehouse \u003d new ModelManager(getTypicalWarehouseOnlyClinic(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            new UserMacros());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private Model expectedModelForWarehouse \u003d new ModelManager(getTypicalWarehouseOnlyClinic(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            new UserMacros());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // Supplier"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        SupplierPredicate firstSupplierPredicate \u003d new SupplierPredicate(Collections.singletonList(\"first supplier\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"first supplier\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"first supplier\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        SupplierPredicate secondSupplierPredicate \u003d new SupplierPredicate(Collections.singletonList(\"second supplier\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"second supplier\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"second supplier\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // Warehouse"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        WarehousePredicate firstWarehousePredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new WarehousePredicate(Collections.singletonList(\"first warehouse\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"first warehouse\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"first warehouse\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        WarehousePredicate secondWarehousePredicate \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new WarehousePredicate(Collections.singletonList(\"second warehouse\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"second warehouse\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                Collections.singletonList(\"second warehouse\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand firstFindCommandForSupplier \u003d new FindCommand(firstSupplierPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand secondFindCommandForSupplier \u003d new FindCommand(secondSupplierPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand firstFindCommandForWarehouse \u003d new FindCommand(firstWarehousePredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand secondFindCommandForWarehouse \u003d new FindCommand(secondWarehousePredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(firstFindCommandForSupplier.equals(firstFindCommandForSupplier));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(secondFindCommandForSupplier.equals(secondFindCommandForSupplier));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(firstFindCommandForWarehouse.equals(firstFindCommandForWarehouse));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(secondFindCommandForWarehouse.equals(secondFindCommandForWarehouse));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand firstFindCommandForSupplierCopy \u003d new FindCommand(firstSupplierPredicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(firstFindCommandForSupplier.equals(firstFindCommandForSupplierCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand secondFindCommandForSupplierCopy \u003d new FindCommand(secondSupplierPredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(secondFindCommandForSupplier.equals(secondFindCommandForSupplierCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand firstFindCommandForWarehouseCopy \u003d new FindCommand(firstWarehousePredicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(firstFindCommandForWarehouse.equals(firstFindCommandForWarehouseCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand secondFindCommandForWarehouseCopy \u003d new FindCommand(secondWarehousePredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertTrue(secondFindCommandForWarehouse.equals(secondFindCommandForWarehouseCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForSupplier.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(secondFindCommandForSupplier.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForWarehouse.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(secondFindCommandForWarehouse.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForSupplier.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(secondFindCommandForSupplier.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForWarehouse.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(secondFindCommandForWarehouse.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForSupplier.equals(secondFindCommandForSupplier));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // different warehouse -\u003e return false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertFalse(firstFindCommandForWarehouse.equals(secondFindCommandForWarehouse));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_zeroKeywords_noSupplierFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        SupplierPredicate supplierPredicate \u003d prepareSupplierPredicate(nameKeywords, productKeywords, remarkKeywords);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(supplierPredicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForSupplier.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForSupplier, expectedMessage, expectedModelForSupplier);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Collections.emptyList(), modelForSupplier.getFilteredSupplierList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_zeroKeywords_noWarehouseFound() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WAREHOUSE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        WarehousePredicate warehousePredicate \u003d prepareWarehousePredicate(nameKeywords, productKeywords,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                remarkKeywords);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(warehousePredicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForWarehouse.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForWarehouse, expectedMessage, expectedModelForWarehouse);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Collections.emptyList(), modelForWarehouse.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_multipleKeywords_multipleSuppliersFound() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(new String[]{});"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"mask\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"cheap\", \"fast\", \"industry\", \"leader\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        SupplierPredicate supplierPredicate \u003d prepareSupplierPredicate(nameKeywords, productKeywords, remarkKeywords);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(supplierPredicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForSupplier.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForSupplier, expectedMessage, expectedModelForSupplier);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), modelForSupplier.getFilteredSupplierList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_multipleKeywords_noSuppliersFound() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"name1\", \"name2\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"product1\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"remark1\", \"remark2\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUPPLIERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        SupplierPredicate supplierPredicate \u003d prepareSupplierPredicate(nameKeywords, productKeywords, remarkKeywords);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(supplierPredicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForSupplier.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForSupplier, expectedMessage, expectedModelForSupplier);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Collections.EMPTY_LIST, modelForSupplier.getFilteredSupplierList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_multipleKeywords_multipleWarehousesFound() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alice\", \"benson\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"gauze\", \"towel\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"biggest\", \"near\", \"central\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WAREHOUSE_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        WarehousePredicate warehousePredicate \u003d prepareWarehousePredicate(nameKeywords, productKeywords,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                remarkKeywords);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(warehousePredicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForWarehouse.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForWarehouse, expectedMessage, expectedModelForWarehouse);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), modelForWarehouse.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_multipleKeywords_noWarehousesFound() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"name1\", \"name2\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"product1\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"remark1\", \"remark2\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WAREHOUSE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        WarehousePredicate warehousePredicate \u003d prepareWarehousePredicate(nameKeywords, productKeywords,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                remarkKeywords);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d new FindCommand(warehousePredicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        expectedModelForWarehouse.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(command, modelForWarehouse, expectedMessage, expectedModelForWarehouse);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(Collections.EMPTY_LIST, modelForWarehouse.getFilteredWarehouseList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Parses {@code userInput} into a {@code SupplierPredicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private SupplierPredicate prepareSupplierPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e productKeywords,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            List\u003cString\u003e remarkKeywords) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return new SupplierPredicate(nameKeywords, productKeywords, remarkKeywords);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Parses {@code userInput} into a {@code WarehousePredicate}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    private WarehousePredicate prepareWarehousePredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e productKeywords,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            List\u003cString\u003e remarkKeywords) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        return new WarehousePredicate(nameKeywords, productKeywords, remarkKeywords);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 203
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.MESSAGE_FOR_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_genericHelp_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutHelpCommand \u003d \"You can view the description, input format and sample commands for a particular\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" command using\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"help COMMAND.\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"Example:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"help find\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"Alternatively, you may visit the User Guide on our website for more details.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" The URL can be accessed by pressing F1.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutAddCommand \u003d AddCommand.COMMAND_WORD + \"\\nAdds a supplier or warehouse to CLI-nic\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutAssignMacroCommand \u003d AssignMacroCommand.COMMAND_WORD + \"\\nAssigns a macro to a command string\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutClearCommand \u003d ClearCommand.COMMAND_WORD + \"\\nClears all suppliers and warehouses\u0027 entries in\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" CLI-nic\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutDeleteCommand \u003d DeleteCommand.COMMAND_WORD + \"\\nDeletes a supplier, warehouse or a product\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" associated with the supplier/warehouse that is no longer needed\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutEditCommand \u003d EditCommand.COMMAND_WORD + \"\\nEdits a specific supplier or warehouse\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutExitCommand \u003d ExitCommand.COMMAND_WORD + \"\\nExits the application\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutFindCommand \u003d FindCommand.COMMAND_WORD + \"\\nFinds relevant supplier(s) or warehouse(s)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutListCommand \u003d ListCommand.COMMAND_WORD + \"\\nLists all suppliers and warehouses\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutRemoveMacroCommand \u003d RemoveMacroCommand.COMMAND_WORD + \"\\nRemoves the macro for an alias\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutUpdateCommand \u003d UpdateCommand.COMMAND_WORD + \"\\nUpdates a product associated with a supplier or\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \" warehouse\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String aboutViewCommand \u003d ViewCommand.COMMAND_WORD + \"\\nViews the in-depth information associated with a\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"specific supplier or warehouse\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String genericHelpMessage \u003d aboutHelpCommand + \"\\n\\n\" + aboutAddCommand + \"\\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + aboutAssignMacroCommand + \"\\n\\n\" + aboutClearCommand + \"\\n\\n\" + aboutDeleteCommand + \"\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + aboutEditCommand + \"\\n\\n\" + aboutExitCommand + \"\\n\\n\" + aboutFindCommand + \"\\n\\n\" + aboutListCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                + \"\\n\\n\" + aboutRemoveMacroCommand + \"\\n\\n\" + aboutUpdateCommand + \"\\n\\n\" + aboutViewCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(genericHelpMessage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"all\"), model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_addHelp_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String addHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(addHelpMessage, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"add\"), model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_clearHelp_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ClearCommand.MESSAGE_USAGE, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"clear\"), model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_deleteHelp_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String deleteHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(deleteHelpMessage, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"delete\"), model,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_editHelp_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String editHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(editHelpMessage, false, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"edit\"), model,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_exitHelp_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_USAGE, false, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"exit\"), model,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_findHelp_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String findHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(findHelpMessage, false, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"find\"), model,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_listHelp_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_USAGE, false, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"list\"), model,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_updateHelp_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String updateCommandHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + UpdateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(updateCommandHelpMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"update\"), model,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void execute_viewHelp_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        String viewCommandHelpMessage \u003d MESSAGE_FOR_COMMAND_FORMAT + \"\\n\\n\" + ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(viewCommandHelpMessage, false, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"view\"), model,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 59,
      "zhengweii": 46,
      "-": 12,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showSupplierAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.showWarehouseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_listIsFilteredSupplier_showsAllWarehouseShowsOneSupplier() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        showSupplierAtIndex(model, INDEX_FIRST_SUPPLIER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_listIsFilteredWarehouse_showsAllSupplierShowsOneWarehouse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        showWarehouseAtIndex(model, INDEX_FIRST_WAREHOUSE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 4,
      "tohyuting": 9,
      "-": 27,
      "jeffreytjs": 8
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_PRODUCT_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_PRODUCT_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.UpdateCommand.getWarehouseByName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.testutil.UpdateProductDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final Product VALID_PRODUCT_A \u003d new Product(new Name(VALID_WAREHOUSE_PRODUCT_NAME_A),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            VALID_PRODUCT_QUANTITY_B);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void constructor_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(Type.SUPPLIER, null,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_PRODUCT_NAME_ASPIRIN), DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void constructor_nullProductName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(Type.WAREHOUSE, ALICE.getName(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                null, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void constructor_nullEntityType_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(null, ALICE.getName(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_PRODUCT_NAME_ASPIRIN), DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void constructor_nullUpdateProductDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(Type.WAREHOUSE, ALICE.getName(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_PRODUCT_NAME_ASPIRIN), null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_productExistsInWarehouseAndFieldEdited_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse originalWarehouse \u003d new WarehouseBuilder().withProducts("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_PRODUCT_QUANTITY_A)).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(originalWarehouse);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        CommandResult commandResult \u003d new UpdateCommand(Type.WAREHOUSE, originalWarehouse.getName(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_WAREHOUSE_PRODUCT_NAME_A), DESC_PRODUCT_B).execute(modelStub);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse editedWarehouse \u003d new WarehouseBuilder().withProducts("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_SUCCESS, VALID_PRODUCT_A.toString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                editedWarehouse.getName()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(editedWarehouse, modelStub.warehouse);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_productExistsInWarehouseAndNoFieldEdited_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse originalWarehouse \u003d new WarehouseBuilder().withProducts("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_PRODUCT_QUANTITY_A)).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(originalWarehouse);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new UpdateCommand(Type.WAREHOUSE, originalWarehouse.getName(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_WAREHOUSE_PRODUCT_NAME_A), new UpdateProductDescriptorBuilder().build())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_productDoesNotExistInWarehouse_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse emptyWarehouse \u003d new WarehouseBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(emptyWarehouse);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        CommandResult commandResult \u003d new UpdateCommand(Type.WAREHOUSE, emptyWarehouse.getName(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_WAREHOUSE_PRODUCT_NAME_A), DESC_PRODUCT_B).execute(modelStub);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse editedWarehouse \u003d new WarehouseBuilder().withProducts("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_SUCCESS, VALID_PRODUCT_A.toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                editedWarehouse.getName()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(editedWarehouse, modelStub.warehouse);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void execute_entityNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new UpdateCommand(Type.WAREHOUSE, new Name(VALID_NAME_AMY),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new Name(VALID_PRODUCT_NAME_ASPIRIN), DESC_PRODUCT_A).execute(modelStub));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getWarehouseByName_warehouseFound_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Warehouse warehouse \u003d getWarehouseByName(ALICE.getName(), modelStub);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(warehouse, ALICE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getWarehouseByName_warehouseNotFound_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse modelStub \u003d new ModelStubWithWarehouse(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e getWarehouseByName(new Name(VALID_NAME_AMY), modelStub));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ReadOnlyUserMacros getUserMacros() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setUserMacrosFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setUserMacros(ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasMacro(Macro macro) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void deleteMacro(Macro target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addMacro(Macro macro) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setClinicFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setClinic(ReadOnlyClinic clinic) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void deleteWarehouse(Warehouse target) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void addWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cWarehouse\u003e getFilteredWarehouseList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private class ModelStubWithWarehouse extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Warehouse warehouse;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelStubWithWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            requireNonNull(warehouse);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            clinic.setWarehouses(List.of(warehouse));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return clinic;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.warehouse \u003d editedWarehouse;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            clinic.setWarehouses(List.of(editedWarehouse));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 311,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/ViewSuppliersCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForSupplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ViewSuppliersCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Type type \u003d Type.SUPPLIER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Index index1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Index index2 \u003d Index.fromOneBased(20);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(type, index2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_viewFirstSupplier_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cSupplier\u003e supplierList \u003d model.getFilteredSupplierList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier supplierToView \u003d supplierList.get(index1.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier supplierPredicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(supplierToView.getName().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        model.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModel.updateFilteredSupplierList(supplierPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SUPPLIERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedModel.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(viewFirstCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_viewOutOfRange_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_SUPPLIER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(viewFirstCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 3,
      "tohyuting": 75
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/commands/ViewWarehousesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.parser.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForWarehouse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ViewWarehousesCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Type type \u003d Type.WAREHOUSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Index index1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Index index2 \u003d Index.fromOneBased(20);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalClinic(), new UserPrefs(), new UserMacros());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(type, index2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_viewFirstWarehouse_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        List\u003cWarehouse\u003e warehouseList \u003d model.getFilteredWarehouseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Warehouse warehouseToView \u003d warehouseList.get(index1.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse warehousePredicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(warehouseToView.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        model.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedModel.updateFilteredWarehouseList(warehousePredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_WAREHOUSE_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                expectedModel.getFilteredWarehouseList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandSuccess(viewFirstCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void execute_viewOutOfRange_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(type, index2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_WAREHOUSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertCommandFailure(viewFirstCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 3,
      "tohyuting": 71
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.ADDRESS_DESC_WAREHOUSE_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.ADDRESS_DESC_WAREHOUSE_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_NAME_DESC2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_NAME_DESC_WAREHOUSE2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_BOB2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_WAREHOUSE_A2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_WAREHOUSE_B;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_WAREHOUSE_B2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_WAREHOUSE_A;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_WAREHOUSE_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_WAREHOUSE_A;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_WAREHOUSE_B;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_WAREHOUSE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TYPE_SUPPLIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TYPE_WAREHOUSE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_ADDRESS_A;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PHONE_A;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_A;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_TYPE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.B;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier expectedSupplier \u003d new SupplierBuilder(BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse expectedWarehouse \u003d new WarehouseBuilder(B).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_SUPPLIER + NAME_DESC_BOB2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_B2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_B + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + TYPE_DESC_SUPPLIER + NAME_DESC_BOB2"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_B2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_B + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + NAME_DESC_AMY2 + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2 + NAME_DESC_WAREHOUSE_B2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_B + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_B2 + PHONE_DESC_WAREHOUSE_A"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_B + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_B2 + PHONE_DESC_WAREHOUSE_B"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + ADDRESS_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple remarks - last remark accepted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + REMARK_DESC_AMY + REMARK_DESC_BOB, new AddCommand(expectedSupplier));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_B + PHONE_DESC_WAREHOUSE_B"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + ADDRESS_DESC_WAREHOUSE_B + REMARK_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_B,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new AddCommand(expectedWarehouse));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_MISSING_TYPE_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_WAREHOUSE + NAME_DESC_WAREHOUSE_A2 + PHONE_DESC_WAREHOUSE_A"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_MISSING_TYPE_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + PHONE_DESC_BOB + VALID_NAME_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUPPLIER_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + PHONE_DESC_WAREHOUSE_A + VALID_WAREHOUSE_NAME_A"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_WAREHOUSE_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUPPLIER_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2 + VALID_WAREHOUSE_PHONE_A"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_WAREHOUSE_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + VALID_EMAIL_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUPPLIER_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2 + PHONE_DESC_WAREHOUSE_A"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + VALID_WAREHOUSE_ADDRESS_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_WAREHOUSE_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_SUPPLIER + VALID_NAME_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + VALID_EMAIL_BOB + VALID_REMARK_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_MISSING_TYPE_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_WAREHOUSE + VALID_WAREHOUSE_NAME_A + VALID_WAREHOUSE_PHONE_A"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + VALID_WAREHOUSE_ADDRESS_A + VALID_WAREHOUSE_REMARK_A,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_MISSING_TYPE_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_DESC + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_DESC + NAME_DESC_WAREHOUSE_A2"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + INVALID_NAME_DESC2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + INVALID_NAME_DESC_WAREHOUSE2"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + INVALID_PHONE_DESC + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + INVALID_EMAIL_DESC + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + INVALID_ADDRESS_DESC + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid remark"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_REMARK_DESC,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_A + INVALID_REMARK_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + INVALID_NAME_DESC2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_REMARK_DESC,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + INVALID_NAME_DESC_WAREHOUSE2"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_A + INVALID_REMARK_DESC,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_SUPPLIER + NAME_DESC_BOB2 + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + EMAIL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUPPLIER_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_WAREHOUSE + NAME_DESC_WAREHOUSE_A2"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + PHONE_DESC_WAREHOUSE_A + ADDRESS_DESC_WAREHOUSE_A + REMARK_DESC_WAREHOUSE_A,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(AddCommand.MESSAGE_WAREHOUSE_MISSING_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 8,
      "-": 42,
      "jeffreytjs": 173
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/AddProductCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_PRODUCT_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_SUPPLIER_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TAG_DESC_ANTIBIOTICS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TAG_DESC_ANTIBIOTICS_FEVER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class AddProductCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private AddProductCommandParser parser \u003d new AddProductCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_nullArgs_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN), getTagSet(VALID_TAG_ANTIBIOTICS));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // whitespace only preamble - success"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + TAG_DESC_ANTIBIOTICS, new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // one tag - success"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + TAG_DESC_ANTIBIOTICS, new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // multiple tags - success"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                getTagSet(VALID_TAG_ANTIBIOTICS, VALID_TAG_FEVER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY + TAG_DESC_ANTIBIOTICS_FEVER,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parser_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // no tag - success"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid supplier name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, INVALID_SUPPLIER_NAME_DESC + PRODUCT_NAME_DESC_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid product name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + INVALID_PRODUCT_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // empty tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + PRODUCT_NAME_DESC_AMY + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // multiple repeated fields, last entry value accepted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN), getTagSet(VALID_TAG_ANTIBIOTICS));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String userInput \u003d NAME_DESC_BOB + NAME_DESC_AMY + PRODUCT_NAME_DESC_BOB + PRODUCT_NAME_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + TAG_DESC_FEVER + TAG_DESC_ANTIBIOTICS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, userInput, new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid name in the input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN), getTagSet(VALID_TAG_ANTIBIOTICS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String userInput \u003d INVALID_SUPPLIER_NAME_DESC + NAME_DESC_AMY + PRODUCT_NAME_DESC_BOB + PRODUCT_NAME_DESC_AMY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + TAG_DESC_FEVER + TAG_DESC_ANTIBIOTICS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, userInput, new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid name in the input"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedProduct \u003d new Product(new Name(VALID_PRODUCT_NAME_ASPIRIN), getTagSet(VALID_TAG_ANTIBIOTICS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        userInput \u003d NAME_DESC_AMY + INVALID_PRODUCT_NAME_DESC + PRODUCT_NAME_DESC_AMY"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + TAG_DESC_FEVER + TAG_DESC_ANTIBIOTICS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, userInput, new AddProductCommand(expectedName, expectedProduct));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 134
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/ClinicParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INDEX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.SupplierUtil.getAddProductCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.supplier.SupplierPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.warehouse.WarehousePredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ClinicParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Name VALID_NAME_DESC \u003d new Name(VALID_PRODUCT_NAME_PANADOL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final ClinicParser parser \u003d new ClinicParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(SupplierUtil.getAddCommand(supplier));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(new AddCommand(supplier), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parserCommand_addProduct() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Product product \u003d new Product(VALID_NAME_DESC, getTagSet(VALID_TAG_FEVER));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        AddProductCommand command \u003d (AddProductCommand) parser.parseCommand(getAddProductCommand(supplier, product));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(new AddProductCommand(supplier.getName(), product), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                DeleteCommand.COMMAND_WORD + TYPE_DESC_SUPPLIER + INDEX_DESC + INDEX_FIRST_SUPPLIER.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                DeleteCommand.COMMAND_WORD + TYPE_DESC_SUPPLIER_PRODUCT"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                        + INDEX_DESC + INDEX_FIRST_WAREHOUSE.getOneBased() + PRODUCT_NAME_DESC_BOB);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(new DeleteCommand(SUPPLIER_PRODUCT, INDEX_FIRST_SUPPLIER, VALID_NAME_DESC), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        EditSupplierDescriptor descriptor \u003d new EditSupplierDescriptorBuilder(supplier).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + INDEX_FIRST_SUPPLIER.getOneBased() + \" \" + SupplierUtil.getEditSupplierDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_SUPPLIER, descriptor), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parseCommand_findSuppliers() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"cheap\", \"fast\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.COMMAND_WORD + \" ct/s n/alex bernice pd/panadol r/cheap fast\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(new FindCommand(new SupplierPredicate(nameKeywords, productKeywords, remarkKeywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parseCommand_findWarehouses() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"biggest\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.COMMAND_WORD + \" ct/w n/alex bernice pd/panadol r/biggest\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertEquals(new FindCommand(new WarehousePredicate(nameKeywords, productKeywords, remarkKeywords)), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 32,
      "qlchan24": 11,
      "zhengweii": 20,
      "-": 64,
      "jeffreytjs": 14
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            //throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            System.err.println(pe.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 2,
      "-": 34,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INDEX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_WAREHOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER_PRODUCT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_INDEX_DESC \u003d INDEX_DESC + INDEX_FIRST_SUPPLIER.getOneBased();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Name VALID_NAME_DESC \u003d new Name(VALID_PRODUCT_NAME_ASPIRIN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommandWithoutProduct() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(WAREHOUSE, INDEX_FIRST_WAREHOUSE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // whitespace + valid argument"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                PREAMBLE_WHITESPACE + TYPE_DESC_SUPPLIER + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_validArgsWithDifferentOrder_returnsDeleteCommandWithoutProduct() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // reordered argument entry \u0026 product name entered for supplier deletion - name ignored"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER + PRODUCT_NAME_DESC_A + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER, INDEX_FIRST_SUPPLIER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // reordered argument entry \u0026 product name entered for warehouse deletion - name ignored"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_DESC + PRODUCT_NAME_DESC_A + TYPE_DESC_WAREHOUSE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(WAREHOUSE, INDEX_FIRST_WAREHOUSE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommandWithProduct() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_SUPPLIER_PRODUCT + VALID_INDEX_DESC + PRODUCT_NAME_DESC_A,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER_PRODUCT, INDEX_FIRST_SUPPLIER, VALID_NAME_DESC));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // whitespace + valid argument"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_SUPPLIER_PRODUCT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                        + VALID_INDEX_DESC + PRODUCT_NAME_DESC_A + PREAMBLE_WHITESPACE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new DeleteCommand(SUPPLIER_PRODUCT, INDEX_FIRST_SUPPLIER, VALID_NAME_DESC));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // whitespace only"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"   \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_invalidPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid type prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"t/p\" + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid index prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + \"is/1\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid productName prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + VALID_INDEX_DESC + \"pdf/A\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + PRODUCT_NAME_DESC_A,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // missing productName prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid type argument"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, \"ct/pe\" + VALID_INDEX_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid index argument"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + \"i/0\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid product name argument"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + VALID_INDEX_DESC + \"pd/*name\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // missing index argument"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + \"i/\" ,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // missing name argument"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER_PRODUCT + VALID_INDEX_DESC + \"pd/\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 100,
      "-": 21,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_NAME_DESC2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_NAME_DESC_WAREHOUSE2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.WAREHOUSE_NAME_DESC_A;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.WAREHOUSE_NAME_DESC_A2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_INPUT_BOTH_SUPPLIER_WAREHOUSE_PREFIX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_INVALID_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NO_INDEX;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_NO_PREFIX;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_SUPPLIER_NO_ADDRESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.EditCommand.MESSAGE_WAREHOUSE_NO_EMAIL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_THIRD_SUPPLIER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_THIRD_WAREHOUSE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.EditSupplierDescriptorBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.EditWarehouseDescriptorBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String REMARK_EMPTY \u003d \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String MESSAGE_WAREHOUSE_EMAIL_PREFIX \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            String.format(MESSAGE_WAREHOUSE_NO_EMAIL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String MESSAGE_SUPPLIER_ADDRESS_PREFIX \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            String.format(MESSAGE_SUPPLIER_NO_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                    EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String MESSAGE_NO_INDEX_INPUT \u003d String.format(MESSAGE_NO_PREFIX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private static final String MESSAGE_TWO_INDEX_INPUT \u003d String.format("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            MESSAGE_INPUT_BOTH_SUPPLIER_WAREHOUSE_PREFIX, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + VALID_NAME_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_INDEX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_INDEX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + VALID_REMARK_AMY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_INDEX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + VALID_ADDRESS_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_INDEX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + VALID_EMAIL_AMY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_INDEX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NOT_EDITED, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"2 \","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NOT_EDITED, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // no type and no field specified"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \", String.format(MESSAGE_NO_PREFIX,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"2 \" + PREAMBLE_WHITESPACE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //no type specified"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \" + VALID_NAME_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \" + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \" + VALID_REMARK_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \" + VALID_ADDRESS_AMY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \" + VALID_EMAIL_AMY,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_NO_PREFIX, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"-5 \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + NAME_DESC_AMY2, MESSAGE_INVALID_INDEX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"-5 \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + WAREHOUSE_NAME_DESC_A2, MESSAGE_INVALID_INDEX + \"\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"0 \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + NAME_DESC_AMY2, MESSAGE_INVALID_INDEX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"0 \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + WAREHOUSE_NAME_DESC_A2, MESSAGE_INVALID_INDEX + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // invalid arguments being parsed as index"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 testing\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + NAME_DESC_AMY2, String.format(MESSAGE_INVALID_USAGE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 testing\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + WAREHOUSE_NAME_DESC_A2, String.format(MESSAGE_INVALID_USAGE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // invalid prefix being parsed as index"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \" z/testing\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_INVALID_PREFIX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \" z/testing\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_INVALID_PREFIX + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_NAME_DESC2, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + \"\\n\" + EditCommand.MESSAGE_USAGE); // invalid phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_ADDRESS_DESC, MESSAGE_SUPPLIER_ADDRESS_PREFIX); // address not allowed"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_REMARK_DESC, Remark.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_NAME_DESC_WAREHOUSE2, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + \"\\n\" + EditCommand.MESSAGE_USAGE); // invalid phone"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_EMAIL_DESC, MESSAGE_WAREHOUSE_EMAIL_PREFIX); // email not allowed"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_REMARK_DESC, Remark.MESSAGE_CONSTRAINTS); // invalid remark"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //invalid phone followed by valid address"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + INVALID_PHONE_DESC + ADDRESS_DESC_AMY, Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                        + \"\\n\" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + INVALID_NAME_DESC2 + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + PHONE_DESC_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + INVALID_NAME_DESC_WAREHOUSE2"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + INVALID_ADDRESS_DESC + PHONE_DESC_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //all fields for suppliers"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //all fields for warehouses"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + ADDRESS_DESC_AMY + WAREHOUSE_NAME_DESC_A2 + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_WAREHOUSE_NAME_A).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //some fields for suppliers"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //some fields for warehouses"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_SECOND_SUPPLIER;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_SECOND_WAREHOUSE;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + WAREHOUSE_NAME_DESC_A;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(VALID_WAREHOUSE_NAME_A).build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorSupplier \u003d new EditSupplierDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorSupplier \u003d new EditSupplierDescriptorBuilder().withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder().withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier only"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorSupplier \u003d new EditSupplierDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse only"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + EMAIL_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + ADDRESS_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PHONE_DESC_BOB + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d targetIndexSupplier.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_FIRST_WAREHOUSE;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d targetIndexWarehouse.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputSupplier \u003d targetIndexSupplier.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + REMARK_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        userInputWarehouse \u003d targetIndexWarehouse.getOneBased() + ADDRESS_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + REMARK_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_resetRemarks_success() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //supplier"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexSupplier \u003d INDEX_THIRD_SUPPLIER;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputSupplier \u003d \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexSupplier.getOneBased() + REMARK_EMPTY;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditSupplierDescriptor descriptorSupplier \u003d new EditSupplierDescriptorBuilder()"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withRemark(\"\").build();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandSupplier \u003d new EditCommand(targetIndexSupplier, descriptorSupplier);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputSupplier, expectedCommandSupplier);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //warehouse"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Index targetIndexWarehouse \u003d INDEX_THIRD_WAREHOUSE;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String userInputWarehouse \u003d \" \" + PREFIX_TYPE + \"w \" + PREFIX_INDEX"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                + targetIndexWarehouse.getOneBased() + REMARK_EMPTY;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditWarehouseDescriptor descriptorWarehouse \u003d new EditWarehouseDescriptorBuilder()"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withRemark(\"\").build();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        EditCommand expectedCommandWarehouse \u003d new EditCommand(targetIndexWarehouse, descriptorWarehouse);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, userInputWarehouse, expectedCommandWarehouse);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 1,
      "tohyuting": 340,
      "-": 71,
      "jeffreytjs": 24
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.supplier.SupplierPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "import seedu.clinic.model.warehouse.WarehousePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * Tests if {@code FindCommand} parses the arguments correctly for {@code Supplier} and {@code Warehouse}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_missingArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // Missing at least one of the name, product and remark prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/w\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // Missing the type prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" n/alex\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" pd/panadol\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" r/biggest\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" n/alex bernice pd/face\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" n/alex bernice r/biggest\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" pd/face mask r/biggest\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" n/alex bernice pd/face mask panadol r/biggest\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_invalidType_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/supplier pd/panadol\", String.format(ParserUtil.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/warehouse pd/panadol\", String.format(ParserUtil.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/pss pd/panadol\", String.format(ParserUtil.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/ps n/alex\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseFailure(parser, \" ct/pw pd/panadol\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                FindCommand.MESSAGE_INVALID_TYPE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    // Only the last prefix provided for type, name, product and remark will be accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_validArgsMultiplePrefixes_returnsFindCommandToFindSuppliers() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"cheap\", \"fast\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new FindCommand(new SupplierPredicate(nameKeywords, productKeywords, remarkKeywords));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" ct/s n/roy n/alex bernice pd/face mask and needle pd/panadol\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        + \" r/test remark r/cheap fast\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    // Only the last prefix provided for type, name, product and remark will be accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_validArgsMultiplePrefixes_returnsFindCommandToFindWarehouses() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"biggest\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new FindCommand(new WarehousePredicate(nameKeywords, productKeywords, remarkKeywords));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" ct/w n/roy n/alex bernice pd/face mask and needle pd/panadol\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                        + \" r/smallest r/biggest\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_validArgs_returnsFindCommandToFindSuppliers() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"cheap\", \"fast\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new FindCommand(new SupplierPredicate(nameKeywords, productKeywords, remarkKeywords));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" ct/s n/alex bernice pd/panadol r/cheap fast\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" \\n ct/s \\n \\t n/alex bernice pd/panadol \\t r/cheap fast\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void parse_validArgs_returnsFindCommandToFindWarehouses() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e productKeywords \u003d Arrays.asList(\"panadol\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        List\u003cString\u003e remarkKeywords \u003d Arrays.asList(\"biggest\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                new FindCommand(new WarehousePredicate(nameKeywords, productKeywords, remarkKeywords));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" ct/w n/alex bernice pd/panadol r/biggest\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        assertParseSuccess(parser, \" \\n ct/w \\n \\t n/alex \\t\\n bernice pd/panadol \\t r/biggest \\t\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengweii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhengweii": 102,
      "-": 22,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.MESSAGE_TOO_MANY_ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.HelpCommand.MESSAGE_WRONG_ARGUMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * Contains unit tests for {@code HelpCommandParser}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_emptyArg_showGenericMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"all\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedHelpCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_addAsArg_showAddMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"add\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"add\", expectedHelpCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"add       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"Add       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"Add\", expectedHelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"ADD       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"ADD\", expectedHelpCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"aDd\", expectedHelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"aDd       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_clearAsArg_showClearMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"clear\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"clear\", expectedHelpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"clear       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"CLEAR\", expectedHelpCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"CLEAR       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"Clear\", expectedHelpCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"Clear       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"CLEar\", expectedHelpCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"CLEar       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_deleteAsArg_showDeleteMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"delete\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"delete\", expectedHelpCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"delete       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"DELETE\", expectedHelpCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"DELETE       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"DELete\", expectedHelpCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"DELete       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_exitAsArg_showExitMessage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"exit\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"exit\", expectedHelpCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"exit       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"EXIT\", expectedHelpCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"EXIT       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"EXit\", expectedHelpCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"EXit       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_findAsArg_showFindMessage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"find\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"find\", expectedHelpCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"find       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"FIND\", expectedHelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"FiNd       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_listAsArg_showlistMessage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"list\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"list\", expectedHelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"list       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"LIST\", expectedHelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"LIST       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"LIst\", expectedHelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"LIst       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_viewAsArg_showViewMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"view\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"view\", expectedHelpCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"view       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"VIEW\", expectedHelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"VIEW       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"vIEw\", expectedHelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"vIEw       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_updateAsArg_showUpdateMessage() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        HelpCommand expectedHelpCommand \u003d new HelpCommand(\"update\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"update\", expectedHelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"update       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"UPDATE\", expectedHelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"UPDATE       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"UpDATe\", expectedHelpCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, \"UpDATe       \", expectedHelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_invalidCommandsAsArg_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"hello\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_WRONG_ARGUMENT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"adding\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_WRONG_ARGUMENT));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"findingWAREhouses\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_WRONG_ARGUMENT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_multipleCommandsAsArg_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"add find\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"list delete\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"DELETE EXIT\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"fakecommand EXIT\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"I WANT TO ADD\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_TOO_MANY_ARGUMENTS));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 141
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/MacroParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.WAREHOUSE_NAME_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.TypicalMacro.MACRO_AW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.TypicalMacro.getTypicalUserMacros;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "class MacroParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final MacroParser macroParser \u003d new MacroParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final Model model \u003d new ModelManager(new Clinic(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            new UserMacros(getTypicalUserMacros()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void parseMacro_macroFound_macroTranslated() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String additionalArguments \u003d WAREHOUSE_NAME_DESC_A + PHONE_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String inputString \u003d MACRO_AW.getAlias().aliasString + additionalArguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedOutput \u003d MACRO_AW.getSavedCommandString().internalString + additionalArguments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String parsedOutput \u003d macroParser.parseMacro(model, inputString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedOutput, parsedOutput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void parseMacro_macroNotFound_inputStringReturned() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String additionalArguments \u003d WAREHOUSE_NAME_DESC_A;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String inputString \u003d \"lorem\" + additionalArguments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedOutput \u003d \"lorem\" + additionalArguments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String parsedOutput \u003d macroParser.parseMacro(model, inputString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedOutput, parsedOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void parseMacro_macroFoundAndErroneousUserInput_macroTranslated() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String additionalArguments \u003d \" lorem ipsum\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String inputString \u003d MACRO_AW.getAlias().aliasString + additionalArguments;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedOutput \u003d MACRO_AW.getSavedCommandString().internalString + additionalArguments;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String parsedOutput \u003d macroParser.parseMacro(model, inputString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedOutput, parsedOutput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    void parseMacro_macroNotFoundAndErroneousUserInput_inputStringReturned() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String inputString \u003d \"lorem ipsum\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedOutput \u003d \"lorem ipsum\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String parsedOutput \u003d macroParser.parseMacro(model, inputString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedOutput, parsedOutput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 60
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.SUPPLIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.Type.WAREHOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalIndexes.INDEX_FIRST_SUPPLIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@Rachel Pte.Ltd\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_REMARK \u003d new String(new char[120]).replace(\u0027\\0\u0027, \u0027a\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_REMARK \u003d \"some remark.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(INDEX_FIRST_SUPPLIER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(INDEX_FIRST_SUPPLIER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseType_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_TYPE, ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e ParserUtil.parseType(\"a\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseType_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseType_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(SUPPLIER, ParserUtil.parseType(\"s\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(WAREHOUSE, ParserUtil.parseType(\"w\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(SUPPLIER, ParserUtil.parseType(\"  s  \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // some uppercase letters"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(SUPPLIER, ParserUtil.parseType(\"S\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseRemark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseRemark_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRemark(INVALID_REMARK));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_EMAIL);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // TODO: parseProduct test cases"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 59,
      "qlchan24": 2,
      "-": 185,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/UpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.DESC_PRODUCT_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_ENTITY_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_PRODUCT_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_PRODUCT_QUANTITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_NAME_DESC_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_QUANTITY_DESC_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.PRODUCT_QUANTITY_DESC_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.SUPPLIER_NAME_DESC_C;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_SUPPLIER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.TYPE_DESC_WAREHOUSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.WAREHOUSE_NAME_DESC_B;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.WAREHOUSE_NAME_DESC_C;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_TYPE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name expectedWarehouseName \u003d new Name(VALID_WAREHOUSE_NAME_A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name expectedSupplierName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Name expectedProductName \u003d new Name(VALID_PRODUCT_NAME_ASPIRIN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_C"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.WAREHOUSE, expectedWarehouseName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple warehouse names - last warehouse name accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_B + WAREHOUSE_NAME_DESC_C"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.WAREHOUSE, expectedWarehouseName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple supplier names - last supplier name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, SUPPLIER_NAME_DESC_C + NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.SUPPLIER, expectedSupplierName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple product names - last product name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_C + PRODUCT_NAME_DESC_B"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.WAREHOUSE, expectedWarehouseName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple product quantities - last product quantity accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_C + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_B + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.WAREHOUSE, expectedWarehouseName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // multiple entity types - last type accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseSuccess(parser, WAREHOUSE_NAME_DESC_C + SUPPLIER_NAME_DESC_C + NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new UpdateCommand(Type.SUPPLIER, expectedSupplierName, expectedProductName, DESC_PRODUCT_A));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, Type.WAREHOUSE + WAREHOUSE_NAME_DESC_C + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // missing entity name prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + VALID_WAREHOUSE_NAME_A + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // missing product name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_C + VALID_PRODUCT_NAME_ASPIRIN"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + WAREHOUSE_NAME_DESC_C + VALID_PRODUCT_NAME_ASPIRIN"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + VALID_WAREHOUSE_PRODUCT_QUANTITY_A, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_DESC + WAREHOUSE_NAME_DESC_C + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_A, MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid warehouse name"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_WAREHOUSE + INVALID_ENTITY_NAME_DESC + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + PRODUCT_QUANTITY_DESC_A, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid supplier name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + INVALID_ENTITY_NAME_DESC + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                + PRODUCT_QUANTITY_DESC_A, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid product name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + WAREHOUSE_NAME_DESC_C + INVALID_PRODUCT_NAME_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + PRODUCT_QUANTITY_DESC_A, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // invalid product quantity"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + WAREHOUSE_NAME_DESC_C + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + INVALID_PRODUCT_QUANTITY_DESC, MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_SUPPLIER + INVALID_ENTITY_NAME_DESC + PRODUCT_NAME_DESC_A"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + INVALID_PRODUCT_QUANTITY_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_SUPPLIER + WAREHOUSE_NAME_DESC_C"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                        + PRODUCT_NAME_DESC_A + PRODUCT_QUANTITY_DESC_A,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 131
    }
  },
  {
    "path": "src/test/java/seedu/clinic/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_INVALID_TYPE_VIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_INVALID_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_MISSING_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.ViewCommand.MESSAGE_NO_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.parser.ParserUtil.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private final Parser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_zeroKeywords_throwParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_NO_PREFIX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_NO_PREFIX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_onlyTypeNoIndex_throwParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_MISSING_INDEX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w \", String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_MISSING_INDEX, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_onlyIndexNoType_throwParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"3 \", String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_MISSING_TYPE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_INDEX + \"1 \", String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_MISSING_TYPE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_wrongTypeIndexPresent_throwParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"z \" + PREFIX_INDEX + \"1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"2 \" + PREFIX_INDEX + \"1\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"pw \" + PREFIX_INDEX + \"1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"ps \" + PREFIX_INDEX + \"3\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_TYPE_VIEW, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_correctTypeCorrectIndexExtraArguments_throwParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1\" + \" testing\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_USAGE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"w\" + \" testing \" + PREFIX_INDEX + \"1\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                String.format(MESSAGE_INVALID_USAGE, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + \" z/testing \" + PREFIX_INDEX + \"2\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_INVALID_PREFIX + \"\\n\" + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"2\" + \" z/testing\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                MESSAGE_INVALID_PREFIX + \"\\n\" + ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void parse_correctTypeCorrectIndex_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand expectedViewCommand1 \u003d new ViewCommand(Type.SUPPLIER, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"1\", expectedViewCommand1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        ViewCommand expectedViewCommand3 \u003d new ViewCommand(Type.WAREHOUSE, Index.fromOneBased(2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertParseSuccess(parser, PREFIX_TYPE + \"s \" + PREFIX_INDEX + \"2\", expectedViewCommand3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 83
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/ClinicTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalSupplierOnlyClinic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.getTypicalWarehouseOnlyClinic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.exceptions.DuplicateWarehouseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ClinicTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(Collections.emptyList(), clinic.getWarehouseList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(Collections.emptyList(), clinic.getSupplierList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e clinic.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void resetData_withValidReadOnlyClinic_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic newSupplierData \u003d getTypicalSupplierOnlyClinic();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.resetData(newSupplierData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(newSupplierData, clinic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic newWarehouseData \u003d getTypicalWarehouseOnlyClinic();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.resetData(newWarehouseData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(newWarehouseData, clinic);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic newData \u003d getTypicalClinic();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(newData, clinic);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void resetData_withDuplicateSuppliers_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // Two suppliers with the same identity fields"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        List\u003cSupplier\u003e newSuppliers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        SupplierOnlyClinicStub newData \u003d new SupplierOnlyClinicStub(newSuppliers);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e clinic.resetData(newData));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void resetData_withDuplicateWarehouses_throwsDuplicateWarehouseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // Two warehouses with the same identity fields"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cWarehouse\u003e newWarehouses \u003d Arrays.asList(A, editedA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        WarehouseOnlyClinicStub newData \u003d new WarehouseOnlyClinicStub(newWarehouses);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DuplicateWarehouseException.class, () -\u003e clinic.resetData(newData));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void hasSupplier_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e clinic.hasSupplier(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e clinic.hasWarehouse(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void hasSupplier_supplierNotInClinic_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(clinic.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_warehouseNotInClinic_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(clinic.hasWarehouse(A));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void hasSupplier_supplierInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.addSupplier(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(clinic.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_warehouseInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.addWarehouse(A);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(clinic.hasWarehouse(A));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void hasSupplier_supplierWithSameIdentityFieldsInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.addSupplier(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(clinic.hasSupplier(editedAlice));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_warehouseWithSameIdentityFieldsInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.addWarehouse(A);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(clinic.hasWarehouse(editedA));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e clinic.getSupplierList().remove(0));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getWarehouseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e clinic.getWarehouseList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * A stub ReadOnlyClinic whose suppliers list can violate interface constraints."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static class SupplierOnlyClinicStub implements ReadOnlyClinic {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        private final ObservableList\u003cSupplier\u003e suppliers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        private final ObservableList\u003cWarehouse\u003e warehouses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        SupplierOnlyClinicStub(Collection\u003cSupplier\u003e suppliers) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            this.suppliers.setAll(suppliers);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getSupplierList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            return suppliers;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public ObservableList\u003cWarehouse\u003e getWarehouseList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return warehouses;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * A stub ReadOnlyClinic whose warehouse list can violate interface constraints."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static class WarehouseOnlyClinicStub implements ReadOnlyClinic {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        private final ObservableList\u003cSupplier\u003e suppliers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        private final ObservableList\u003cWarehouse\u003e warehouses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        WarehouseOnlyClinicStub(Collection\u003cWarehouse\u003e warehouses) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.warehouses.setAll(warehouses);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public ObservableList\u003cSupplier\u003e getSupplierList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return suppliers;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        public ObservableList\u003cWarehouse\u003e getWarehouseList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return warehouses;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 89,
      "qlchan24": 15,
      "-": 59,
      "jeffreytjs": 30
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_SUPPLIERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.model.Model.PREDICATE_SHOW_ALL_WAREHOUSES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.TypicalMacro.MACRO_AS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForSupplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.NameContainsKeywordsPredicateForWarehouse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.ClinicBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.testutil.UserMacrosBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(new Clinic(), new Clinic(modelManager.getClinic()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(new UserMacros(), new UserMacros(modelManager.getUserMacros()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        userPrefs.setClinicFilePath(Paths.get(\"clinic/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userPrefs.setUserMacrosFilePath(Paths.get(\"userMacros/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        userPrefs.setClinicFilePath(Paths.get(\"new/clinic/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userPrefs.setUserMacrosFilePath(Paths.get(\"new/userMacros/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setClinicFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setClinicFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserMacrosFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setClinicFilePath_validPath_setsClinicFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Path path \u003d Paths.get(\"clinic/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        modelManager.setClinicFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(path, modelManager.getClinicFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath_validPath_setsUserMacrosFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Path path \u003d Paths.get(\"userMacros/book/file/path\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager.setUserMacrosFilePath(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(path, modelManager.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void hasSupplier_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSupplier(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasWarehouse(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void hasSupplierByName_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSupplier(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void hasMacro_nullMacro_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasMacro(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void hasSupplier_supplierNotInClinic_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_warehouseNotInClinic_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(modelManager.hasWarehouse(A));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void hasSupplierByName_supplierNotInClinic_returnsFalse() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void hasMacro_macroNotInUserMacros_returnsFalse() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.hasMacro(MACRO_AS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void hasSupplier_supplierInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void hasWarehouse_warehouseInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        modelManager.addWarehouse(A);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(modelManager.hasWarehouse(A));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void hasSupplierByName_supplierInClinic_returnsTrue() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        modelManager.addSupplier(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(modelManager.hasSupplier(ALICE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void hasMacro_macroInUserMacros_returnsTrue() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager.addMacro(MACRO_AS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(modelManager.hasMacro(MACRO_AS));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getMacro_macroInUserMacros_returnMacroInOptional() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager.addMacro(MACRO_AS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(modelManager.getMacro(MACRO_AS.getAlias()).orElseThrow(), MACRO_AS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(modelManager.getMacro(MACRO_AS.getAlias().aliasString).orElseThrow(), MACRO_AS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getMacro_macroNotInUserMacros_returnEmptyOptional() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(modelManager.getMacro(MACRO_AS.getAlias()).isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(modelManager.getMacro(MACRO_AS.getAlias().aliasString).isEmpty());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getFilteredSupplierList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredSupplierList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getFilteredWarehouseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e modelManager.getFilteredWarehouseList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getMacroList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            -\u003e modelManager.getMacroList().remove(0));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic clinic \u003d new ClinicBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withSupplier(ALICE)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withSupplier(BENSON)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withWarehouse(A)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withWarehouse(B)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacros userMacros \u003d new UserMacrosBuilder().withMacro(MACRO_AS).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic differentClinic \u003d new Clinic();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacros differentUserMacros \u003d new UserMacros();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager \u003d new ModelManager(clinic, userPrefs, userMacros);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(clinic, userPrefs, userMacros);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // different clinic -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentClinic, userPrefs, userMacros)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different userMacros -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clinic, userPrefs, differentUserMacros)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different filteredSupplierList -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        modelManager.updateFilteredSupplierList(new NameContainsKeywordsPredicateForSupplier("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                ALICE.getName().fullName));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clinic, userPrefs, userMacros)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different filteredWarehouseList -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        modelManager.updateFilteredWarehouseList(new NameContainsKeywordsPredicateForWarehouse("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                A.getName().fullName));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clinic, userPrefs, userMacros)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        modelManager.updateFilteredSupplierList(PREDICATE_SHOW_ALL_SUPPLIERS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        modelManager.updateFilteredWarehouseList(PREDICATE_SHOW_ALL_WAREHOUSES);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        differentUserPrefs.setClinicFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clinic, differentUserPrefs, userMacros)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 37,
      "qlchan24": 65,
      "tohyuting": 26,
      "-": 93,
      "jeffreytjs": 21
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setClinicFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setClinicFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setUserMacrosFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 4,
      "-": 19,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(Address.isValidAddress(\" dsfas\")); // spaces at the start only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Name.isValidName(\"/\")); // no forward slash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Address.isValidAddress(\"CCK/Yew Tee\")); // contains slash within string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Address.isValidAddress(\"Kidzania z/Weekend\")); // contains slash as a non-matching prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Address address \u003d new Address(\"Address Name\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expected \u003d \"Address Name\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(address.toString(), expected);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same instance"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Address addressFirst \u003d new Address(\"address\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(addressFirst.equals(addressFirst));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same remark value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Address addressSecond \u003d new Address(\"address\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(addressFirst.equals(addressSecond));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different remark"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Address addressThird \u003d new Address(\"remark 2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(addressFirst.equals(addressThird));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different class types"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String addressString \u003d \"address\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(addressFirst.equals(addressString));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 31,
      "-": 34,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // default email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "-": 52,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/NameContainsKeywordsPredicateForSupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class NameContainsKeywordsPredicateForSupplierTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String firstPredicateKeywordWithSpaces \u003d \"first keywords\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String secondPredicateKeywordWithSpaces \u003d \"second keywords\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier firstPredicateWithSpaces \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(firstPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier secondPredicateWithSpaces \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(secondPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(firstPredicateWithSpaces.equals(firstPredicateWithSpaces));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(firstPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(firstPredicateWithSpaces.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(secondPredicateWithSpaces));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(\"Alice\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // Non-alphanumeric keywords included"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicateForSupplier(\"Pte.Ltd \u0026\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Pte.Ltd \u0026\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // keywords containing spaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicateForSupplier(\"Bernice Yu Pte Ltd\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(predicate.test(new SupplierBuilder().withName(\"Bernice Yu Pte Ltd\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForSupplier predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForSupplier(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicateForSupplier(\"Carol\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(predicate.test(new SupplierBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "qlchan24": 3,
      "tohyuting": 23,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/NameContainsKeywordsPredicateForWarehouseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class NameContainsKeywordsPredicateForWarehouseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String firstPredicateKeywordWithSpaces \u003d \"first keywords\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        String secondPredicateKeywordWithSpaces \u003d \"second keywords\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse firstPredicateWithSpaces \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(firstPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse secondPredicateWithSpaces \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(secondPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(firstPredicateWithSpaces.equals(firstPredicateWithSpaces));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(firstPredicateKeywordWithSpaces.equals(firstPredicateKeywordWithSpaces));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(firstPredicateKeywordWithSpaces);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(firstPredicateWithSpaces.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(firstPredicateWithSpaces.equals(secondPredicateWithSpaces));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(\"Alice\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(predicate.test(new WarehouseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // keywords with spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicateForWarehouse(\"Alice Bob\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(predicate.test(new WarehouseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        NameContainsKeywordsPredicateForWarehouse predicate \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                new NameContainsKeywordsPredicateForWarehouse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(predicate.test(new WarehouseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicateForWarehouse(\"Carol\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(predicate.test(new WarehouseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 10,
      "qlchan24": 1,
      "tohyuting": 20,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(Name.isValidName(\"*peter\")); // starts with a non-alphanumeric character"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Name.isValidName(\"/\")); // no forward slash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Name.isValidName(\"Michael/Mike\")); // contains slash within string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Name.isValidName(\"Tze z/Sian\")); // contains slash as a non-matching prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Name.isValidName(\"McDonald\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(Name.isValidName(\"M \u0026 M \\\\~`[]{}|;\u0027:\\\",.\u003c\u003e?\")); // alphabets with various printable"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // characters except forward slash (i.e. \u0027/\u0027)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Name.isValidName(\"Starbucks.ltd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Name.isValidName(\"123Cat Pte.Ltd\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Name.isValidName(\"Blah !@#$%^\u0026*()_+-\u003d\")); // with various printable characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd Ltd\")); // long names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "-": 33,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private String remarkWithMoreThanOneHundredCharacters \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque a augue quis dui efficitur \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"facilisis. Nullam eget libero ultricies, consequat purus eget, fermentum nisl. Aliquam \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"tempor ante ut quam blandit feugiat. Nulla ac dui egestas, porttitor neque vitae, suscipit \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"neque. Proin dapibus condimentum erat, non pretium sem dignissim et. Integer egestas nunc \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"vel lectus sagittis gravida. Morbi sit amet pharetra sem, et feugiat est. Sed a felis.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"Morbi pulvinar tortor eu arcu commodo ultricies. Suspendisse quis ornare velit. Vivamus ut \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"convallis arcu. Ut vel blandit urna. Mauris ac felis erat. Aliquam cursus nunc quis egestas \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"dictum. Duis ac metus nec leo viverra congue. Nulla a accumsan turpis. Phasellus mollis \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"sollicitudin turpis, vel pretium mauris. Proin ut iaculis arcu. Maecenas tristique id \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"sapien id viverra. Integer malesuada molestie ex id convallis. Donec sed tempor nulla\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"placerat urna non augue dignissim, a dictum elit bibendum. Nunc sollicitudin, est vitae \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"viverra dapibus, sem ante rutrum orci, quis ullamcorper massa tellus sit amet lorem. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                    + \"Curabitur at mi id erat venenatis elementum ut congue lectu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(remarkWithMoreThanOneHundredCharacters));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void isValidWarehouse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid remarks: spaces only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // invalid remarks: contains forward slash"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Name.isValidName(\"/\")); // no forward slash"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // invalid remarks: contains forward slash within string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"Monday/Tuesday\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // invalid remarks: contains forward slash as a non-matching prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"Remark z/Weekend\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // invalid remarks: remark exceed the 100 char limit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(Remark.isValidRemark(remarkWithMoreThanOneHundredCharacters));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // valid remarks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Some remark\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"-\")); // one character"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Some longer remark: blah blah blah blah\")); // long remark"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark remark \u003d new Remark(\"Warehouse Name\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expected \u003d \"Warehouse Name\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(remark.toString(), expected);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same instance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark remarkFirst \u003d new Remark(\"remark\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(remarkFirst.equals(remarkFirst));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same remark value"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark remarkSecond \u003d new Remark(\"remark\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(remarkFirst.equals(remarkSecond));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different remark"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Remark remarkThird \u003d new Remark(\"remark 2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(remarkFirst.equals(remarkThird));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different class types"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String remarkString \u003d \"remark\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(remarkFirst.equals(remarkString));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 78,
      "jeffreytjs": 6
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/attribute/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/product/ProductTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalProductSupplier.SANITIZER_SUPPLIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalProductSupplier.SURGICAL_MASK_SUPPLIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalProductWarehouse.SANITIZER_WAREHOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalProductWarehouse.SURGICAL_MASK_WAREHOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.ProductBuilderSupplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.testutil.ProductBuilderWarehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ProductTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void isSameProductSupplier() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(SANITIZER_SUPPLIER.equals(SANITIZER_SUPPLIER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SANITIZER_SUPPLIER.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedSanitizerSupplier \u003d new ProductBuilderSupplier(SANITIZER_SUPPLIER)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(\"Lifebuoy\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SANITIZER_SUPPLIER.equals(editedSanitizerSupplier));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different name and tag -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedMaskSupplier \u003d new ProductBuilderSupplier(SURGICAL_MASK_SUPPLIER).withName(\"housebrand\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withTags(\"protects\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SURGICAL_MASK_SUPPLIER.equals(editedMaskSupplier));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different tag, same name -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedMaskTagsSupplier \u003d new ProductBuilderSupplier(SURGICAL_MASK_SUPPLIER)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withTags(\"protects\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(SURGICAL_MASK_SUPPLIER.equals(editedMaskTagsSupplier));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public void isSameProductWarehouse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(SANITIZER_WAREHOUSE.equals(SANITIZER_WAREHOUSE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SANITIZER_WAREHOUSE.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedSanitizerWarehouse \u003d new ProductBuilderWarehouse(SANITIZER_WAREHOUSE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(\"Lifebuoy\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SANITIZER_WAREHOUSE.equals(editedSanitizerWarehouse));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different name and quantity -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedMaskWarehouse \u003d new ProductBuilderWarehouse(SURGICAL_MASK_WAREHOUSE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withName(\"housebrand\").withQuantity(100).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertFalse(SURGICAL_MASK_WAREHOUSE.equals(editedMaskWarehouse));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        //different quantity, same name -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Product editedMaskTagsWarehouse \u003d new ProductBuilderWarehouse(SURGICAL_MASK_WAREHOUSE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withQuantity(100).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(SURGICAL_MASK_WAREHOUSE.equals(editedMaskTagsWarehouse));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 64
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/supplier/SupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SupplierTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier supplier \u003d new SupplierBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e supplier.getProducts().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void isSameSupplier() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(ALICE.isSameSupplier(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS})).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS})).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS})).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(ALICE.isSameSupplier(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Supplier aliceCopy \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                new SupplierBuilder(ALICE).withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        editedAlice \u003d new SupplierBuilder(ALICE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS})).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 26,
      "tohyuting": 4,
      "-": 59,
      "jeffreytjs": 13
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/supplier/UniqueSupplierListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.supplier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.exceptions.DuplicateSupplierException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.exceptions.SupplierNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.SupplierBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UniqueSupplierListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private final UniqueSupplierList uniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void contains_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void contains_supplierNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertFalse(uniqueSupplierList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void contains_supplierInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(uniqueSupplierList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void contains_supplierWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertTrue(uniqueSupplierList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void add_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void add_duplicateSupplier_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e uniqueSupplierList.add(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_nullTargetSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSupplier(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_nullEditedSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_targetSupplierNotInList_throwsSupplierNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(SupplierNotFoundException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_editedSupplierIsSameSupplier_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedUniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_editedSupplierHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Supplier editedAlice \u003d new SupplierBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedUniqueSupplierList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_editedSupplierHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.setSupplier(ALICE, BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSupplier_editedSupplierHasNonUniqueIdentity_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(DuplicateSupplierException.class, () -\u003e uniqueSupplierList.setSupplier(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void remove_nullSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void remove_supplierDoesNotExist_throwsSupplierNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(SupplierNotFoundException.class, () -\u003e uniqueSupplierList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void remove_existingSupplier_removesSupplier() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers_nullUniqueSupplierList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSuppliers((UniqueSupplierList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers_uniqueSupplierList_replacesOwnListWithProvidedUniqueSupplierList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.setSuppliers(expectedUniqueSupplierList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSupplierList.setSuppliers((List\u003cSupplier\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.add(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        List\u003cSupplier\u003e supplierList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        uniqueSupplierList.setSuppliers(supplierList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UniqueSupplierList expectedUniqueSupplierList \u003d new UniqueSupplierList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        expectedUniqueSupplierList.add(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(expectedUniqueSupplierList, uniqueSupplierList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setSuppliers_listWithDuplicateSuppliers_throwsDuplicateSupplierException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        List\u003cSupplier\u003e listWithDuplicateSuppliers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                DuplicateSupplierException.class, () -\u003e uniqueSupplierList.setSuppliers(listWithDuplicateSuppliers));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            -\u003e uniqueSupplierList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 165,
      "jeffreytjs": 10
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/warehouse/UniqueWarehouseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.model.warehouse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_TAG_HEADACHE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.exceptions.DuplicateWarehouseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.exceptions.WarehouseNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class UniqueWarehouseListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final UniqueWarehouseList uniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void contains_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void contains_warehouseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(uniqueWarehouseList.contains(A));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void contains_warehouseInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(uniqueWarehouseList.contains(A));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void contains_warehouseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_TAG_HEADACHE, VALID_WAREHOUSE_PRODUCT_QUANTITY_B))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(uniqueWarehouseList.contains(editedA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void add_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void add_duplicateWarehouse_throwsDuplicateWarehouseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DuplicateWarehouseException.class, () -\u003e uniqueWarehouseList.add(A));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse_nullTargetSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.setWarehouse(null, A));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse_nullEditedWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.setWarehouse(A, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void setWarehouse_targetWarehouseNotInList_throwsWarehouseNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(WarehouseNotFoundException.class, () -\u003e uniqueWarehouseList.setWarehouse(A, A));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void setWarehouse_editedWarehouseIsSameWarehouse_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.setWarehouse(A, A);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedUniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse_editedWarehouseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_TAG_HEADACHE, VALID_WAREHOUSE_PRODUCT_QUANTITY_B))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.setWarehouse(A, editedA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedUniqueWarehouseList.add(editedA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void setWarehouse_editedWarehouseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.setWarehouse(A, B);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedUniqueWarehouseList.add(B);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse_editedWarehouseHasNonUniqueIdentity_throwsDuplicateWarehouseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(B);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DuplicateWarehouseException.class, () -\u003e uniqueWarehouseList.setWarehouse(A, B));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void remove_nullWarehouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void remove_warehouseDoesNotExist_throwsWarehouseNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(WarehouseNotFoundException.class, () -\u003e uniqueWarehouseList.remove(A));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void remove_existingWarehouse_removesWarehouse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.remove(A);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses_nullUniqueWarehouseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.setWarehouses((UniqueWarehouseList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses_uniqueWarehouseList_replacesOwnListWithProvidedUniqueWarehouseList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedUniqueWarehouseList.add(B);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.setWarehouses(expectedUniqueWarehouseList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueWarehouseList.setWarehouses((List\u003cWarehouse\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void setWarehouses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.add(A);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cWarehouse\u003e supplierList \u003d Collections.singletonList(B);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        uniqueWarehouseList.setWarehouses(supplierList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        UniqueWarehouseList expectedUniqueWarehouseList \u003d new UniqueWarehouseList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        expectedUniqueWarehouseList.add(B);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(expectedUniqueWarehouseList, uniqueWarehouseList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouses_listWithDuplicateWarehouses_throwsDuplicateWarehouseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cWarehouse\u003e listWithDuplicateWarehouses \u003d Arrays.asList(A, A);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DuplicateWarehouseException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e uniqueWarehouseList.setWarehouses(listWithDuplicateWarehouses));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e uniqueWarehouseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 170,
      "zhengweii": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/model/warehouse/WarehouseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.model.warehouse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_ADDRESS_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PHONE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.testutil.WarehouseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "class WarehouseTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse warehouse \u003d new WarehouseBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e warehouse.getProducts().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void isSameWarehouse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.isSameWarehouse(A));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.isSameWarehouse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different phone and address -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withPhone(VALID_WAREHOUSE_PHONE_B)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withAddress(VALID_WAREHOUSE_ADDRESS_B).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.isSameWarehouse(editedA));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withName(VALID_WAREHOUSE_NAME_B).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.isSameWarehouse(editedA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withAddress(VALID_WAREHOUSE_ADDRESS_B).withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.isSameWarehouse(editedA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withPhone(VALID_WAREHOUSE_PHONE_B).withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.isSameWarehouse(editedA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.isSameWarehouse(editedA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Warehouse aCopy \u003d new WarehouseBuilder(A)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_WAREHOUSE_PRODUCT_QUANTITY_A)).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.equals(aCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertTrue(A.equals(A));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different warehouse -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(B));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Warehouse editedA \u003d new WarehouseBuilder(A).withName(VALID_WAREHOUSE_NAME_B).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(editedA));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withPhone(VALID_WAREHOUSE_PHONE_B).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(editedA));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withAddress(VALID_WAREHOUSE_ADDRESS_B).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(editedA));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A).withRemark(VALID_WAREHOUSE_REMARK_B).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(editedA));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // different product -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        editedA \u003d new WarehouseBuilder(A)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B)).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertFalse(A.equals(editedA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 98,
      "jeffreytjs": 7
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/JsonAdaptedSupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.storage.JsonAdaptedSupplier.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class JsonAdaptedSupplierTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_NAME \u003d \"*!Rachel @\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String INVALID_REMARK \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_PRODUCT_NAME \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_PRODUCT_TAG \u003d \"friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private static final List\u003cJsonAdaptedProduct\u003e VALID_PRODUCTS \u003d BENSON.getProducts().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_validSupplierDetails_returnsSupplier() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(BENSON, supplier.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonAdaptedSupplier(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_invalidRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedMessage \u003d Remark.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                VALID_PRODUCTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, supplier::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidProductsTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        List\u003cJsonAdaptedProduct\u003e invalidProducts \u003d new ArrayList\u003c\u003e(VALID_PRODUCTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedProduct invalidProduct \u003d new JsonAdaptedProduct(VALID_NAME,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List.of(new JsonAdaptedTag(INVALID_TAG)), 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        invalidProducts.add(invalidProduct);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidProducts);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertThrows(IllegalValueException.class, supplier::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidProductsName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cJsonAdaptedProduct\u003e invalidProducts \u003d new ArrayList\u003c\u003e(VALID_PRODUCTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedProduct invalidProduct \u003d new JsonAdaptedProduct(INVALID_PRODUCT_NAME,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List.of(new JsonAdaptedTag(VALID_PRODUCT_TAG)), 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        invalidProducts.add(invalidProduct);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidProducts);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, supplier::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullProductsName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cJsonAdaptedProduct\u003e invalidProducts \u003d new ArrayList\u003c\u003e(VALID_PRODUCTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedProduct invalidProduct \u003d new JsonAdaptedProduct(null,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List.of(new JsonAdaptedTag(INVALID_TAG)), 0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        invalidProducts.add(invalidProduct);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedSupplier supplier \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedSupplier(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidProducts);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, supplier::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 30,
      "qlchan24": 42,
      "-": 62,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/JsonAdaptedWarehouseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.storage.JsonAdaptedWarehouse.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class JsonAdaptedWarehouseTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_NAME \u003d \"*Rachel @\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_REMARK \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final List\u003cJsonAdaptedProduct\u003e VALID_PRODUCTS \u003d BENSON.getProducts().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_validWarehouseDetails_returnsWarehouse() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d new JsonAdaptedWarehouse(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(BENSON, warehouse.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d new JsonAdaptedWarehouse(null, VALID_PHONE, VALID_ADDRESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d new JsonAdaptedWarehouse(VALID_NAME, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                VALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, VALID_ADDRESS, INVALID_REMARK, VALID_PRODUCTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d Remark.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, VALID_ADDRESS, null,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                VALID_PRODUCTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, warehouse::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidProductsQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cJsonAdaptedProduct\u003e invalidProducts \u003d new ArrayList\u003c\u003e(VALID_PRODUCTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedProduct invalidProduct \u003d new JsonAdaptedProduct(VALID_NAME,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new ArrayList\u003c\u003e(), -1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        invalidProducts.add(invalidProduct);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_REMARK, invalidProducts);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, warehouse::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_nullProductsName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cJsonAdaptedProduct\u003e invalidProducts \u003d new ArrayList\u003c\u003e(VALID_PRODUCTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedProduct invalidProduct \u003d new JsonAdaptedProduct(null,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new ArrayList\u003c\u003e(), 10);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        invalidProducts.add(invalidProduct);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonAdaptedWarehouse warehouse \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                new JsonAdaptedWarehouse(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_REMARK, invalidProducts);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, warehouse::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 125
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/JsonClinicStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalSupplierOnlyClinic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.HENRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.IRVIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.testutil.TypicalWarehouse.getTypicalWarehouseOnlyClinic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class JsonClinicStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonClinicStorageTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void readClinic_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readClinic(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private java.util.Optional\u003cReadOnlyClinic\u003e readClinic(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new JsonClinicStorage(Paths.get(filePath)).readClinic(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertFalse(readClinic(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClinic(\"notJsonFormatClinic.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void readClinic_invalidSupplierClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClinic(\"invalidSupplierClinic.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readClinic_invalidWarehouseClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClinic(\"invalidWarehouseClinic.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readClinic_duplicateSupplierClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClinic(\"duplicateSupplierClinic.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readClinic_duplicateWarehouseClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClinic(\"duplicateWarehouseClinic.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void readClinic_invalidAndValidSupplierClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e readClinic(\"invalidAndValidSupplierClinic.json\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readClinic_invalidAndValidWarehouseClinic_throwDataConversionException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            -\u003e readClinic(\"invalidAndValidWarehouseClinic.json\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readAndSaveSupplierOnlyClinic_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempClinic.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic originalSupplierOnly \u003d getTypicalSupplierOnlyClinic();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonClinicStorage jsonClinicStorage \u003d new JsonClinicStorage(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalSupplierOnly, filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ReadOnlyClinic readBack \u003d jsonClinicStorage.readClinic(filePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalSupplierOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalSupplierOnly.addSupplier(HOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalSupplierOnly.removeSupplier(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalSupplierOnly, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        readBack \u003d jsonClinicStorage.readClinic(filePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalSupplierOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalSupplierOnly.addSupplier(IDA);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalSupplierOnly); // file path not specified"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        readBack \u003d jsonClinicStorage.readClinic().get(); // file path not specified"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalSupplierOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void readAndSaveWarehouseOnlyClinic_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempClinic.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic originalWarehouseOnly \u003d getTypicalWarehouseOnlyClinic();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonClinicStorage jsonClinicStorage \u003d new JsonClinicStorage(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalWarehouseOnly, filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ReadOnlyClinic readBack \u003d jsonClinicStorage.readClinic(filePath).get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalWarehouseOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalWarehouseOnly.addWarehouse(HENRY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalWarehouseOnly.removeWarehouse(BENSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalWarehouseOnly, filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        readBack \u003d jsonClinicStorage.readClinic(filePath).get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalWarehouseOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        originalWarehouseOnly.addWarehouse(IRVIN);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        jsonClinicStorage.saveClinic(originalWarehouseOnly); // file path not specified"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        readBack \u003d jsonClinicStorage.readClinic().get(); // file path not specified"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(originalWarehouseOnly, new Clinic(readBack));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic_nullClinic_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveClinic(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Saves {@code clinic} at the specified {@code filePath}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private void saveClinic(ReadOnlyClinic clinic, String filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            new JsonClinicStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    .saveClinic(clinic, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveClinic_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveClinic(new Clinic(), null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 69,
      "jeffreytjs": 96
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/JsonSerializableClinicTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalSupplierOnlyClinic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.testutil.TypicalWarehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class JsonSerializableClinicTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableClinicTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final Path TYPICAL_SUPPLIERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSuppliersClinic.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final Path INVALID_SUPPLIER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSupplierClinic.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static final Path DUPLICATE_SUPPLIER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateSupplierClinic.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Path TYPICAL_WAREHOUSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalWarehousesClinic.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Path INVALID_WAREHOUSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWarehouseClinic.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static final Path DUPLICATE_WAREHOUSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateWarehouseClinic.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_typicalSuppliersFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SUPPLIERS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic clinicFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Clinic typicalSuppliersClinic \u003d getTypicalSupplierOnlyClinic();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(clinicFromFile, typicalSuppliersClinic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_invalidSupplierFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SUPPLIER_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void toModelType_duplicateSuppliers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SUPPLIER_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableClinic.MESSAGE_DUPLICATE_SUPPLIER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_typicalWarehousesFile_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_WAREHOUSES_FILE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic clinicFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Clinic typicalWarehousesClinic \u003d TypicalWarehouse.getTypicalWarehouseOnlyClinic();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(clinicFromFile, typicalWarehousesClinic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toModelType_invalidWarehouseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(INVALID_WAREHOUSE_FILE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    public void toModelType_duplicateWarehouses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        JsonSerializableClinic dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_WAREHOUSE_FILE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                JsonSerializableClinic.class).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableClinic.MESSAGE_DUPLICATE_WAREHOUSE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 27,
      "qlchan24": 3,
      "tohyuting": 2,
      "zhengweii": 1,
      "-": 23,
      "jeffreytjs": 18
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        userPrefs.setClinicFilePath(Paths.get(\"clinic.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userPrefs.setUserMacrosFilePath(Paths.get(\"userMacros.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 1,
      "qlchan24": 3,
      "-": 115,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import static seedu.clinic.testutil.TypicalMacro.getTypicalUserMacros;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.TypicalSupplier.getTypicalClinic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonClinicStorage clinicStorage \u003d new JsonClinicStorage(getTempFilePath(\"clinic\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        JsonUserMacrosStorage userMacrosStorage \u003d new JsonUserMacrosStorage(getTempFilePath(\"userMacros\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        storageManager \u003d new StorageManager(clinicStorage, userPrefsStorage, userMacrosStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void clinicReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "         * {@link JsonClinicStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonClinicStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Clinic original \u003d getTypicalClinic();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        storageManager.saveClinic(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ReadOnlyClinic retrieved \u003d storageManager.readClinic().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(original, new Clinic(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void userMacrosReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * {@link JsonUserMacrosStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserMacrosStorageTest} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacros original \u003d getTypicalUserMacros();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        storageManager.saveUserMacros(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        ReadOnlyUserMacros retrieved \u003d storageManager.readUserMacros().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertEquals(original, new UserMacros(retrieved));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void getClinicFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertNotNull(storageManager.getClinicFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        assertNotNull(storageManager.getUserMacrosFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 24,
      "-": 51,
      "jeffreytjs": 15
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/ClinicBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * A utility class to help with building Clinic objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " *     {@code Clinic clinic \u003d new ClinicBuilder().withSupplier(ALICE).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ClinicBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Clinic clinic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ClinicBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ClinicBuilder(Clinic clinic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.clinic \u003d clinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds a new {@code Supplier} to the {@code Clinic} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ClinicBuilder withSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        clinic.addSupplier(supplier);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds a new {@code Warehouse} to the {@code Clinic} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ClinicBuilder withWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        clinic.addWarehouse(warehouse);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Clinic build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 10,
      "qlchan24": 1,
      "jeffreytjs": 32
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/EditSupplierDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class to help with building EditSupplierDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class EditSupplierDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private EditSupplierDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder(EditSupplierDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.descriptor \u003d new EditSupplierDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an {@code EditSupplierDescriptor} with fields containing {@code Supplier}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder(Supplier supplier) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor \u003d new EditSupplierDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setName(supplier.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setPhone(supplier.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setEmail(supplier.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setRemark(supplier.getRemark());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setProducts(supplier.getProducts());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Name} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Email} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditSupplierDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the {@code productMap} into a {@code Set\u003cProduct\u003e} and set it to the {@code EditSupplierDescriptor}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * @param productMap"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptorBuilder withProducts(Map\u003cString, String[]\u003e productMap) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cProduct\u003e productSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (String productName:productMap.keySet()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Set\u003cTag\u003e productTags \u003d Arrays.stream(productMap.get(productName))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    .map(Tag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            Product product \u003d new Product(new Name(productName), productTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            productSet.add(product);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setProducts(productSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public EditSupplierDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "qlchan24": 89,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/EditWarehouseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditWarehouseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * A utility class to help with building EditWarehouseDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class EditWarehouseDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private EditWarehouseDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor \u003d new EditWarehouseDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder(EditWarehouseDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.descriptor \u003d new EditWarehouseDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an {@code EditWarehouseDescriptor} with fields containing {@code Warehouse}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder(Warehouse warehouse) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor \u003d new EditWarehouseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setName(warehouse.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setPhone(warehouse.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setAddress(warehouse.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setRemark(warehouse.getRemark());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setProducts(warehouse.getProducts());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Name} of the {@code EditWarehouseDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditWarehouseDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Address} of the {@code EditWarehouseDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditWarehouseDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Parses the {@code productMap} into a {@code Set\u003cProduct\u003e} and set it to the {@code EditWarehouseDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param productMap"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public EditWarehouseDescriptorBuilder withProducts(Map\u003cString, Integer\u003e productMap) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Set\u003cProduct\u003e productSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (String productName: productMap.keySet()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Product product \u003d new Product(new Name(productName), productMap.get(productName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            productSet.add(product);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        descriptor.setProducts(productSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public EditWarehouseDescriptor build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 84,
      "tohyuting": 9
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/MacroBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.SavedCommandString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class to help with building Macro objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class MacroBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_SAVED_COMMAND_STRING \u003d \"update\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Alias alias;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private SavedCommandString savedCommandString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code MacroBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public MacroBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        alias \u003d new Alias(DEFAULT_ALIAS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        savedCommandString \u003d new SavedCommandString(DEFAULT_SAVED_COMMAND_STRING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Initializes the MacroBuilder with the data of {@code macroToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public MacroBuilder(Macro macroToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        alias \u003d macroToCopy.getAlias();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        savedCommandString \u003d macroToCopy.getSavedCommandString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Alias} of the {@code Macro} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public MacroBuilder withAlias(String alias) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.alias \u003d new Alias(alias);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code SavedCommandString} of the {@code Macro} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public MacroBuilder withSavedCommandString(String savedCommandString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.savedCommandString \u003d new SavedCommandString(savedCommandString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Macro build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Macro(alias, savedCommandString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 53
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.ReadOnlyClinic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserMacros;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Alias;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Path getUserMacrosFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ReadOnlyUserMacros getUserMacros() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacrosFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setUserMacros(ReadOnlyUserMacros userMacros) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public boolean hasMacro(Macro macro) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Optional\u003cMacro\u003e getMacro(String aliasString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override public Optional\u003cMacro\u003e getMacro(Alias alias) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void deleteMacro(Macro target) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void addMacro(Macro macro) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public void setMacro(Macro target, Macro editedMacro) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public ObservableList\u003cMacro\u003e getMacroList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Path getClinicFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setClinicFilePath(Path clinicFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void addSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setClinic(ReadOnlyClinic newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ReadOnlyClinic getClinic() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean hasSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void deleteSupplier(Supplier target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setSupplier(Supplier target, Supplier editedSupplier) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cSupplier\u003e getFilteredSupplierList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void updateFilteredSupplierList(Predicate\u003cSupplier\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean hasWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void deleteWarehouse(Warehouse target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void addWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void setWarehouse(Warehouse target, Warehouse editedWarehouse) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ObservableList\u003cWarehouse\u003e getFilteredWarehouseList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void updateFilteredWarehouseList(Predicate\u003cWarehouse\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 114,
      "qlchan24": 58
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/ProductBuilderSupplier.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * A utility class to help with building Product objects for Supplier."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ProductBuilderSupplier {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Thermometer\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Set\u003cTag\u003e DEFAULT_TAGS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private Name productName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private Set\u003cTag\u003e productTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Creates a {@code ProductBuilderSupplier} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderSupplier() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productTags \u003d DEFAULT_TAGS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Initializes the ProductBuilderSupplier with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderSupplier(Product productToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productName \u003d productToCopy.getProductName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productTags \u003d productToCopy.getProductTags();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Sets the {@code Name} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderSupplier withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productName \u003d new Name(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Product} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderSupplier withTags(String... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productTags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new Product(productName, productTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 57
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/ProductBuilderWarehouse.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * A utility class to help with building Product objects for Warehouse."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class ProductBuilderWarehouse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Thermometer\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 50;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private Name productName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private int productQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Creates a {@code ProductBuilderWarehouse} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderWarehouse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productQuantity \u003d DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Initializes the ProductBuilderWarehouse with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderWarehouse(Product productToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productName \u003d productToCopy.getProductName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        productQuantity \u003d productToCopy.getProductQuantity();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Sets the {@code Name} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderWarehouse withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productName \u003d new Name(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     * Sets the quantity of the {@code Product} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public ProductBuilderWarehouse withQuantity(int productQuantity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new Product(productName, productQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 52
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/SupplierBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class to help with building Supplier objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SupplierBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Trusted Supplier\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private Set\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Creates a {@code SupplierBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Initializes the SupplierBuilder with the data of {@code supplierToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder(Supplier supplierToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        name \u003d supplierToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        phone \u003d supplierToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        email \u003d supplierToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        remark \u003d supplierToCopy.getRemark();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Name} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the {@code productsMap} into a {@code Set\u003cProduct\u003e} and set it to the {@code Supplier} that we are"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder withProducts(Map\u003cString, String[]\u003e productMap) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.products \u003d SampleDataUtil.getProductSet(products, productMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Remark} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Phone} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code Email} of the {@code Supplier} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public SupplierBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public Supplier build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new Supplier(name, phone, email, remark, products);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 88,
      "zhengweii": 1,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/SupplierUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_SUPPLIER_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.logic.commands.EditCommand.EditSupplierDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class for Supplier."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class SupplierUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an add command string for adding the {@code supplier}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static String getAddCommand(Supplier supplier) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getSupplierDetails(supplier);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String getAddProductCommand(Supplier supplier, Product product) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        sb.append(AddProductCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        sb.append(PREFIX_SUPPLIER_NAME + supplier.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        sb.append(PREFIX_PRODUCT_NAME + product.getProductName().fullName + \" \" + PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        product.getProductTags().stream().forEach("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            s -\u003e sb.append(s.tagName)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the part of command string for the given {@code supplier}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static String getSupplierDetails(Supplier supplier) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(PREFIX_NAME + supplier.getName().fullName + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(PREFIX_PHONE + supplier.getPhone().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(PREFIX_EMAIL + supplier.getEmail().value + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        sb.append(PREFIX_REMARK + supplier.getRemark().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (Product product:supplier.getProducts()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            sb.append(PREFIX_PRODUCT_NAME + product.getProductName().fullName + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            product.getProductTags().stream().forEach("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the part of command string for the given {@code EditSupplierDescriptor}\u0027s details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static String getEditSupplierDescriptorDetails(EditSupplierDescriptor descriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (descriptor.getProducts().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cProduct\u003e products \u003d descriptor.getProducts().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        if (products.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            sb.append(PREFIX_PRODUCT_NAME).append(\" \").append(PREFIX_TAG);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            for (Product product:products) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                sb.append(PREFIX_PRODUCT_NAME + product.getProductName().fullName + \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                product.getProductTags().stream().forEach("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                    s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "                );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 16,
      "qlchan24": 27,
      "-": 31,
      "jeffreytjs": 11
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the middle index of the supplier in the {@code model}\u0027s supplier list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Index getMidIndexSupplier(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSupplierList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the last index of the supplier in the {@code model}\u0027s supplier list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Index getLastIndexSupplier(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSupplierList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns the supplier in the {@code model}\u0027s supplier list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static Supplier getSupplier(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return model.getFilteredSupplierList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns the middle index of the warehouse in the {@code model}\u0027s warehouse list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Index getMidIndexWarehouse(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWarehouseList().size() / 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns the last index of the warehouse in the {@code model}\u0027s warehouse list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Index getLastIndexWarehouse(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWarehouseList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns the warehouse in the {@code model}\u0027s warehouse list at {@code index}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Warehouse getWarehouse(Model model, Index index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return model.getFilteredWarehouseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 24,
      "qlchan24": 7,
      "-": 42,
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Index INDEX_FIRST_SUPPLIER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Index INDEX_SECOND_SUPPLIER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Index INDEX_THIRD_SUPPLIER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Index INDEX_FIRST_WAREHOUSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Index INDEX_SECOND_WAREHOUSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Index INDEX_THIRD_WAREHOUSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 4,
      "qlchan24": 3,
      "-": 7,
      "jeffreytjs": 2
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalMacro.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class TypicalMacro {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_AW \u003d new MacroBuilder().withAlias(\"aw\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"add ct/w\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_AS \u003d new MacroBuilder().withAlias(\"as\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"add ct/s\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_US \u003d new MacroBuilder().withAlias(\"us\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"update ct/s\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_UW \u003d new MacroBuilder().withAlias(\"uw\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"update ct/w\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_VW \u003d new MacroBuilder().withAlias(\"vw\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"view ct/w\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Macro MACRO_VS \u003d new MacroBuilder().withAlias(\"vs\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withSavedCommandString(\"view ct/s\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private TypicalMacro() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an {@code UserMacros} with all the typical macros."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static UserMacros getTypicalUserMacros() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        UserMacros userMacros \u003d new UserMacros();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (Macro macro : getTypicalMacros()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            userMacros.addMacro(macro);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static List\u003cMacro\u003e getTypicalMacros() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MACRO_AS, MACRO_AW, MACRO_US, MACRO_UW, MACRO_VS, MACRO_VW));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 42
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalProductSupplier.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * A utility class containing a list of {@code Product} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class TypicalProductSupplier {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product DEFAULT_PRODUCT \u003d new ProductBuilderSupplier().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    //Manually Added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product SANITIZER_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"Dettol Sanitizer\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"germsfree\", \"topchoice\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product SURGICAL_MASK_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"Surgical mask\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"cheap\", \"durable\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product PLASTER_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"Plaster\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"waterproof\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product CHARCOAL_PILL_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"Charcoal Pills\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"diarrhoea\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product LATEX_GLOVES_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"Latex Gloves\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"durable\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product STETHOSCOPE_SUPPLIER \u003d new ProductBuilderSupplier().withName(\"stethoscope\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(\"professional\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    // Manually added - Product\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product ASPIRIN_SUPPLIER \u003d new ProductBuilderSupplier().withName(VALID_PRODUCT_NAME_ASPIRIN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product PANADOL_SUPPLIER \u003d new ProductBuilderSupplier().withName(VALID_PRODUCT_NAME_PANADOL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withTags(VALID_TAG_FEVER, VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private TypicalProductSupplier() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProductSupplier() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SANITIZER_SUPPLIER, SURGICAL_MASK_SUPPLIER, PLASTER_SUPPLIER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                CHARCOAL_PILL_SUPPLIER, LATEX_GLOVES_SUPPLIER, STETHOSCOPE_SUPPLIER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                ASPIRIN_SUPPLIER, PANADOL_SUPPLIER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 49
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalProductWarehouse.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " * A utility class containing a list of {@code Product} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohyuting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "public class TypicalProductWarehouse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product DEFAULT_PRODUCT \u003d new ProductBuilderWarehouse().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    //Manually Added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product SANITIZER_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"Dettol Sanitizer\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(50).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product SURGICAL_MASK_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"Surgical mask\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(50).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product PLASTER_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"Plaster\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(200).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product CHARCOAL_PILL_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"Charcoal Pills\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(500).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product LATEX_GLOVES_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"Latex Gloves\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(30).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product STETHOSCOPE_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(\"stethoscope\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(400).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    // Manually added - Product\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product ASPIRIN_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(VALID_PRODUCT_NAME_ASPIRIN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(VALID_PRODUCT_QUANTITY_A).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Product PANADOL_WAREHOUSE \u003d new ProductBuilderWarehouse().withName(VALID_PRODUCT_NAME_PANADOL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            .withQuantity(VALID_PRODUCT_QUANTITY_B).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    private TypicalProductWarehouse() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProductSupplier() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SANITIZER_WAREHOUSE, SURGICAL_MASK_WAREHOUSE, PLASTER_WAREHOUSE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                CHARCOAL_PILL_WAREHOUSE, LATEX_GLOVES_WAREHOUSE, STETHOSCOPE_WAREHOUSE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "                ASPIRIN_WAREHOUSE, PANADOL_WAREHOUSE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohyuting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohyuting": 49
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalSupplier.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_ASPIRIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_PRODUCT_NAME_PANADOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_ANTIBIOTICS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.supplier.Supplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class containing a list of {@code Supplier} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class TypicalSupplier {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier ALICE \u003d new SupplierBuilder().withName(\"Alice Pauline Ltd\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withRemark(\"long term supplier\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier BENSON \u003d new SupplierBuilder().withName(\"Benson Meier Ltd\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withRemark(\"trusted supplier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier CARL \u003d new SupplierBuilder().withName(\"Carl Kurz Ltd\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withEmail(\"heinz@example.com\").withRemark(\"cheap\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Mask\", new String[]{\"black\"}))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Thermometer\", new String[]{\"digital\"})).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier DANIEL \u003d new SupplierBuilder().withName(\"Daniel Meier Ltd\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withRemark(\"premium prices\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withProducts(Map.of(\"Panadol\", new String[]{\"fever\"})).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier ELLE \u003d new SupplierBuilder().withName(\"Elle Meyer Ltd\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withEmail(\"werner@example.com\").withRemark(\"industry leader\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Mask\", new String[]{\"black\"}))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Medical Glove\", new String[]{\"rubber\"})).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier FIONA \u003d new SupplierBuilder().withName(\"Fiona Kunz Ltd\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withEmail(\"lydia@example.com\").withRemark(\"cheap and fast deliveries\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Mask\", new String[]{\"black\"}))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Needle\", new String[]{\"1mm\"}))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Cough Syrup\", new String[]{\"cough\"})).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier GEORGE \u003d new SupplierBuilder().withName(\"George Best Ltd\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(\"anna@example.com\").withRemark(\"frequent discount\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier HOON \u003d new SupplierBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(\"stefan@example.com\").withRemark(\"small company\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier IDA \u003d new SupplierBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(\"hans@example.com\").withRemark(\"big supplier\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    // Manually added - Supplier\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier AMY \u003d new SupplierBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withProducts(Map.of(VALID_PRODUCT_NAME_PANADOL, new String[]{VALID_TAG_FEVER})).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static final Supplier BOB \u003d new SupplierBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "            .withProducts(Map.of(VALID_PRODUCT_NAME_ASPIRIN, new String[]{VALID_TAG_ANTIBIOTICS}))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private TypicalSupplier() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an {@code Clinic} with all the typical suppliers and warehouses."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static Clinic getTypicalClinic() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        for (Supplier supplier : getTypicalSuppliers()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.addSupplier(supplier);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        for (Warehouse warehouse : TypicalWarehouse.getTypicalWarehouses()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.addWarehouse(warehouse);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns an {@code Clinic} with all the typical suppliers."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Clinic getTypicalSupplierOnlyClinic() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (Supplier supplier : getTypicalSuppliers()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.addSupplier(supplier);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public static List\u003cSupplier\u003e getTypicalSuppliers() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 10,
      "qlchan24": 31,
      "tohyuting": 10,
      "zhengweii": 10,
      "-": 28,
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/TypicalWarehouse.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_ADDRESS_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_ADDRESS_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_NAME_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PHONE_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PHONE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_NAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_PRODUCT_QUANTITY_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static seedu.clinic.logic.commands.CommandTestUtil.VALID_WAREHOUSE_REMARK_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.Clinic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengweii"
        },
        "content": " * A utility class containing a list of {@code Warehouse} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class TypicalWarehouse {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "    public static final Warehouse ALICE \u003d new WarehouseBuilder().withName(\"Alice Warehouse\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withRemark(\"Warehouse 1 biggest\").withAddress(\"alice address\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Gauze\", 100)).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse BENSON \u003d new WarehouseBuilder().withName(\"Warehouse Benson\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withRemark(\"Warehouse 2 near central\").withAddress(\"benson address\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(\"94351453\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Towel\", 200)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse CARL \u003d new WarehouseBuilder().withName(\"Warehouse Carl\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(\"Warehouse 3\").withAddress(\"carl address\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withPhone(\"94361253\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Cough Syrup\", 20)).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse DANIEL \u003d new WarehouseBuilder().withName(\"Warehouse Daniel\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(\"Warehouse 4\").withAddress(\"daniel address\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(\"94351233\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withProducts(Map.of(\"Panadol\", 1)).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse ELLE \u003d new WarehouseBuilder().withName(\"Warehouse Elle\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(\"Warehouse 5\").withAddress(\"elle address\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withPhone(\"94651253\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Cough Syrup\", 30))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Medical Glove\", 50)).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse FIONA \u003d new WarehouseBuilder().withName(\"Warehouse Fiona\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(\"Warehouse 10\").withAddress(\"fiona address\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(\"92351253\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Flu Syrup\", 1000))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Medical Glove\", 50))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "            .withProducts(Map.of(\"Syringe\", 500)).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse GEORGE \u003d new WarehouseBuilder().withName(\"Warehouse George\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(\"Warehouse to be removed\").withAddress(\"george address\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(\"84351253\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withProducts(Map.of(\"Panadol\", 50)).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse HENRY \u003d new WarehouseBuilder().withName(\"Warehouse Henry\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withAddress(\"some address\").withRemark(\"small warehouse\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse IRVIN \u003d new WarehouseBuilder().withName(\"Irvin\u0027s Warehouse\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withAddress(\"hans@35 prince george.\").withRemark(\"big warehouse\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "    // Manually added - Warehouse\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse A \u003d new WarehouseBuilder().withName(VALID_WAREHOUSE_NAME_A)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(VALID_WAREHOUSE_PHONE_A)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withAddress(VALID_WAREHOUSE_ADDRESS_A)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(VALID_WAREHOUSE_REMARK_A)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_A, VALID_WAREHOUSE_PRODUCT_QUANTITY_A))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final Warehouse B \u003d new WarehouseBuilder().withName(VALID_WAREHOUSE_NAME_B)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withPhone(VALID_WAREHOUSE_PHONE_B)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withAddress(VALID_WAREHOUSE_ADDRESS_B)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withRemark(VALID_WAREHOUSE_REMARK_B)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .withProducts(Map.of(VALID_WAREHOUSE_PRODUCT_NAME_B, VALID_WAREHOUSE_PRODUCT_QUANTITY_B))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private TypicalWarehouse() {} // prevents instantiation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "     * Returns an {@code Clinic} with all the typical warehouses."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Clinic getTypicalWarehouseOnlyClinic() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        Clinic clinic \u003d new Clinic();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (Warehouse warehouse : getTypicalWarehouses()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "            clinic.addWarehouse(warehouse);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohyuting"
        },
        "content": "        return clinic;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static List\u003cWarehouse\u003e getTypicalWarehouses() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 80,
      "tohyuting": 4,
      "zhengweii": 15
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/UpdateProductDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.logic.commands.UpdateCommand.UpdateProductDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.attribute.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class to help with building UpdateProductDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UpdateProductDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private UpdateProductDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor \u003d new UpdateProductDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptorBuilder(UpdateProductDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.descriptor \u003d new UpdateProductDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Returns an {@code UpdateProductDescriptor} with fields containing {@code product}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptorBuilder(Product product) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor \u003d new UpdateProductDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setQuantity(product.getProductQuantity());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setTags(product.getProductTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Sets the {@code quantity} of the {@code UpdateProductDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptorBuilder withQuantity(int quantity) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setQuantity(quantity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdateProductDescriptor}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UpdateProductDescriptor build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 55
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/UserMacrosBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.UserMacros;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import seedu.clinic.model.macro.Macro;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * A utility class to help with building userMacros objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " *     {@code UserMacros userMacros \u003d new UserMacrosBuilder().withMacro(MACRO_A).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qlchan24"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "public class UserMacrosBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    private UserMacros userMacros;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacrosBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacros \u003d new UserMacros();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacrosBuilder(UserMacros userMacros) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        this.userMacros \u003d userMacros;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     * Adds a new {@code Supplier} to the {@code Clinic} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacrosBuilder withMacro(Macro macro) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        userMacros.addMacro(macro);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qlchan24"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public UserMacros build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "        return userMacros;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qlchan24": 34
    }
  },
  {
    "path": "src/test/java/seedu/clinic/testutil/WarehouseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import seedu.clinic.model.attribute.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.model.warehouse.Warehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " * A utility class to help with building Warehouse objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class WarehouseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Jurong East Branch\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Headquarter branch\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private Set\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a {@code WarehouseBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Initializes the WarehouseBuilder with the data of {@code warehouseToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder(Warehouse warehouseToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        name \u003d warehouseToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        phone \u003d warehouseToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        address \u003d warehouseToCopy.getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        remark \u003d warehouseToCopy.getRemark();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Name} of the {@code Warehouse} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Parses the {@code products} into a {@code Set\u003cProduct\u003e} and set it to the {@code Warehouse} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qlchan24"
        },
        "content": "    public WarehouseBuilder withProducts(Map\u003cString, Integer\u003e productMap) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengweii"
        },
        "content": "        this.products \u003d SampleDataUtil.getProductSetForWarehouse(products, productMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Address} of the {@code Warehouse} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Phone} of the {@code Warehouse} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets the {@code Email} of the {@code Warehouse} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public WarehouseBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Warehouse build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Warehouse(name, phone, address, remark, products);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 87,
      "qlchan24": 2,
      "zhengweii": 1,
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/test/java/seedu/clinic/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/java/seedu/clinic/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package seedu.clinic.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static seedu.clinic.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import seedu.clinic.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "jeffreytjs": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import seedu.clinic.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "jeffreytjs": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003cfx:root type\u003d\"seedu.clinic.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "jeffreytjs": 1
    }
  }
]
