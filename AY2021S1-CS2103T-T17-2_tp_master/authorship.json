[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T17-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "# SWEe!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* It is named `SWEe!` (`Software Engineering Everyday!`) as we want users to use the product daily as a means to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "improve their learning."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* Example Usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    * Create new flashcards with questions and answers"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    * Review all flashcards one by one"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    * Quiz yourself with the created flashcards"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* For the detailed documentation of this project, see the **[SWEe! Website](https://ay2021s1-cs2103t-t17-2.github.io/tp/)**."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "sgn00": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "mainClassName \u003d \u0027seedu.flashcard.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    archiveName \u003d \u0027swee.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "### Kimberly Ong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "\u003cimg src\u003d\"images/kimberlyohq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "[[github](https://github.com/kimberlyohq)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "[[portfolio](team/kimberlyohq.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* Role: Code Quality + Integration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "### Ng Song Guan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cimg src\u003d\"images/sgn00.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "[[github](http://github.com/sgn00)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "[[portfolio](team/sgn00.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### Melvin Ong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003cimg src\u003d\"images/moyj01.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "[[github](https://github.com/moyj01)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "[[portfolio](team/moyj01.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "### Ong Si Min"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003cimg src\u003d\"images/minzzelo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "[[github](http://github.com/minzzelo)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "[[portfolio](team/minzzelo.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "### Tan Zhuo Yao"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cimg src\u003d\"images/tanzhuoyao-nus.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "[[github](http://github.com/tanzhuoyao-nus)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "[[portfolio](team/tanzhuoyao-nus.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "minzzelo": 3,
      "-": 38,
      "tanzhuoyao-nus": 3,
      "kimberlyohq": 5,
      "sgn00": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### \\[Implemented\\] Add Feature "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "moyj01"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "moyj01"
        },
        "content": "The Add feature "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "moyj01"
        },
        "content": "The add feature is facilitated by `LogicManager` and `ModelManager`. The add command supports the following inputs from the user"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* q/QUESTION"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* a/ANSWER"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* c/CATEGORY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* n/NOTE"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* r/RATING"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* d/DIAGRAM"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* t/TAG"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Question and answer are mandatory inputs while the rest are optional inputs. When the user adds a flashcard, the user’s inputs will be passed on to `ParserUtil`. `ParserUtil` will conduct input validation and trim any leading and trailing whitespaces. If the user’s inputs are valid and there are no duplicate flashcard, a `Flashcard` object will be created and added to the `FlashcardDeck`. Otherwise `ParseException` will be thrown and the relevant error message will be displayed to the user. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "moyj01"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `AddCommand#execute()` - Add the flashcard to the `ModelManager` and `FlashcardDeck`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `AddCommandParser# parse (String args)` - Conduct input validation and parse user’s input"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "moyj01"
        },
        "content": "The following sequence diagram shows how the `add` operation works:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "moyj01"
        },
        "content": "![AddSequenceDiagram](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sgn00"
        },
        "content": "### \\[Implemented\\] Review feature"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sgn00"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sgn00"
        },
        "content": "The review mechanism is implemented mainly via `MainWindow`. The review feature is a UI feature so `MainWindow` maintains the necessary UI state "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sgn00"
        },
        "content": "and keeps track of whether the application is in review mode. Review mode is facilitated by `ReviewManager` which keeps track of the review state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sgn00"
        },
        "content": "It maintains the list of `Flashcard` and the `currentIndex` at which the user is at."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sgn00"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `ReviewManager#hasNextFlashcard` - determines if there are any more flashcards in the flashcard list after the flashcard specified by the `currentIndex`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `ReviewManager#hasPreviousFlashcard` - determines if there are any previous flashcards in the flashcard list before the flashcard specified by the `currentIndex`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `ReviewManager#getCurrentFlashcard` - returns flashcard at `currentIndex` in the flashcard list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `ReviewManager#getPreviousFlashcard` - decrements `currentIndex` by 1 and returns the associated flashcard"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `ReviewManager#getNextFlashcard` - increments `currentIndex` by 1 and returns the associated flashcard"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Given below is an example of how the undo/redo mechanism behaves at each step:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Step 2. The user executes `review` command. `MainWindow` will receive a `CommandResult` and calls `CommandResult#isReviewMode` which returns true. `MainWindow#handleReview` is then called to enter review mode."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Step 3. In `MainWindow#handleReview`, the UI elements are altered, a listener is set up to listen for arrow key presses and a new `ReviewManager` is created to keep track of state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Step 4. Depending on the key presses, different operations of `ReviewManager` are called. The flashcard to render in the UI is determined by the various `ReviewManager` operations and the state as mentioned above."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Step 5. If user presses `q` or runs out of flashcards to review, `MainWindow#exitReviewMode` is called which places the application back in normal command mode."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sgn00"
        },
        "content": "The following sequence diagram gives an overview of how the application enters review mode:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sgn00"
        },
        "content": "![ReviewSequenceDiagram](images/ReviewSequenceDiagram.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sgn00"
        },
        "content": "The following activity diagram summarises the control path in review mode set up by `ReviewManager#handleReview`:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sgn00"
        },
        "content": "![ReviewActivityDiagram](images/ReviewActivityDiagram.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sgn00"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sgn00"
        },
        "content": "##### Aspect: How review mode executes"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Alternative 1 (current choice):** Handle review mode directly in UI."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  * Pros: Truly interactive review where user can use key presses instead of typing commands."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  * Cons: UI will have to implement some logic."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Alternative 2:** Handle review mode through the command textbox."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  * Pros: Allows for better abstraction through separation of UI and logic."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  * Cons: Poorer user experience as reviewing will be slow since user has to type in command one by one."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "### \\[Proposed\\] Sort feature"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "The proposed sort mechanism is facilitated by `ModelManager`. `reviewFrequency` and `successRate` attributes is stored internally in `Flashcard`, to keep track of review frequency and correctness percentage respectively based on the review activity done by the user. When the user enters review mode, the user activity will be tracked and the data will be sent and stored inside the individual `Flashcard`. This activity will then be used to facilitate the sort mechanism. "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `ModelManager#updateSortedFlashcardList(Comparator \u003cFlashcard\u003e)` - sorts the flashcard list according to a given condition, and updates the flashcard list shown."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `Flashcard#incrementReviewFrequency()` - increases the review frequency of a flashcard."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `Flashcard#incrementSuccessRate()` - increases the success rate of a flashcard."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `Flashcard#decrementSuccessRate()` - decreases the success rate of a flashcard."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "The `ModelManager#updateSortedFlashcardList(Comparator\u003cFlashcard\u003e)` operation is exposed in the `Model` interface as `Model#updateSortedFlashcardList(Comparator \u003cFlashcard\u003e)`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Given below is an example usage scenario and how the sort mechanism behaves at each step."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "![SortState0](images/SortState0.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Step 2. The user executes `review` command to review the flashcard deck. The user reviews 3 out of 5 flashcards and exits review mode. The review command calls `Flashcard#incrementReviewFrequency()` for each flashcard that has been reviewed and `Flashcard#incrementSuccessRate()` or `Flashcard#decrementSuccessRate()` depending on whether the user successfully answers the question."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "![SortState1](images/SortState1.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Step 3. The user executes `sort leastReviewed`. The `sort` command calls `Model#updateSortedFlashcardList`, causing the flashcards to be sorted by review frequency, in ascending order."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "![SortState2](images/SortState2.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "The following sequence diagram shows how the sort operation works:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "![SortSequenceDiagram](images/SortSequenceDiagram.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `SortCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "![SortActivityDiagram](images/SortActivityDiagram.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "##### Aspect: How sort executes"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Alternative 1 (current choice):** Stores statistics in Flashcard and compares flashcard directly."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "  * Cons: Flashcard will have to keep track of many data."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Alternative 2:** Using a data structure (e.g. HashMap) to store statistics."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "  * Pros: Will use more memory, since the HashMap will have to be committed to local storage too."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "  * Cons: We must ensure that the any changes/updates to a flashcard will be reflected in the HashMap."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### \\[Implemented\\] Favourite/Unfavourite feature "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "moyj01"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "The favourite/unfavourite mechanism is faciliated by `LogicManager` and `ModelManager`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "A `isFavourite` attribute is stored internally in `Flashcard`, to keep track of whether the flashcard is favourited. When the user favourites a flashcard, `isFavourite` is set to true, and set to false otherwise. "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* `Flashcard#isFavourite()` - Checks whether the current flashcard is favourited"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* `FavCommand#createFavouriteFlashcard(Flashcard flashcardToFavourite)` - Duplicates the flashcard and set `isFavourite` attribute to `true`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* `UnfavCommand#createUnfavouriteFlashcard(Flashcard flashcardToUnfavourite)` - Duplicates the flashcard and set `isFavourite` attribute to `false`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Given below is an example usage scenario and how the favourite/unfavourite mechanism behaves at each step."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Step 1: The user launches the application "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![FavUnfavState0](images/FavUnfavState0.png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Step 2: The user executes `fav 1` command to favourite the 1st flashcard in the displayed flashcard deck. `fav` Command calls "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`Flashcard#isFavourite()` method to check whether the flashcard at index 1, `f1`,  has been favourited. If the flashcard is not favourited, "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`fav` Command calls `FavCommand#createFavouriteFlashcard(f1)` to create a new flashcard, `fav1`,  by duplicating the existing data fields and set the `isFavourite` attribute to `true`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`fav` Command then calls `ModelManager#setFlashcard(f1, fav1)` to replace the current flashcard, `f1`,  with the favourited flashcard, `fav1`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![FavUnfavState1](images/FavUnfavState1.png)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "The following sequence diagram shows how the `fav` operation works:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![FavouriteSequenceDiagram](images/FavouriteSequenceDiagram.png)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Step 3: The user executes `unfav 1` command to unfavourite the 1st flashcard in the displayed flashcard deck. `unfav` Command calls "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`Flashcard#isFavourite()` method to check whether the flashcard at index 1, `fav1`,  has been favourited. `fav1` is favourited in step 2, hence, "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`unfav` Command calls `UnfavCommand#createUnfavouriteFlashcard(fav1)` to create a new flashcard, `f1`,  by duplicating the existing data fields and set the `isFavourite` attribute to `false`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "`unfav` Command then calls `ModelManager#setFlashcard(fav1, f1)` to replace the current flashcard, `fav1`,  with the unfavourited flashcard, `f1`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![FavUnfavState2](images/FavUnfavState2.png)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "The following sequence diagram shows how the `unfav` operation works:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![UnfavouriteSequenceDiagram](images/UnfavouriteSequenceDiagram.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a favourite/unfavourite command:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "![FavouriteUnfavouriteActivityDiagram.png](images/FavouriteUnfavouriteActivityDiagram.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "##### Aspect: How fav \u0026 unfav executes"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Alternative 1 (current choice):** Creates a new flashcard everytime `isFavourite` changes"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "  * Pros: Flashcard remains immutable."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "  * Cons: Execution time is longer compared to Alternative 2 since a new flashcard is created if flashcard\u0027s state changes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Alternative 2:** Toggle `isFavourite` using a setter such as `setFavouriteStatus` in `Flashcard`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "  * Pros: Easy to implement as there is no need to create a new flashcard every time the state is changed."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "  * Cons: Flashcard would not be immutable"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### \\[Implemented\\] Filter feature"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "moyj01"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "The filtering mechanism is facilitated by `LogicManager` and `ModelManager`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "It works when the `LogicManager` listens for a filter command input from the user and"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "parses the command to filter out relevant flashcards based on the category or categories "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "chosen. The filter feature supports filtering of multiple categories by parsing the command"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "using `ParserUtil.parseCategories(Collection\u003cString\u003e categories)`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* `FilterCommand#execute(Model model)` to update `Model` to show only the filtered flashcards"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* `CategoryEqualsKeywordsPredicate#test(Flashcard flashcard)` to check every flashcard in `Model` against the list of "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "categories parsed from `FilterCommandParser#parse(String args)`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* `ModelManager#updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate)` takes in a predicate to update "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "`filteredFlashcards` attribute within  `ModelManager`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Given below is an example usage scenario and how the filter mechanism behaves at each step."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Step 2: The user executes `filter c/SDLC` command to filter and display all the flashcards in the flashcard deck"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "belonging to SDLC category. `LogicManager` calls   `FlashcardDeckParser#parseCommand(String args))` and   "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "`FilterCommandParser#parse(String args)` to ultimately return a `FilterCommand` object."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Step 3: After parsing, `LogicManager` then calls `FilterCommand#execute(Model model)`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Step 4: `FilterCommand` then updates the list of filtered flashcards by calling "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "`Model#updateFilteredFlashcardList(predicate)`."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Step 5: A `CommandResult` is generated and Model updates the `filteredFlashcardList` which is then updated"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "in the UI."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "The following sequence diagram shows how the filter operation works:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " ![FilterSequenceDiagram](images/FilterSequenceDiagram.png)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " The following activity diagram shows how the `filter` command works when a user executes it:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " ![FilterActivityDiagram](images/FilterActivityDiagram.png)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* has a need to manage a significant number of flashcards"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* Remind students on what is due soon"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* Help students keep track of their CS2103T progress (assignments, results)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* Provide students with the ease of access to CS2103T content"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* Aid students in learning and revision of CS2103T topics (through flashcards and “self-quiz”)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "| `* * *`  | busy student                               | add a new flashcard            |                                                                        |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "| `* * *`  | student                                    | delete a flashcard             | remove entries that that are not relevant or helpful to my learning.   |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "| `* * *`  | student                                    | list the flashcards            |                                                                        |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "| `* * *`  | student                                    | review the flashcards          |                                                                        |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "(For all use cases below, the **System** is the `FlashcardList` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "**Use case: Delete a flashcard**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "1.  User requests to list flashcards"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "2.  FlashcardList shows a list of flashcards"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "3.  User requests to delete a specific flashcard in the list"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "4.  FlashcardList deletes the flashcard"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    * 3a1. FlashcardList shows an error message."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "2.  Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "moyj01": 29,
      "minzzelo": 72,
      "-": 341,
      "tanzhuoyao-nus": 38,
      "sgn00": 47,
      "kimberlyohq": 58
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "   1. Run the `seedu.flashcard.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "   e.g. `seedu.flashcard.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "   e.g. `seedu.flashcard.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "   e.g. `seedu.flashcard.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "SWEe! is a  **desktop app for CS2103T students to manage their learning progress mainly through flashcards**. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands. If you can type fast, SWEe! can create your CS2103T flashcards faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - Quick start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Adding a flashcard: `add`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Deleting a flashcard: `delete`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Listing all flashcards: `list`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Review all flashcards : `review`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        - Favourite a flashcard : `fav`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        - Unfavourite a flashcard: `unfav`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Exiting the program: `exit`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        - View a flashcard: `view`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        - Saving the data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - FAQ"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - Command summary"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "1. Download the latest `swee.jar` from [here](https://github.com/AY2021S1-CS2103T-T17-2/tp/releases)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for SWEe!."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "1. Type the command in the command box and press Enter to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "   * **`add q/What does OOP stand for? a/Object Oriented Programming c/General`** : Adds a flashcard with a question and answer into the General category."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "   * **`delete 3`**: Deletes the 3rd flashcard in the current list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "   * **`edit 2 q/What is a revision control software? a/It is the software tool that automate the process of Revision Control`**: Edits the 2nd flashcard in the current list with the specified attributes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "   * **`list`** : Lists all flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "   * **`review`** : Reviews the current list of flashcards."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "   * **`fav 1`** : Favourite the 1st flashcard in the current list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "      "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "   * **`unfav 1`** : Unfavourite the 1st flashcard in the current list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "   "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "   * **`view 1`** : Views the 1st flashcard in the current list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "  e.g. in add `q/QUESTION`, `QUESTION` is a parameter which can be used as `add q/`What is my name?"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "  e.g `q/QUESTION [c/CATEGORY]` can be used as `q/What is my name? c/topic 1` or as `q/What is my name?`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "  e.g. if the command specifies `q/QUESTION a/ANSWER, a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### Adding a flashcard : `add`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Adds a flashcard."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Format: `add q/QUESTION a/ANSWER [c/CATEGORY] [r/RATING] [n/NOTE] [d/DIAGRAM]`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* If a rating is specified, it must be a number between 1 and 5 inclusive. It is intended to follow the star rating on CS2103T website."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* Diagram can be defined by a valid relative or absolute path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moyj01"
        },
        "content": "If the category does not exist, it will be created."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `add q/What does OOP stand for? a/Object Oriented Programming c/General`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `add q/What does OOP stand for? a/Object Oriented Programming`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `add q/What does OOP stand for? a/Object Oriented Programming c/General n/Important question!`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `add q/What does OOP stand for? a/Object Oriented Programming d/images/diagram`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* `add q/What does OOP stand for? a/Object Oriented Programming c/General n/Important question! d/images/diagram`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### Deleting a flashcard  : `delete`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Deletes the specified flashcard."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* Deletes the flashcard at the specified INDEX."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moyj01"
        },
        "content": "*  `list` followed by `delete 2` deletes the 2nd flashcard in the flashcard list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "### Editing a flashcard  : `edit`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Edits a flashcard."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [a/ANSWER] [c/CATEGORY] [n/NOTE] [r/RATING] [d/DIAGRAM]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* Edits the flashcard at the specified INDEX."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* At least one attribute must be given"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* Specifying empty values to note or rating eg. `r/` will remove the corresponding field in the flashcard."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `edit 3 q/What does OOP stand for? a/Object Oriented Programming c/General`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `edit 3 q/What does OOP stand for? a/Object Oriented Programming`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* `edit 3 n/Important question!`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "### Filtering out flashcards  : `filter`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Filters the specified flashcard based on category input(s) by user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Format: `filter c/CATEGORY`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* Filters the specified flashcard based on category."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* Supports filtering of one or more categories. For example:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* `filter c/SDLC c/Revision History`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "*  `filter` followed by `c/SDLC` filters and lists all flashcards belonging n the SDLC category."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### Listing all flashcards : `list`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Shows a list of all flashcards."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "moyj01"
        },
        "content": "### Reviewing all flashcards: `review`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Reviews the current list of flashcards. This puts the user in review mode and the user can no longer input commands to the textbox."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Format: `review`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* `review` followed by:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    - `[down key]` shows answer and notes of the current flashcard"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    - `[up key]` hides answer and notes of the current flashcard"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - `[right key]` skips the current flashcard and moves on to the next flashcard"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    - `[left key]` returns the previous flashcard"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    - `q` quits review mode"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "### Favourite a flashcard  : `fav`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Favourites the specified flashcard."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Format: `fav INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* Favourite the flashcard at the specified INDEX."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "### Unfavourite a flashcard  : `unfav`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Unfavourite the specified flashcard."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Format: `unfav INDEX`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* Unfavourite the flashcard at the specified INDEX."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sgn00"
        },
        "content": "### Views a flashcard  : `view`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sgn00"
        },
        "content": "View the specified flashcard. A \"snapshot\" of the flashcard is taken and displayed in the view pane to the user.  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: Note: If the viewed flashcard is changed (eg. edited or deleted), the view shown remains unchanged."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* View the flashcard at the specified INDEX."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Flashcards data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "moyj01"
        },
        "content": "**Add** | `add q/QUESTION a/ANSWER [c/CATEGORY] [n/NOTE] [r/RATING] [d/DIAGRAM]` \u003cbr\u003e e.g., `add q/What does OOP stand for? a/Object Oriented Programming c/General n/Important question! d/images/diagram.jpeg`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "moyj01"
        },
        "content": "**Edit** | `edit INDEX [q/QUESTION] [a/ANSWER] [c/CATEGORY] [n/NOTE] [r/RATING] [d/DIAGRAM]` \u003cbr\u003e e.g., `edit 3 q/What does OOP stand for? a/Object Oriented Programming`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "moyj01"
        },
        "content": "**Review** | `review`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "**Fav** | `fav INDEX` \u003cbr\u003e e.g., `fav 1`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "**Unfav** | `unfav INDEX` \u003cbr\u003e e.g., `unfav 1`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sgn00"
        },
        "content": "**View** | `view INDEX` \u003cbr\u003e e.g., `view 1`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "moyj01"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "moyj01": 50,
      "minzzelo": 12,
      "-": 108,
      "tanzhuoyao-nus": 7,
      "kimberlyohq": 22,
      "sgn00": 19
    }
  },
  {
    "path": "docs/team/kimberlyohq.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "title: Kimberly\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "## Project: SWEe!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 24
    }
  },
  {
    "path": "docs/team/minzzelo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "title:Si Min\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "## Project: SWEe!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 23
    }
  },
  {
    "path": "docs/team/moyj01.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "title:Melvin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "## Project: SWEe!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "moyj01": 23
    }
  },
  {
    "path": "docs/team/sgn00.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "title: Song Guan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "## Project: SWEe!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "sgn00": 23
    }
  },
  {
    "path": "docs/team/tanzhuoyao-nus.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "title: Zhuo Yao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "## Project: SWEe!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "SWEe! is a desktop application used for managing CS2103T learning progress mainly through flashcards. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "tanzhuoyao-nus": 23
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.flashcard.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Create a new `Remark` in `seedu.flashcard.model.flashcard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "moyj01"
        },
        "content": "Simply add the following to [`seedu.flashcard.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 388
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.flashcard.model.flashcard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 102
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.flashcard.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 1,
      "-": 248
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.FlashcardDeckStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.JsonFlashcardDeckStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SWEe! ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeckStorage flashCardDeckStorage \u003d new JsonFlashcardDeckStorage(userPrefs.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        storage \u003d new StorageManager(flashCardDeckStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s flashcard deck and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * The data from the sample flashcard deck will be used instead if {@code storage}\u0027s flashcard deck is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * or an empty flashcard deck will be used instead if errors occur when reading {@code storage}\u0027s flashcard deck."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Optional\u003cReadOnlyFlashcardDeck\u003e flashcardDeckOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        ReadOnlyFlashcardDeck initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            flashcardDeckOptional \u003d storage.readFlashcardDeck();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            if (!flashcardDeckOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FlashcardDeck\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            initialData \u003d flashcardDeckOptional.orElseGet(SampleDataUtil::getSampleFlashcardDeck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FlashcardDeck\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            initialData \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashcardDeck\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            initialData \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashcardDeck\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        logger.info(\"Starting FlashcardDeck \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SWEe! ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashcarddeck.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 1,
      "-": 10,
      "tanzhuoyao-nus": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns the FlashcardDeck."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @see seedu.flashcard.model.Model#getFlashcardDeck()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    ReadOnlyFlashcardDeck getFlashcardDeck();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcards */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns the user prefs\u0027 flashcard deck file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Path getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 12,
      "-": 36,
      "kimberlyohq": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardDeckParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private final FlashcardDeckParser flashcardDeckParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeckParser \u003d new FlashcardDeckParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Command command \u003d flashcardDeckParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            storage.saveFlashcardDeck(model.getFlashcardDeck());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public ReadOnlyFlashcardDeck getFlashcardDeck() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return model.getFlashcardDeck();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return model.getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 20,
      "-": 59,
      "kimberlyohq": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/ReviewManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Maintains state for the review function."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class ReviewManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String NO_NEXT_FLASHCARD_MESSAGE \u003d \"There are no more flashcards to review\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String NO_PREVIOUS_FLASHCARD_MESSAGE \u003d \"No previous flashcards available for review\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e flashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code ReviewManager} with the specified list of flashcards."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param flashcardList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public ReviewManager(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        currentIndex \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean hasNextFlashcard() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return currentIndex \u003c flashcardList.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean hasPreviousFlashcard() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return currentIndex \u003e 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public Flashcard getNextFlashcard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (!hasNextFlashcard()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        currentIndex++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return flashcardList.get(currentIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public Flashcard getCurrentFlashcard() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return flashcardList.get(currentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public Flashcard getPrevFlashcard() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (!hasPreviousFlashcard()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        currentIndex--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return flashcardList.get(currentIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return currentIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "sgn00": 45,
      "kimberlyohq": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DIAGRAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Adds a flashcard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the list of flashcards. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            + \"[\" + PREFIX_DIAGRAM + \"DIAGRAM]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + PREFIX_QUESTION + \"What does OOP stand for? \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + PREFIX_ANSWER + \"Object-Oriented Programming \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + PREFIX_CATEGORY + \"Acronyms \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + PREFIX_NOTE + \"Important question to take note of! \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + PREFIX_RATING + \"2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            + PREFIX_DIAGRAM + \"images/diagram_1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public AddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 11,
      "minzzelo": 9,
      "-": 35,
      "tanzhuoyao-nus": 3,
      "sgn00": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Clears the flashcard deck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard Deck has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        model.setFlashcardDeck(new FlashcardDeck());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 17,
      "sgn00": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /** The application enters review mode. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final boolean reviewMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /** The flashcard index to view */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final Integer viewIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /** The application should show answer for view command. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final boolean showAnswer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean reviewMode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.reviewMode \u003d reviewMode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.viewIndex \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.showAnswer \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Constructs a {@code CommandResult} specifically for view commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public CommandResult(String feedbackToUser, Integer viewIndex, boolean showAnswer) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.reviewMode \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.viewIndex \u003d viewIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.showAnswer \u003d showAnswer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public Integer getViewIndex() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return viewIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public boolean isReviewMode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return reviewMode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public boolean isShowAnswer() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return showAnswer;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 reviewMode \u003d\u003d otherCommandResult.reviewMode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, reviewMode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 66,
      "sgn00": 39,
      "kimberlyohq": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "minzzelo": 7,
      "-": 39,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DIAGRAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Edits the details of an existing flashcard in the flashcard deck."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG\\n]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            + \"[\" + PREFIX_DIAGRAM + \"DIAGRAM]\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + PREFIX_QUESTION + \"What does the S in SOLID stand for? \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + PREFIX_ANSWER + \"Single responsibility principle\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the flashcard deck.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!flashcardToEdit.isSameQuestion(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Question updatedQuestion \u003d editFlashcardDescriptor.getQuestion().orElse(flashcardToEdit.getQuestion());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Answer updatedAnswer \u003d editFlashcardDescriptor.getAnswer().orElse(flashcardToEdit.getAnswer());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Category updatedCategory \u003d editFlashcardDescriptor.getCategory().orElse(flashcardToEdit.getCategory());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Note updatedNote \u003d editFlashcardDescriptor.getNote().orElse(flashcardToEdit.getNote());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating updatedRating \u003d editFlashcardDescriptor.getRating().orElse(flashcardToEdit.getRating());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram updatedDiagram \u003d editFlashcardDescriptor.getDiagram().orElse(flashcardToEdit.getDiagram());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics statistics \u003d flashcardToEdit.getStatistics();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        boolean isFavourite \u003d flashcardToEdit.isFavourite();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return new Flashcard(updatedQuestion, updatedAnswer, updatedCategory, updatedNote, updatedRating,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                updatedTags, updatedDiagram, statistics, isFavourite);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Stores the details to edit the flashcard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * corresponding field value of the flashcard."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        private Diagram diagram;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public EditFlashcardDescriptor() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            setDiagram(toCopy.diagram);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, category, note, rating, tags, diagram);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public void setDiagram(Diagram diagram) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            this.diagram \u003d diagram;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public Optional\u003cDiagram\u003e getDiagram() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return Optional.ofNullable(diagram);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                    \u0026\u0026 getDiagram().equals(e.getDiagram());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 37,
      "minzzelo": 71,
      "-": 103,
      "tanzhuoyao-nus": 32,
      "sgn00": 16,
      "kimberlyohq": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SWEe! as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 15,
      "sgn00": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/FavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Favourites a flashcard identified using it\u0027s displayed index from the list of flashcards."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FavCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fav\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \": Favourites the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_FAVOURITE_FLASHCARD_SUCCESS \u003d \"Favourite Flashcard: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FavCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToFavourite \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assert flashcardToFavourite !\u003d null : \"Index is invalid\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (flashcardToFavourite.isFavourite()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAVOURITE_FLASHCARD_SUCCESS, flashcardToFavourite));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard favouritedFlashcard \u003d createFavouriteFlashcard(flashcardToFavourite);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.setFlashcard(flashcardToFavourite, favouritedFlashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FAVOURITE_FLASHCARD_SUCCESS, favouritedFlashcard));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static Flashcard createFavouriteFlashcard(Flashcard flashcardToFavourite) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Question question \u003d flashcardToFavourite.getQuestion();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Answer answer \u003d flashcardToFavourite.getAnswer();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Category category \u003d flashcardToFavourite.getCategory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Note note \u003d flashcardToFavourite.getNote();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating rating \u003d flashcardToFavourite.getRating();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Set\u003cTag\u003e tags \u003d flashcardToFavourite.getTags();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram diagram \u003d flashcardToFavourite.getDiagram();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics statistics \u003d flashcardToFavourite.getStatistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Flashcard(question, answer, category, note, rating, tags, diagram, statistics, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof FavCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FavCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 3,
      "tanzhuoyao-nus": 3,
      "kimberlyohq": 75,
      "sgn00": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryEqualsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " * Filters and lists flashcards belonging to the category input by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + \": Filters and lists flashcards belonging to the category input by user.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"Parameters: \" + PREFIX_CATEGORY + \" CATEGORY\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \" SDLC\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private final CategoryEqualsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public FilterCommand(CategoryEqualsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "tanzhuoyao-nus": 35,
      "sgn00": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.AnswerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.NoteContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Finds and lists all flashcards in flashcard deck which contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards whose flashcards contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" oop\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FindCommand(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate questionPredicate \u003d new QuestionContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate answerPredicate \u003d new AnswerContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate categoryPredicate \u003d new CategoryContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate notePredicate \u003d new NoteContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate tagPredicate \u003d new TagsContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e listOfPredicates \u003d Arrays.asList(questionPredicate, answerPredicate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                categoryPredicate, notePredicate, tagPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Predicate\u003cFlashcard\u003e allPredicates \u003d listOfPredicates.stream().reduce(Predicate::or).orElse(x-\u003efalse);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.updateFilteredFlashcardList(allPredicates);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((FindCommand) other).keywords)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "-": 29,
      "tanzhuoyao-nus": 1,
      "kimberlyohq": 28
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 18,
      "sgn00": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " * Lists all flashcards in the storage to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 18,
      "tanzhuoyao-nus": 2,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Review flashcards one by one."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"review\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_INITIATE_REVIEW_SUCCESS \u003d \"Entered review mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_INITIATE_REVIEW_ERROR \u003d \"There are no flashcards to review\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (model.getFilteredFlashcardList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            throw new CommandException(MESSAGE_INITIATE_REVIEW_ERROR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return new CommandResult(MESSAGE_INITIATE_REVIEW_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "sgn00": 16,
      "kimberlyohq": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CRITERIA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.SortCriteria;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Sorts and lists flashcards according to criteria given by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \": Sorts and lists flashcards according to criteria given by user.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"Parameters: Sort Criteria (reviewed/success) (-a/-d)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" reviewed \" + PREFIX_CRITERIA + \"d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final SortCriteria criteria;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public SortCommand(SortCriteria criteria) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.criteria \u003d criteria;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.sortFilteredFlashcardList(criteria);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 criteria.equals(((SortCommand) other).criteria)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 41
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/UnfavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Unfavourite a flashcard identified using it\u0027s displayed index from the list of flashcards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class UnfavCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfav\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \": Unfavourite the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final String MESSAGE_UNFAVOURITE_FLASHCARD_SUCCESS \u003d \"Unfavourite Flashcard: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public UnfavCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToUnfavourite \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assert flashcardToUnfavourite !\u003d null : \"Index is invalid\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (!flashcardToUnfavourite.isFavourite()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UNFAVOURITE_FLASHCARD_SUCCESS, flashcardToUnfavourite));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard unfavouredFlashcard \u003d createUnfavouriteFlashcard(flashcardToUnfavourite);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.setFlashcard(flashcardToUnfavourite, unfavouredFlashcard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNFAVOURITE_FLASHCARD_SUCCESS, unfavouredFlashcard));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static Flashcard createUnfavouriteFlashcard(Flashcard flashcardToUnfavourite) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Question question \u003d flashcardToUnfavourite.getQuestion();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Answer answer \u003d flashcardToUnfavourite.getAnswer();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Category category \u003d flashcardToUnfavourite.getCategory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Note note \u003d flashcardToUnfavourite.getNote();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating rating \u003d flashcardToUnfavourite.getRating();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Set\u003cTag\u003e tags \u003d flashcardToUnfavourite.getTags();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram diagram \u003d flashcardToUnfavourite.getDiagram();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics statistics \u003d flashcardToUnfavourite.getStatistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Flashcard(question, answer, category, note, rating, tags, diagram, statistics, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof UnfavCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnfavCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 3,
      "tanzhuoyao-nus": 3,
      "kimberlyohq": 75,
      "sgn00": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Views a flashcard identified using it\u0027s displayed index from the list of flashcards."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \": View the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \" [\" + PREFIX_ANSWER + \"]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_VIEW_FLASHCARD_SUCCESS \u003d \"Viewed Flashcard: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final boolean showAnswer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a view command to show the targeted flashcard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param targetIndex"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param showAnswer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public ViewCommand(Index targetIndex, boolean showAnswer) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.showAnswer \u003d showAnswer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard flashcardToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                flashcardToView), targetIndex.getZeroBased(), showAnswer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 60
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DIAGRAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_CATEGORY, PREFIX_NOTE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                        PREFIX_RATING, PREFIX_TAG, PREFIX_DIAGRAM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).orElse(\"General\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram diagram \u003d ParserUtil.parseDiagram(argMultimap.getValue(PREFIX_DIAGRAM).orElse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, answer, category, note, rating, tags, diagram);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new AddCommand(flashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 15,
      "minzzelo": 3,
      "-": 32,
      "tanzhuoyao-nus": 6,
      "sgn00": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final Prefix PREFIX_DIAGRAM \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Prefix PREFIX_CRITERIA \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 2,
      "-": 8,
      "tanzhuoyao-nus": 1,
      "sgn00": 4
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DIAGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_CATEGORY, PREFIX_NOTE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                        PREFIX_RATING, PREFIX_TAG, PREFIX_DIAGRAM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            editFlashcardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            editFlashcardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            editFlashcardDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            editFlashcardDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            editFlashcardDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIAGRAM).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            editFlashcardDescriptor.setDiagram(ParserUtil.parseDiagram(argMultimap.getValue(PREFIX_DIAGRAM).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 11,
      "minzzelo": 36,
      "-": 12,
      "tanzhuoyao-nus": 30,
      "sgn00": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FavCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FavCommandParser implements Parser\u003cFavCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FavCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new FavCommand(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryEqualsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        List\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new FilterCommand(new CategoryEqualsKeywordsPredicate(categoryList));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 7,
      "tanzhuoyao-nus": 22,
      "sgn00": 16
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return new FindCommand(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "-": 26,
      "kimberlyohq": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FlashcardDeckParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.UnfavCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class FlashcardDeckParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return new ReviewCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        case FavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new FavCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        case UnfavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new UnfavCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "minzzelo": 4,
      "-": 62,
      "tanzhuoyao-nus": 3,
      "kimberlyohq": 19,
      "sgn00": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.SortCriteria;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code List\u003cCategory\u003e}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static List\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        List\u003cCategory\u003e categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        categoryList.addAll(categorySet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return categoryList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses a {@code String note} into a {@code Note}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static Note parseNote(String note) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Parses a {@code String diagramFilePath } into a {@code Diagram}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static Diagram parseDiagram(String diagramFilePath) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(diagramFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String trimmedDiagramFilePath \u003d diagramFilePath.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (trimmedDiagramFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return new Diagram(trimmedDiagramFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (!Diagram.isValidFile(trimmedDiagramFilePath)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            throw new ParseException(Diagram.MESSAGE_NON_EXISTENT_DIAGRAM_FILE_TYPE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (!Diagram.isValidImageFileType(trimmedDiagramFilePath)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            throw new ParseException(Diagram.MESSAGE_INVALID_DIAGRAM_FILE_TYPE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return new Diagram(trimmedDiagramFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses a {@code String criteria } and {@code String order }into a {@code SortCriteria}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static SortCriteria parseSortCriteria(String criteria, String order) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(criteria, order);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String trimmedCriteria \u003d criteria.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String trimmedOrder \u003d order.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String sortCriteria \u003d trimmedCriteria + \" \" + trimmedOrder;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!SortCriteria.isValidCriteria(sortCriteria)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new ParseException(SortCriteria.MESSAGE_INVALID_SORT_CRITERIA);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return SortCriteria.getCriteria(sortCriteria);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        requireNonNull(tag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        requireNonNull(tags);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        for (String tagName : tags) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //        return tagSet;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 29,
      "minzzelo": 27,
      "-": 47,
      "tanzhuoyao-nus": 29,
      "sgn00": 85
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CRITERIA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.SortCriteria;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CRITERIA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_CRITERIA).isPresent() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            SortCriteria sortCriteria \u003d ParserUtil.parseSortCriteria(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    argMultimap.getValue(PREFIX_CRITERIA).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new SortCommand(sortCriteria);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 36
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/UnfavCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.UnfavCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class UnfavCommandParser implements Parser\u003cUnfavCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public UnfavCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            return new UnfavCommand(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * and returns a VieweCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return new ViewCommand(index, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return new ViewCommand(index, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 40
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/FlashcardDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Wraps all data at the flashcard-deck level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Duplicates are not allowed (by .isSameQuestion comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class FlashcardDeck implements ReadOnlyFlashcardDeck {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public FlashcardDeck() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Creates an FlashcardDeck using the Flashcards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public FlashcardDeck(ReadOnlyFlashcardDeck toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Resets the existing data of this {@code FlashcardDeck} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void resetData(ReadOnlyFlashcardDeck newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the flashcard deck."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Adds a flashcard to the flashcard deck."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * The flashcard must not already exist in the flashcard deck."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * {@code target} must exist in the flashcard deck."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * in the flashcard deck."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Removes {@code key} from this {@code FlashcardDeck}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * {@code key} must exist in the flashcard deck."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                || (other instanceof FlashcardDeck // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 flashcards.equals(((FlashcardDeck) other).flashcards));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 20,
      "minzzelo": 5,
      "-": 77,
      "kimberlyohq": 19
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns the user prefs\u0027 flashcard deck file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Path getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Sets the user prefs\u0027 flashcard deck file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    void setFlashcardDeckFilePath(Path flashcardDeckFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Replaces flashcard deck data with the data in {@code flashcardDeck}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    void setFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /** Returns the FlashcardDeck */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    ReadOnlyFlashcardDeck getFlashcardDeck();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the flashcard list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The flashcard must exist in the flashcard list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * {@code flashcard} must not already exist in the flashcard list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * {@code target} must exist in the flashcard list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the flashcard list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sorts the filtered flashcard list to sort by the given {@code criteria}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws NullPointerException if {@code criteria} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void sortFilteredFlashcardList(Comparator\u003cFlashcard\u003e comparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 11,
      "minzzelo": 20,
      "-": 59,
      "kimberlyohq": 5
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents the in-memory model of the flashcard deck data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private final FlashcardDeck flashcardDeck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final SortedList\u003cFlashcard\u003e sortedFlashcards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Initializes a ModelManager with the given flashcardDeck and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public ModelManager(ReadOnlyFlashcardDeck flashcardDeck, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireAllNonNull(flashcardDeck, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        logger.fine(\"Initializing with flashcard deck: \" + flashcardDeck + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.flashcardDeck \u003d new FlashcardDeck(flashcardDeck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        sortedFlashcards \u003d new SortedList\u003c\u003e(this.flashcardDeck.getFlashcardList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.sortedFlashcards);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this(new FlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return userPrefs.getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void setFlashcardDeckFilePath(Path flashcardDeckFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(flashcardDeckFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        userPrefs.setFlashcardDeckFilePath(flashcardDeckFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashcardDeck \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void setFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.flashcardDeck.resetData(flashcardDeck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public ReadOnlyFlashcardDeck getFlashcardDeck() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeck;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeck.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.removeFlashcard(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * {@code versionedFlashcardDeck}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void sortFilteredFlashcardList(Comparator\u003cFlashcard\u003e comparator) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        sortedFlashcards.setComparator(comparator);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        flashcardDeck.setFlashcards(sortedFlashcards);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeck.equals(other.flashcardDeck)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 30,
      "minzzelo": 22,
      "-": 106,
      "kimberlyohq": 4
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ReadOnlyFlashcardDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Unmodifiable view of an flashcard deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public interface ReadOnlyFlashcardDeck {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns an unmodifiable view of the flashcard list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "minzzelo": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Path getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Path flashcardDeckFilePath \u003d Paths.get(\"data\" , \"flashcarddeck.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        setFlashcardDeckFilePath(newUserPrefs.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeckFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void setFlashcardDeckFilePath(Path flashcardDeckFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(flashcardDeckFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.flashcardDeckFilePath \u003d flashcardDeckFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 flashcardDeckFilePath.equals(o.flashcardDeckFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return Objects.hash(guiSettings, flashcardDeckFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + flashcardDeckFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents the Answer on the Flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * The first character of the answer must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a given string is a valid answer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 52
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/AnswerContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Answer} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class AnswerContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public AnswerContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        flashcard.getAnswer().toString().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof AnswerContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((AnswerContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents the Category the Flashcard is in."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories names should be alphanumeric\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_]+( [a-zA-Z0-9_]+)*$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param category A valid category."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 category.toLowerCase().equals(((Category) other).category.toLowerCase())); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return category.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 47,
      "minzzelo": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/CategoryContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Category} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class CategoryContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public CategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        flashcard.getCategory().toString().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof CategoryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((CategoryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/CategoryEqualsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Category} is equivalent to any of the categories given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "public class CategoryEqualsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final List\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public CategoryEqualsKeywordsPredicate(List\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.categoryList \u003d categoryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return categoryList.stream().anyMatch(category -\u003e category.equals(flashcard.getCategory()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                || (other instanceof CategoryEqualsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 categoryList.equals(((CategoryEqualsKeywordsPredicate) other).categoryList)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "tanzhuoyao-nus": 20,
      "sgn00": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Diagram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents the Diagram the Flashcard contains."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class Diagram {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Diagram can be defined by a valid relative or absolute path\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_INVALID_DIAGRAM_FILE_TYPE \u003d \"Invalid diagram file type\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_DIAGRAM_FILE_TYPE \u003d \"Please ensure diagram file exists\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private String diagramFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Constructs a {@code Diagram}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param diagramFilePath A valid file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Diagram(String diagramFilePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(diagramFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.diagramFilePath \u003d diagramFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a given string is a valid image file type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static boolean isValidImageFileType(String path) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            if (ImageIO.read(file) !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a given string is a valid file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static boolean isValidFile(String path) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (file.exists() \u0026\u0026 file.isFile()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return diagramFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                || (other instanceof Diagram // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 diagramFilePath.equals(((Diagram) other).diagramFilePath)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return diagramFilePath.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 74
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a Flashcard in the flashcard list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private final Diagram diagram;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    // State fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final boolean isFavourite;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Identity and Data fields must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public Flashcard(Question question, Answer answer, Category category,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                     Note note, Rating rating, Set\u003cTag\u003e tags, Diagram diagram) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        requireAllNonNull(question, answer, category, note, rating, tags, diagram);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.diagram \u003d diagram;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.isFavourite \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded constructor for creating a flashcard."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * All fields must be present and not null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public Flashcard(Question question, Answer answer, Category category, Note note, Rating rating, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                     Diagram diagram, Statistics statistics, boolean isFavourite) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireAllNonNull(question, answer, category, note, rating, diagram, statistics, isFavourite);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.diagram \u003d diagram;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Diagram getDiagram() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return diagram;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean isFavourite() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return isFavourite;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if the input is the correct answer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean isCorrect(String inputAnswer) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return answer.toString().equals(inputAnswer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if both flashcards have the same question."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean isSameQuestion(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if both flashcards have the same identity and data fields."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * This defines a stronger notion of equality between two flashcards."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 otherFlashcard.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 otherFlashcard.getNote().equals(getNote())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 otherFlashcard.getRating().equals(getRating())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTags().equals(getTags())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 otherFlashcard.getDiagram().equals(getDiagram())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 otherFlashcard.getStatistics().equals(getStatistics())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 otherFlashcard.isFavourite() \u003d\u003d isFavourite();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return Objects.hash(question, answer, category, note, rating, diagram, statistics, isFavourite);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        builder.append(\" Category: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .append(\" Question: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (getNote().toString().length() \u003e 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            builder.append(\" Note: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    .append(getNote());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (getRating().toString().length() \u003e 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            builder.append(\" Rating: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    .append(getRating());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        builder.append(\" Diagram: \").append(getDiagram());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        builder.append(\" Statistics: \").append(getStatistics());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        builder.append(\" Favourite: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                .append(isFavourite());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 11,
      "minzzelo": 119,
      "tanzhuoyao-nus": 26,
      "sgn00": 16,
      "kimberlyohq": 18
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents the Note on the Flashcard."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Guarantees: immutable; is always valid."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param note A valid note."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Note(String note) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 note.equals(((Note) other).note)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return note.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 39
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/NoteContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Note} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class NoteContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public NoteContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        flashcard.getNote().toString().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof NoteContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((NoteContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents the Question on the Flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assert (!question.isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u0026\u0026 question.equals(((Question) other).question)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 52
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/QuestionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        flashcard.getQuestion().toString().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 2,
      "-": 22,
      "kimberlyohq": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Rating.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * Represents the Rating on the Flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Star rating can take any value from 1-5, and can be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * The rating must either be an empty string or take a string value between 1-5 inclusive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|\\\\b[1-5]\\\\b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assert rating.equals(\"\") || (Integer.valueOf(rating) \u003c\u003d 5 \u0026\u0026 Integer.valueOf(rating) \u003e\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u0026\u0026 rating.equals(((Rating) other).rating)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return rating.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 51
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/SortCriteria.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents the criteria that flashcards can be sorted by."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public enum SortCriteria implements Comparator\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    REVIEWED_ASCENDING(\"reviewed a\") {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public final int compare(final Flashcard o1, final Flashcard o2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return o1.getStatistics().getReviewFrequency() - o2.getStatistics().getReviewFrequency();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    REVIEWED_DESCENDING(\"reviewed d\") {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public final int compare(final Flashcard o1, final Flashcard o2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return o2.getStatistics().getReviewFrequency() - o1.getStatistics().getReviewFrequency();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    SUCCESS_RATE_ASCENDING(\"success a\") {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public final int compare(final Flashcard o1, final Flashcard o2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Double.compare(o1.getStatistics().getSuccessRate(), o2.getStatistics().getSuccessRate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    SUCCESS_RATE_DESCENDING(\"success d\") {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public final int compare(final Flashcard o1, final Flashcard o2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return Double.compare(o2.getStatistics().getSuccessRate(), o1.getStatistics().getSuccessRate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_CRITERIA \u003d \"Invalid sort criteria\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final Map\u003cString, SortCriteria\u003e SORT_CRITERIA_MAP \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (SortCriteria sortCriteria : values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            SORT_CRITERIA_MAP.put(sortCriteria.criteria, sortCriteria);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public final String criteria;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private SortCriteria(String criteria) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.criteria \u003d criteria;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if a given string is a valid criteria."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static boolean isValidCriteria(String criteria) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return SORT_CRITERIA_MAP.containsKey(criteria);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static SortCriteria getCriteria(String criteria) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return SORT_CRITERIA_MAP.get(criteria);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 62
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents the Statistics on the Flashcard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String STATISTICS_CONSTRAINT \u003d \"Review frequency and success frequency should be positive \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"integers, and review frequency should be greater than or equals to success frequency\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final int reviewFrequency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final int successFrequency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructs a {@code Statistics} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.reviewFrequency \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.successFrequency \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructs a {@code Statistics} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param reviewFrequency Review frequency of the flashcard."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param successFrequency Success frequency of the flashcard."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics(int reviewFrequency, int successFrequency) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        checkArgument(isValidStatistics(reviewFrequency, successFrequency), STATISTICS_CONSTRAINT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.reviewFrequency \u003d reviewFrequency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.successFrequency \u003d successFrequency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics incrementReviewFrequency() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Statistics(this.reviewFrequency + 1, this.successFrequency);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics incrementSuccessFrequency() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Statistics(this.reviewFrequency, this.successFrequency + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int getReviewFrequency() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.reviewFrequency;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int getSuccessFrequency() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.successFrequency;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns true if a given statistics is a valid statistics."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static boolean isValidStatistics(int reviewFrequency, int successFrequency) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        boolean isReviewFrequencyValid \u003d reviewFrequency \u003e\u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        boolean isSuccessFrequencyValid \u003d successFrequency \u003e\u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        boolean isReviewFrequencyGreaterThanOrEqualToSuccessFrequency \u003d reviewFrequency \u003e\u003d successFrequency;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return isReviewFrequencyValid \u0026\u0026 isSuccessFrequencyValid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 isReviewFrequencyGreaterThanOrEqualToSuccessFrequency;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Gets the rate at which the user answers the flashcard\u0027s question correctly, rounded to 2 decimal places."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return The rate at which the user answers the flashcard\u0027s question correctly."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public double getSuccessRate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (reviewFrequency \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        double reviewFreqAsDouble \u003d reviewFrequency;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        double successFreqAsDouble \u003d successFrequency;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ((successFreqAsDouble / reviewFreqAsDouble) * 100.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else if (other instanceof Statistics) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Statistics otherStatistics \u003d (Statistics) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return otherStatistics.getReviewFrequency() \u003d\u003d getReviewFrequency()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \u0026\u0026 otherStatistics.getSuccessFrequency() \u003d\u003d getSuccessFrequency();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return Objects.hash(reviewFrequency, successFrequency);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return String.format(\"Review Frequency: %d\\nSuccess Frequency: %d\\nSuccess Rate: %.2f%%\\n\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                reviewFrequency, successFrequency, getSuccessRate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 100
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/TagsContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        flashcard.getTags().stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                                .anyMatch(tag -\u003e tag.toString().toLowerCase().contains(keyword.toLowerCase())));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameQuestion(Question)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * and updating of flashcards uses Flashcard#isSameQuestion(Flashcard) for equality so as to ensure that the flashcard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueFlashcardList. However, the removal of a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * flashcard uses Flashcard#equals(Object) so as to ensure that the flashcard with exactly the same fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * @see Flashcard#isSameQuestion(Flashcard)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!target.isSameQuestion(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                if (flashcards.get(i).isSameQuestion(flashcards.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "minzzelo": 22,
      "-": 88,
      "kimberlyohq": 23
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents a Tag in the flashcard deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 50,
      "tanzhuoyao-nus": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Contains utility methods for populating {@code FlashcardDeck} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Flashcard[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            new Flashcard(new Question(\"What does SDLC stand for?\"), new Answer(\"Software development life cycle\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                new Category(\"SDLC\"), new Note(\"\"), new Rating(\"\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    getTagSet(), new Diagram(\"\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            new Flashcard(new Question(\"What is a revision control software?\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new Answer(\"It is the software tool that automate the process of Revision Control\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                new Category(\"Revision history\"), new Note(\"\"), new Rating(\"2\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                    getTagSet(\"preloaded\"), new Diagram(\"\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static ReadOnlyFlashcardDeck getSampleFlashcardDeck() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck sampleAb \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (Flashcard sampleFlashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            sampleAb.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 12,
      "minzzelo": 8,
      "-": 26,
      "tanzhuoyao-nus": 3,
      "sgn00": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/FlashcardDeckStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents a storage for {@link FlashcardDeck}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public interface FlashcardDeckStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Path getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns FlashcardDeck data as a {@link ReadOnlyFlashcardDeck}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @see #getFlashcardDeckFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Saves the given {@link ReadOnlyFlashcardDeck} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param flashcardDeck cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @see #saveFlashcardDeck(ReadOnlyFlashcardDeck)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private String diagramFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private String isFavourite;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                                @JsonProperty(\"category\") String category, @JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                                @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                                @JsonProperty(\"diagramFilePath\") String diagramFilePath,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                                @JsonProperty(\"statistics\") Statistics statistics,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                                @JsonProperty(\"favourite\") String isFavourite) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.diagramFilePath \u003d diagramFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * getTagName() method is used as toString()\u0027s method format is [tag]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        question \u003d source.getQuestion().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        rating \u003d source.getRating().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        diagramFilePath \u003d source.getDiagram().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        statistics \u003d source.getStatistics();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        isFavourite \u003d Boolean.toString(source.isFavourite());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (diagramFilePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                    Diagram.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        final Diagram modelDiagram \u003d new Diagram(diagramFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Statistics.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final Statistics modelStatistics \u003d statistics;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        final Boolean modelIsFavourite \u003d Boolean.parseBoolean(isFavourite);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return new Flashcard(modelQuestion, modelAnswer, modelCategory, modelNote, modelRating, modelTags, modelDiagram,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                modelStatistics, modelIsFavourite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 18,
      "minzzelo": 92,
      "tanzhuoyao-nus": 26,
      "sgn00": 16,
      "kimberlyohq": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Jackson-friendly version of {@link Statistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "class JsonAdaptedStatistics {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final int reviewFrequency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final int successFrequency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public JsonAdaptedStatistics(int reviewFrequency, int successFrequency) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.reviewFrequency \u003d reviewFrequency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.successFrequency \u003d successFrequency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Converts a given {@code Statistics} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public JsonAdaptedStatistics(Statistics source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.reviewFrequency \u003d source.getReviewFrequency();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.successFrequency \u003d source.getSuccessFrequency();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Converts this Jackson-friendly adapted statistics object into the model\u0027s {@code Statistics} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Statistics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Statistics(reviewFrequency, successFrequency);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonFlashcardDeckStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * A class to access FlashcardDeck data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class JsonFlashcardDeckStorage implements FlashcardDeckStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashcardDeckStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public JsonFlashcardDeckStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return readFlashcardDeck(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Similar to {@link #readFlashcardDeck()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Optional\u003cJsonSerializableFlashcardDeck\u003e jsonFlashcardDeck \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                filePath, JsonSerializableFlashcardDeck.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (!jsonFlashcardDeck.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return Optional.of(jsonFlashcardDeck.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        saveFlashcardDeck(flashcardDeck, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Similar to {@link #saveFlashcardDeck(ReadOnlyFlashcardDeck)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(flashcardDeck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcardDeck(flashcardDeck), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 80
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonSerializableFlashcardDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * An Immutable FlashcardDeck that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "@JsonRootName(value \u003d \"flashcarddeck\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "class JsonSerializableFlashcardDeck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcard deck contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashcardDeck} with the given flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public JsonSerializableFlashcardDeck(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashcardDeck} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFlashcardDeck}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public JsonSerializableFlashcardDeck(ReadOnlyFlashcardDeck source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream().map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Converts this flash card deck into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public FlashcardDeck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            if (flashcardDeck.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            flashcardDeck.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeck;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 20,
      "minzzelo": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public interface Storage extends FlashcardDeckStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Path getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Manages storage of Flashcard data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private FlashcardDeckStorage flashcardDeckStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code FlashcardDeckStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public StorageManager(FlashcardDeckStorage flashcardDeckStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.flashcardDeckStorage \u003d flashcardDeckStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeckStorage.getFlashcardDeckFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return readFlashcardDeck(flashcardDeckStorage.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return flashcardDeckStorage.readFlashcardDeck(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        saveFlashcardDeck(flashcardDeck, flashcardDeckStorage.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void saveFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeckStorage.saveFlashcardDeck(flashcardDeck, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 23,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * Represents a storage for {@link seedu.flashcard.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Saves the given {@link seedu.flashcard.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moyj01"
        },
        "content": "         * @see seedu.flashcard.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardAnswerCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class FlashcardAnswerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String FXML \u003d \"FlashcardAnswerCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String PREFIX_ANSWER \u003d \"Answer: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private TextArea answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code FlashcardAnswerCard} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public FlashcardAnswerCard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answer.setText(PREFIX_ANSWER + flashcard.getAnswer().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (flashcard.getNote().toString().length() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            note.setText(flashcard.getNote().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            note.setVisible(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "sgn00": 33
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class FlashcardListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private TextFlow ratingPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Text rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Text ratingIcon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Text favouriteIcon;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code FlashcardListCard} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public FlashcardListCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        category.setText(flashcard.getCategory().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (flashcard.getRating().toString().length() \u003e 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            rating.setText(flashcard.getRating().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingIcon.setText(\" \\uD83D\\uDFCA\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingPane.setVisible(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingPane.managedProperty().bind(ratingPane.visibleProperty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        if (flashcard.getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            flashcard.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            tags.setVisible(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        if (flashcard.isFavourite()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            favouriteIcon.setText(\"\\u2764\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            favouriteIcon.setVisible(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!(other instanceof FlashcardListCard)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        FlashcardListCard card \u003d (FlashcardListCard) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 8,
      "-": 49,
      "tanzhuoyao-nus": 9,
      "sgn00": 21,
      "kimberlyohq": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardListCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                setGraphic(new FlashcardListCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "minzzelo": 3,
      "-": 31,
      "kimberlyohq": 9,
      "sgn00": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardQuestionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class FlashcardQuestionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String FXML \u003d \"FlashcardQuestionCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private TextFlow ratingPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Text rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Text ratingIcon;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Text favouriteIcon;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private ImageView diagram;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code FlashcardQuestionCard} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public FlashcardQuestionCard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        category.setText(flashcard.getCategory().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String diagramFilePath \u003d flashcard.getDiagram().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        diagram.managedProperty().bind(diagram.visibleProperty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (diagramFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            diagram.setVisible(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            Image image \u003d loadImage(diagramFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                diagram.setVisible(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            diagram.setImage(image);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (flashcard.getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            flashcard.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            tags.setVisible(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (flashcard.getRating().toString().length() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            rating.setText(flashcard.getRating().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingIcon.setText(\" \\uD83D\\uDFCA\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingPane.setVisible(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            ratingPane.managedProperty().bind(ratingPane.visibleProperty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (flashcard.isFavourite()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            favouriteIcon.setText(\"\\u2764\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            favouriteIcon.setVisible(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!(other instanceof FlashcardQuestionCard)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        FlashcardQuestionCard card \u003d (FlashcardQuestionCard) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Image loadImage(String diagramFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        if (Diagram.isValidFile(diagramFilePath) \u0026\u0026 Diagram.isValidImageFileType(diagramFilePath)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            File imageFile \u003d new File(diagramFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            Image image \u003d new Image(imageFile.toURI().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 30,
      "sgn00": 82
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardViewCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class FlashcardViewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String FXML \u003d \"FlashcardViewCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane questionViewPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane answerViewPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code FlashcardListCard} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public FlashcardViewCard(Flashcard flashcard, boolean showAnswer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        FlashcardQuestionCard questionCard \u003d new FlashcardQuestionCard(flashcard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        questionViewPlaceholder.getChildren().add(questionCard.getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        if (!showAnswer) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            answerViewPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        FlashcardAnswerCard answerCard \u003d new FlashcardAnswerCard(flashcard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answerViewPlaceholder.getChildren().add(answerCard.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 45
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S1-CS2103T-T17-2/tp/blob/master\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            + \"/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private FlashcardViewCard flashcardViewCard;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane flashcardViewCardPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private GridPane commandModePane;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane studyPanePlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandBoxPlaceholder.managedProperty().bind(commandBoxPlaceholder.visibleProperty());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandModePane.managedProperty().bind(commandModePane.visibleProperty());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.managedProperty().bind(studyPanePlaceholder.visibleProperty());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Cleans up window back to command mode."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void exitStudyMode(String exitReason) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandBoxPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandModePane.setVisible(true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        resultDisplay.setFeedbackToUser(exitReason);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Sets up window for study mode ( which is either review or quiz mode)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private void enterStudyMode(StudyPanel studyPanel) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandModePane.setVisible(false);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        commandBoxPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.getChildren().add(studyPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        studyPanePlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Executes view function."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private void handleView(int viewIndex, boolean showAnswer) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        flashcardViewCardPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        flashcardViewCard \u003d new FlashcardViewCard(logic.getFilteredFlashcardList().get(viewIndex), showAnswer);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        flashcardViewCardPlaceholder.getChildren().add(flashcardViewCard.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FlashcardListPanel getFlashcardListPanel() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * @see seedu.flashcard.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            if (commandResult.isReviewMode()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                enterStudyMode(new ReviewPanel(logic.getFilteredFlashcardList(), this));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            if (commandResult.getViewIndex() !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                handleView(commandResult.getViewIndex(), commandResult.isShowAnswer());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "-": 181,
      "sgn00": 59,
      "kimberlyohq": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/ReviewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.logic.ReviewManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * An UI component that displays review function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public class ReviewPanel extends StudyPanel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Exited review mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private final ReviewManager reviewManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code ReviewPanel} that handles review mode."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public ReviewPanel(ObservableList\u003cFlashcard\u003e flashcardList, MainWindow parent) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        super(parent);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        reviewManager \u003d new ReviewManager(flashcardList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        showFlashcard(flashcardList.get(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        handleStudy();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Executes review function."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected void handleStudy() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        keyDownEventHandler \u003d new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                if (!(event.getTarget() instanceof TextInputControl)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                switch (event.getCode().getCode()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                case 39: // right arrow key down"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    if (!reviewManager.hasNextFlashcard()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                        exitStudyMode(ReviewManager.NO_NEXT_FLASHCARD_MESSAGE + \"\\n\" + EXIT_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                        showFlashcard(reviewManager.getNextFlashcard());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                case 37: // left arrow key down"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    if (!reviewManager.hasPreviousFlashcard()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                        exitStudyMode(ReviewManager.NO_PREVIOUS_FLASHCARD_MESSAGE + \"\\n\" + EXIT_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                        showFlashcard(reviewManager.getPrevFlashcard());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                case 40: // up arrow key down"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    FlashcardAnswerCard flashcardAnswerCard \u003d new FlashcardAnswerCard("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                            reviewManager.getCurrentFlashcard());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    showAnswer(flashcardAnswerCard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                case 38: // down arrow key down"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    hideAnswer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                case 81: // \u0027q\u0027 key down"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    exitStudyMode(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        parent.getRoot().addEventFilter(KeyEvent.KEY_PRESSED, keyDownEventHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 74
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/StudyPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": " * An UI component that handles an abstract study mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "public abstract class StudyPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String FXML \u003d \"StudyPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected EventHandler\u003cKeyEvent\u003e keyDownEventHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected final MainWindow parent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane questionPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private StackPane answerPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Creates a {@code StudyPanel} with the given parent {@code MainWindow}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public StudyPanel(MainWindow parent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Shows the current flashcard being reviewed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param flashcard      the FlashCard being reviewed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected void showFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        questionPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        FlashcardQuestionCard flashcardQuestionCard \u003d new FlashcardQuestionCard(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        questionPlaceholder.getChildren().add(flashcardQuestionCard.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answerPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Clears up current window to exit study mode and calls parent to exit study mode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param exitReason Message to show user on exit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected void exitStudyMode(String exitReason) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        parent.getRoot().removeEventFilter(KeyEvent.KEY_PRESSED, keyDownEventHandler);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        questionPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answerPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        parent.exitStudyMode(exitReason);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Shows the answer to the flashcard."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * @param flashcardAnswerCard"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected void showAnswer(FlashcardAnswerCard flashcardAnswerCard) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answerPlaceholder.getChildren().add(flashcardAnswerCard.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Hides the answer to the flashcard."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected void hideAnswer() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        answerPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Executes abstract study function."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    protected abstract void handleStudy();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 84
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/lightning.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 83,
      "sgn00": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/FlashcardAnswerCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder2\" alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-round-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cInsets top\u003d\"15\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cTextArea fx:id\u003d\"answer\" wrapText\u003d\"true\" editable\u003d\"false\" styleClass\u003d\"answer-display\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cLabel fx:id\u003d\"note\"  styleClass\u003d\"cell_small_label\" text\u003d\"\\$note\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sgn00": 15
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "  \u003cGridPane styleClass\u003d\"pane-with-round-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$question\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003cInsets  bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "      \u003cHBox spacing\u003d\"15\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003cInsets bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"ratingPane\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003cText fx:id\u003d\"rating\" text\u003d\"\\$rating\"\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003cText fx:id\u003d\"ratingIcon\"\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cText fx:id\u003d\"favouriteIcon\" text\u003d\"\\$favouriteIcon\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "sgn00": 24
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "  \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/main/resources/view/FlashcardQuestionCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-round-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"15\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cGridPane alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cVBox alignment\u003d\"TOP_CENTER\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_question_label\" text\u003d\"\\$question\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cHBox spacing\u003d\"15\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    \u003cInsets bottom\u003d\"15\" top\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"ratingPane\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    \u003cText fx:id\u003d\"rating\" text\u003d\"\\$rating\"\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                    \u003cText fx:id\u003d\"ratingIcon\"\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cText fx:id\u003d\"favouriteIcon\" text\u003d\"\\$favouriteIcon\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cImageView fx:id\u003d\"diagram\" fitHeight\u003d\"400.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "sgn00": 44
    }
  },
  {
    "path": "src/main/resources/view/FlashcardViewCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\"  styleClass\u003d\"pane-with-no-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cScrollPane styleClass\u003d\"pane-with-no-border\" fitToWidth\u003d\"true\" fitToHeight\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-no-border\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cRowConstraints percentHeight\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cRowConstraints percentHeight\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow \u003d \"ALWAYS\" styleClass\u003d\"pane-with-no-border\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cStackPane  fx:id\u003d\"questionViewPlaceholder\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow \u003d \"ALWAYS\" styleClass\u003d\"pane-with-no-border\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cStackPane fx:id\u003d\"answerViewPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sgn00": 38
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "         title\u003d\"SWEe!\" minWidth\u003d\"1150\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cImage url\u003d\"@/images/lightning.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "      \u003cVBox styleClass\u003d\"main-window\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cStackPane fx:id\u003d\"studyPanePlaceholder\"  VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow \u003d \"ALWAYS\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cGridPane fx:id\u003d\"commandModePane\" styleClass\u003d\"grid-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cVBox GridPane.columnIndex\u003d\"0\" fx:id\u003d\"flashcardList\" minWidth\u003d\"500\" styleClass\u003d\"pane-with-no-border\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow \u003d \"ALWAYS\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow \u003d \"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "              \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\"  VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "              \u003cVBox GridPane.columnIndex\u003d\"1\" GridPane.vgrow \u003d \"ALWAYS\" styleClass\u003d\"pane-with-no-border\" GridPane.hgrow\u003d\"ALWAYS\" minWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                \u003cStackPane fx:id\u003d\"flashcardViewCardPlaceholder\"  VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow \u003d \"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" maxHeight\u003d\"30\" minHeight\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "sgn00": 26,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/main/resources/view/StudyPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003cGridPane fx:id \u003d\"studyModePane\" styleClass\u003d\"pane-with-no-border\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cRowConstraints percentHeight\u003d\"75.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cRowConstraints percentHeight\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"70.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cVBox VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-no-border\" HBox.hgrow \u003d \"ALWAYS\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cStackPane  fx:id\u003d\"questionPlaceholder\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003cVBox VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-no-border\" HBox.hgrow \u003d \"ALWAYS\"  GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003cStackPane fx:id\u003d\"answerPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sgn00": 30
    }
  },
  {
    "path": "src/test/data/ImageTest/invalidFileType.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "asdsadasd"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/flashcard_deck_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        expectedModel.addFlashcard(expectedFlashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 126,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/ReviewManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class ReviewManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private ReviewManager reviewManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        reviewManager \u003d new ReviewManager(model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_getFirstFlashcard_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard expectedFlashcard \u003d FLASHCARD_1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedFlashcard, reviewManager.getCurrentFlashcard());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_reviewNextFlashcardFromFirstFlashcard_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard expectedFlashcard \u003d FLASHCARD_2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedFlashcard, reviewManager.getNextFlashcard());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_reviewPreviousFlashcardFromFirstFlashcard_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(null, reviewManager.getPrevFlashcard());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_reviewPreviousFlashcardFromSecondFlashcard_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard expectedFlashcard \u003d FLASHCARD_1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Set currentIndex of reviewManager to 1."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        reviewManager.getNextFlashcard();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Return flashcard at index 0."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedFlashcard, reviewManager.getPrevFlashcard());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 8,
      "kimberlyohq": 46
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashcard), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Flashcard flashcardInList \u003d model.getFlashcardDeck().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertCommandFailure(new AddCommand(flashcardInList), model, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 14,
      "-": 8,
      "sgn00": 23
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard oop \u003d new FlashcardBuilder().withQuestion(\"What is OOP?\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                .withAnswer(\"Object-Oriented Programming\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Flashcard simple \u003d new FlashcardBuilder().withQuestion(\"A simple question?\").withAnswer(\"Yes\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        AddCommand addOopCommand \u003d new AddCommand(oop);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        AddCommand addSimpleCommand \u003d new AddCommand(simple);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(addOopCommand.equals(addOopCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        AddCommand addOopCommandcopy \u003d new AddCommand(oop);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(addOopCommand.equals(addOopCommandcopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(addOopCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(addOopCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(addOopCommand.equals(addSimpleCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public Path getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public void setFlashcardDeckFilePath(Path flashcardDeckFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public void setFlashcardDeck(ReadOnlyFlashcardDeck flashcardDeck) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public ReadOnlyFlashcardDeck getFlashcardDeck() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public void sortFilteredFlashcardList(Comparator\u003cFlashcard\u003e comparator) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return this.flashcard.isSameQuestion(flashcard);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameQuestion);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        public ReadOnlyFlashcardDeck getFlashcardDeck() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            return new FlashcardDeck();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 16,
      "minzzelo": 7,
      "-": 5,
      "sgn00": 173
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void execute_emptyFlashcardDeck_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void execute_nonEmptyFlashcardDeck_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        expectedModel.setFlashcardDeck(new FlashcardDeck());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "-": 5,
      "sgn00": 18
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different reviewMode value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different reviewMode value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 48,
      "sgn00": 5,
      "kimberlyohq": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DIAGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_1 \u003d \"What does SDLC stand for?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_2 \u003d \"What is a revision control software?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_QUESTION_3 \u003d \"It is recommended that assertions to be used liberally in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            + \"code. True or False?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_4 \u003d \"Multiple models of the same entity may be needed to capture it \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"fully. True or False?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_5 \u003d \"The middle part of the user story (i.e., the function) can be \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            + \"omitted if it is obvious. True or False?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_1 \u003d \"Software development life cycle\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_2 \u003d \"It is the software tool that automate the process of Revision Control\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_ANSWER_3 \u003d \"True\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_4 \u003d \"True\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_5 \u003d \"False\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_1 \u003d \"SDLC\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_2 \u003d \"Revision history\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_4 \u003d \"Models\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_5 \u003d \"User Stories\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_NOTE_1 \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_NOTE_2 \u003d \"Note\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String VALID_RATING_1 \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String VALID_RATING_2 \u003d \"2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_TAG_1 \u003d \"test\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_TAG_2 \u003d \"revise\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_TAG_3 \u003d \"important\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \"ImageTest\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Statistics VALID_STATISTICS_1 \u003d new Statistics(3, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final Path VALID_FILE_TYPE \u003d TEST_DATA_FOLDER.resolve(\"valid_image.jpg\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String VALID_DIAGRAM_1 \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String VALID_DIAGRAM_2 \u003d VALID_FILE_TYPE.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String INVALID_QUESTION_1 \u003d \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String INVALID_ANSWER_1 \u003d \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String INVALID_CATEGORY_1 \u003d \"%\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String INVALID_RATING_1 \u003d \"6\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String INVALID_DIAGRAM_1 \u003d \"]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String VALID_RATING_2_DESC \u003d \" \" + PREFIX_RATING + VALID_RATING_2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_NOTE_2_DESC \u003d \" \" + PREFIX_NOTE + VALID_NOTE_2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_TAG_2_DESC \u003d \" \" + PREFIX_TAG + VALID_TAG_2;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String VALID_TAG_3_DESC \u003d \" \" + PREFIX_TAG + VALID_TAG_3;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_4_DESC \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_4;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_4_DESC \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_4;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_4_DESC \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_4;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_QUESTION_5_DESC \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_5;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_ANSWER_5_DESC \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_5;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String VALID_CATEGORY_5_DESC \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_5;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String VALID_DIAGRAM_2_DESC \u003d \" \" + PREFIX_DIAGRAM + VALID_DIAGRAM_2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + INVALID_QUESTION_1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + INVALID_ANSWER_1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + INVALID_CATEGORY_1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + INVALID_RATING_1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_FLASHCARD_1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_FLASHCARD_2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DESC_FLASHCARD_1 \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withAnswer(VALID_ANSWER_1).withCategory(VALID_CATEGORY_1).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DESC_FLASHCARD_2 \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withCategory(VALID_CATEGORY_2).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck expectedAddressBook \u003d new FlashcardDeck(actualModel.getFlashcardDeck());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getFlashcardDeck());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * {@code model}\u0027s flashcard deck."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard filteredFlashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.updateFilteredFlashcardList(flashcard -\u003e flashcard.isSameQuestion(filteredFlashcard));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 25,
      "minzzelo": 44,
      "-": 62,
      "tanzhuoyao-nus": 13,
      "sgn00": 6,
      "kimberlyohq": 4
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashcard list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashcardDeck().getFlashcardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no flashcard."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 17,
      "minzzelo": 84,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DESC_FLASHCARD_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DESC_FLASHCARD_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index indexLastFlashcard \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard lastFlashcard \u003d model.getFilteredFlashcardList().get(indexLastFlashcard.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        FlashcardBuilder flashcardInList \u003d new FlashcardBuilder(lastFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard editedFlashcard \u003d flashcardInList.withQuestion(VALID_QUESTION_4).withAnswer(VALID_ANSWER_4)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withCategory(VALID_CATEGORY_4)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withNote(VALID_NOTE_2)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .withTags(VALID_TAG_2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                .withAnswer(VALID_ANSWER_4).withCategory(VALID_CATEGORY_4).withNote(VALID_NOTE_2)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .withRating(VALID_RATING_2).withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFlashcard, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditFlashcardDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard editedFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard flashcardInFilteredList \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList).withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_duplicateFlashcardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(firstFlashcard).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_duplicateFlashcardFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // edit flashcard in filtered list into a duplicate in flashcard deck"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Flashcard flashcardInList \u003d model.getFlashcardDeck().getFlashcardList()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new EditFlashcardDescriptorBuilder(flashcardInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_invalidFlashcardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withQuestion(VALID_QUESTION_4).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * but smaller than size of flashcard deck."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_invalidFlashcardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashcard deck"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashcardDeck().getFlashcardList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_FLASHCARD_1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor copyDescriptor \u003d new EditFlashcardDescriptor(DESC_FLASHCARD_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_FLASHCARD_1)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_FLASHCARD_2)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 28,
      "minzzelo": 142,
      "-": 8,
      "tanzhuoyao-nus": 3,
      "sgn00": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/EditFlashcardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DESC_FLASHCARD_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DESC_FLASHCARD_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_FLASHCARD_1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(DESC_FLASHCARD_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(DESC_FLASHCARD_1.equals(DESC_FLASHCARD_1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(DESC_FLASHCARD_2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1).withCategory(VALID_CATEGORY_2).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1).withNote(VALID_NOTE_2).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1).withRating(VALID_RATING_2).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        editedFlashcard \u003d new EditFlashcardDescriptorBuilder(DESC_FLASHCARD_1).withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(DESC_FLASHCARD_1.equals(editedFlashcard));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 8,
      "minzzelo": 45,
      "tanzhuoyao-nus": 5,
      "sgn00": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 14,
      "sgn00": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/FavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for FavCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FavCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_validIndexUnfilteredListFavouriteFlashcard_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToFavourite \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard favouritedFlashcard \u003d new FlashcardBuilder(flashcardToFavourite).withFavouriteStatus(true).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String expectedMessage \u003d String.format(FavCommand.MESSAGE_FAVOURITE_FLASHCARD_SUCCESS, favouritedFlashcard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), favouritedFlashcard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(favCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToFavourite \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard favouritedFlashcard \u003d new FlashcardBuilder(flashcardToFavourite).withFavouriteStatus(true).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String expectedMessage \u003d String.format(FavCommand.MESSAGE_FAVOURITE_FLASHCARD_SUCCESS, favouritedFlashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .get(INDEX_FIRST_FLASHCARD.getZeroBased()), favouritedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(favCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_invalidIndexUnfilteredListFavouriteFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandFailure(favCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashcard list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashcardDeck().getFlashcardList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandFailure(favCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_favouriteFavouritedFlashcard_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard alreadyFavouritedFlashcard \u003d model.getFilteredFlashcardList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard favouritedFlashcard \u003d new FlashcardBuilder(alreadyFavouritedFlashcard)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withFavouriteStatus(true).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String expectedMessage \u003d String.format(FavCommand.MESSAGE_FAVOURITE_FLASHCARD_SUCCESS, favouritedFlashcard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(1), favouritedFlashcard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(favCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favFirstCommand \u003d new FavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favSecondCommand \u003d new FavCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(favFirstCommand.equals(favFirstCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FavCommand favFirstCommandCopy \u003d new FavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(favFirstCommand.equals(favFirstCommandCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(favFirstCommand.equals(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(favFirstCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(favFirstCommand.equals(favSecondCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 123
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/FilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryEqualsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFlashcards.getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalFlashcards.getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new CategoryEqualsKeywordsPredicate(Collections.singletonList(new Category(\"first\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new CategoryEqualsKeywordsPredicate(Collections.singletonList(new Category(\"second\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand findFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand findSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_zeroKeywords_noFlashcardFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_multipleKeywords_flashcardFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\"c/SDLC\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\"c/SDLC c/Revision History\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1, FLASHCARD_2), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_lowercaseKeyword_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\"c/sdlc\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_multipleKeywordsUppercaseKeyword_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\"c/SDLC c/REVISION HISTORY\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1, FLASHCARD_2), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_multipleKeywordsMixedOrder_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        CategoryEqualsKeywordsPredicate predicate \u003d preparePredicate(\"c/REVISION HISTORY c/SDLC\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1, FLASHCARD_2), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Parses {@code userInput} into a {@code CategoryEqualsKeywordsPredicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private CategoryEqualsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String[] categoryKeywords \u003d userInput.split(\"c/\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        categoryKeywords \u003d Arrays.copyOfRange(categoryKeywords, 1, categoryKeywords.length);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        List\u003cCategory\u003e categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        for (int i \u003d 0; i \u003c categoryKeywords.length; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            String keyword \u003d categoryKeywords[i].trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sgn00"
        },
        "content": "            categoryList.add(new Category(keyword));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return new CategoryEqualsKeywordsPredicate(categoryList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 11,
      "tanzhuoyao-nus": 111,
      "sgn00": 10
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.AnswerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.NoteContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicate \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicate \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_zeroKeywords_noFlashcardFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e keywords \u003d prepareKeywords(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FindCommand command \u003d new FindCommand(keywords);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate questionPredicate \u003d new QuestionContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate answerPredicate \u003d new AnswerContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate categoryPredicate \u003d new CategoryContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate notePredicate \u003d new NoteContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate tagPredicate \u003d new TagsContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e listOfPredicates \u003d Arrays.asList(questionPredicate, answerPredicate,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                categoryPredicate, notePredicate, tagPredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Predicate\u003cFlashcard\u003e allPredicates \u003d listOfPredicates.stream().reduce(Predicate::or).orElse(x-\u003efalse);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(allPredicates);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e keywords \u003d prepareKeywords(\"SDLC control assertions\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        FindCommand command \u003d new FindCommand(keywords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate questionPredicate \u003d new QuestionContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate answerPredicate \u003d new AnswerContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate categoryPredicate \u003d new CategoryContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate notePredicate \u003d new NoteContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate tagPredicate \u003d new TagsContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e listOfPredicates \u003d Arrays.asList(questionPredicate, answerPredicate,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                categoryPredicate, notePredicate, tagPredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Predicate\u003cFlashcard\u003e allPredicates \u003d listOfPredicates.stream().reduce(Predicate::or).orElse(x-\u003efalse);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(allPredicates);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_1, FLASHCARD_2, FLASHCARD_3), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Parses {@code userInput} into a {@code List\u003cString\u003e}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private List\u003cString\u003e prepareKeywords(String userInput) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return Arrays.asList(userInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 6,
      "tanzhuoyao-nus": 39,
      "kimberlyohq": 67
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 5,
      "-": 14,
      "sgn00": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 10,
      "-": 6,
      "tanzhuoyao-nus": 23
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ReviewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.ReviewCommand.MESSAGE_INITIATE_REVIEW_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class ReviewCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_review_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_INITIATE_REVIEW_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(new ReviewCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_emptyFlashcardList_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandFailure(reviewCommand, model, ReviewCommand.MESSAGE_INITIATE_REVIEW_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "moyj01": 8,
      "kimberlyohq": 23
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_6;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.SortCriteria;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFlashcards.getReviewedFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalFlashcards.getReviewedFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand leastReviewedCommand \u003d new SortCommand(SortCriteria.REVIEWED_ASCENDING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand mostReviewedCommand \u003d new SortCommand(SortCriteria.REVIEWED_DESCENDING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(leastReviewedCommand.equals(leastReviewedCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand leastReviewedCommandCopy \u003d new SortCommand(SortCriteria.REVIEWED_ASCENDING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(leastReviewedCommand.equals(leastReviewedCommandCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(leastReviewedCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(leastReviewedCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(leastReviewedCommand.equals(mostReviewedCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_reviewedAscending_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(SortCriteria.REVIEWED_ASCENDING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.sortFilteredFlashcardList(SortCriteria.REVIEWED_ASCENDING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_5, FLASHCARD_4, FLASHCARD_6), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_reviewedDescending_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(SortCriteria.REVIEWED_DESCENDING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.sortFilteredFlashcardList(SortCriteria.REVIEWED_DESCENDING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_6, FLASHCARD_4, FLASHCARD_5), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_successAscending_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(SortCriteria.SUCCESS_RATE_ASCENDING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.sortFilteredFlashcardList(SortCriteria.SUCCESS_RATE_ASCENDING);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_5, FLASHCARD_6, FLASHCARD_4), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void execute_successDescending_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(SortCriteria.SUCCESS_RATE_DESCENDING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedModel.sortFilteredFlashcardList(SortCriteria.SUCCESS_RATE_DESCENDING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(Arrays.asList(FLASHCARD_4, FLASHCARD_6, FLASHCARD_5), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 88
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/UnfavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for UnfavCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class UnfavCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToUnfavourite \u003d model.getFilteredFlashcardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavCommand \u003d new UnfavCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard unfavouritedFlashcard \u003d new FlashcardBuilder(flashcardToUnfavourite)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withFavouriteStatus(false).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String expectedMessage \u003d String.format(UnfavCommand.MESSAGE_UNFAVOURITE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                unfavouritedFlashcard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(1), unfavouritedFlashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(unfavCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardToUnfavourite \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavCommand \u003d new UnfavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard unfavouritedFlashcard \u003d new FlashcardBuilder(flashcardToUnfavourite)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withFavouriteStatus(false).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        String expectedMessage \u003d String.format(UnfavCommand.MESSAGE_UNFAVOURITE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                unfavouritedFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardDeck(model.getFlashcardDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), unfavouritedFlashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandSuccess(unfavCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavCommand \u003d new UnfavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandFailure(unfavCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashcard list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashcardDeck().getFlashcardList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavCommand \u003d new UnfavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertCommandFailure(unfavCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavCommand \u003d new UnfavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavSecondCommand \u003d new UnfavCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(unfavCommand.equals(unfavCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UnfavCommand unfavFirstCommandCopy \u003d new UnfavCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(unfavCommand.equals(unfavFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(unfavCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(unfavCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(unfavCommand.equals(unfavSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 110
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_ANSWER_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_CATEGORY_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_DIAGRAM_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_RATING_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DIAGRAM_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String PREFIX_ANSWER \u003d \" a/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String PREFIX_CATEGORY \u003d \" c/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String PREFIX_QUESTION \u003d \" q/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String PREFIX_NOTE \u003d \" n/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String PREFIX_RATING \u003d \" r/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String PREFIX_TAG \u003d \" t/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String PREFIX_DIAGRAM \u003d \" d/\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // standard flashcard with category, note, rating, tag and diagram"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                        + VALID_ANSWER_1 + PREFIX_CATEGORY + VALID_CATEGORY_1 + PREFIX_NOTE + VALID_NOTE_1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                        + PREFIX_RATING + VALID_RATING_2 + PREFIX_TAG + VALID_TAG_2 + PREFIX_DIAGRAM + VALID_DIAGRAM_1,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new AddCommand(FLASHCARD_1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // flashcard with input arguments in reversed order, with category, note, rating, tag and diagram"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, SPACE + PREFIX_DIAGRAM + VALID_DIAGRAM_1 + PREFIX_TAG + VALID_TAG_2"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                        + PREFIX_ANSWER + VALID_ANSWER_1 + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                        + VALID_CATEGORY_1 + PREFIX_RATING + VALID_RATING_2 + PREFIX_NOTE + VALID_NOTE_1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new AddCommand(FLASHCARD_1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // standard flashcard without category, note, tag and isFavourite"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_3 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + VALID_ANSWER_3, new AddCommand(FLASHCARD_3));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // flashcard with input arguments in reversed order, without category, tag and note"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, SPACE + PREFIX_ANSWER + VALID_ANSWER_3"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + PREFIX_QUESTION + VALID_QUESTION_3, new AddCommand(FLASHCARD_3));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, SPACE + VALID_QUESTION_1 + PREFIX_ANSWER + VALID_ANSWER_1,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + VALID_ANSWER_1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + INVALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + VALID_ANSWER_1, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + INVALID_ANSWER_1, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + VALID_ANSWER_1 + PREFIX_CATEGORY + INVALID_CATEGORY_1, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                        + VALID_ANSWER_1 + PREFIX_CATEGORY + VALID_CATEGORY_1 + PREFIX_RATING + INVALID_RATING_1,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // invalid diagram"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertParseFailure(parser, SPACE + PREFIX_QUESTION + VALID_QUESTION_1 + PREFIX_ANSWER"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                        + VALID_ANSWER_1 + PREFIX_CATEGORY + VALID_CATEGORY_1 + PREFIX_RATING + VALID_RATING_2"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                        + PREFIX_DIAGRAM + INVALID_DIAGRAM_1,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                Diagram.MESSAGE_NON_EXISTENT_DIAGRAM_FILE_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 29,
      "minzzelo": 3,
      "-": 3,
      "tanzhuoyao-nus": 63,
      "sgn00": 10
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 25,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_4_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_5_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_4_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_5_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DIAGRAM_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DIAGRAM_2_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_2_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_4_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_5_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_RATING_2_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_2_DESC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid question"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid answer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid question followed by valid answer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + VALID_ANSWER_4_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // valid question followed by invalid question. The test case for invalid question followed by valid question"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_QUESTION_4_DESC + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + INVALID_ANSWER_DESC + INVALID_CATEGORY_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_QUESTION_4_DESC + VALID_ANSWER_4_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + VALID_CATEGORY_4_DESC + VALID_NOTE_2_DESC + VALID_RATING_2_DESC + VALID_TAG_2_DESC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                .withAnswer(VALID_ANSWER_4).withCategory(VALID_CATEGORY_4).withNote(VALID_NOTE_2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .withRating(VALID_RATING_2).withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_QUESTION_4_DESC + VALID_ANSWER_4_DESC;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withAnswer(VALID_ANSWER_4).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // question"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_QUESTION_4_DESC;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withQuestion(VALID_QUESTION_4).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_ANSWER_4_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withAnswer(VALID_ANSWER_4).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // category"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_CATEGORY_4_DESC;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withCategory(VALID_CATEGORY_4).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // note"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_NOTE_2_DESC;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withNote(VALID_NOTE_2).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_RATING_2_DESC;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withRating(VALID_RATING_2).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // tag"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_TAG_2_DESC;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        //diagram"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_DIAGRAM_2_DESC;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withDiagram(VALID_DIAGRAM_2).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_QUESTION_4_DESC + VALID_ANSWER_4_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                + VALID_CATEGORY_4_DESC + VALID_QUESTION_4_DESC + VALID_ANSWER_4_DESC + VALID_CATEGORY_4_DESC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                + VALID_QUESTION_5_DESC + VALID_ANSWER_5_DESC + VALID_CATEGORY_5_DESC + VALID_TAG_2_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_5)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                .withAnswer(VALID_ANSWER_5).withCategory(VALID_CATEGORY_5).withTags(VALID_TAG_2)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_QUESTION_DESC + VALID_QUESTION_4_DESC;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_QUESTION_4_DESC + INVALID_ANSWER_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                + VALID_CATEGORY_4_DESC + VALID_ANSWER_4_DESC;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_4)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withAnswer(VALID_ANSWER_4)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .withCategory(VALID_CATEGORY_4).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 36,
      "minzzelo": 135,
      "tanzhuoyao-nus": 16,
      "-": 3,
      "sgn00": 17
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FavCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FavCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private FavCommandParser parser \u003d new FavCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void parse_validArgs_returnsFavCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FavCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 25
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.CategoryEqualsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        List\u003cCategory\u003e categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        categoryList.add(new Category(\"Revision History\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        categoryList.add(new Category(\"SDLC\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new FilterCommand(new CategoryEqualsKeywordsPredicate(categoryList));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, \" c/SDLC c/Revision History\", expectedFilterCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, \" \\n c/SDLC \\n \\t c/Revision History  \\t\", expectedFilterCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 7,
      "tanzhuoyao-nus": 26,
      "sgn00": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FindCommand(Arrays.asList(\"SDLC\", \"Code\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, \"SDLC Code\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertParseSuccess(parser, \" \\n SDLC \\n \\t Code  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 18,
      "tanzhuoyao-nus": 2,
      "kimberlyohq": 11
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FlashcardDeckParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class FlashcardDeckParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(flashcard));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new AddCommand(flashcard), command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "//        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "minzzelo": 67,
      "-": 3,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"%\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"What does SDLC stand for?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"Software development life cycle\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String VALID_CATEGORY \u003d \"SDLC\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Note\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String VALID_RATING \u003d \"2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String VALID_TAG \u003d \"revise\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \"ImageTest\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path INVALID_FILE_TYPE \u003d TEST_DATA_FOLDER.resolve(\"invalidFileType.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path NON_EXISTENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"nonExistentFile.jpg\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path VALID_FILE_TYPE \u003d TEST_DATA_FOLDER.resolve(\"valid_image.jpg\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void parseNote_validValueWithoutWhitespace_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void parseNote_validValueWithWhitespace_returnsTrimmedNote() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String noteWithWhitespace \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag((String) null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void parseDiagram_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDiagram((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void parseDiagram_validValue_returnsDiagram() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram expectedDiagram \u003d new Diagram(VALID_FILE_TYPE.toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(expectedDiagram, ParserUtil.parseDiagram(VALID_FILE_TYPE.toString()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void parseDiagram_nonExistentFile_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDiagram(NON_EXISTENT_FILE.toString()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void parseDiagram_invalidFileType_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDiagram(INVALID_FILE_TYPE.toString()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void parseDiagram_validValueWithWhitespace_returnsTrimmedDiagram() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String diagramWithWhitespace \u003d WHITESPACE + VALID_FILE_TYPE.toString() + WHITESPACE;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        Diagram expectedDiagram \u003d new Diagram(VALID_FILE_TYPE.toString());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(expectedDiagram, ParserUtil.parseDiagram(diagramWithWhitespace));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 45,
      "minzzelo": 23,
      "-": 3,
      "tanzhuoyao-nus": 120,
      "sgn00": 23
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.SortCriteria;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"reviewed -c\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseFailure(parser, \"test -a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                new SortCommand(SortCriteria.REVIEWED_ASCENDING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, \"reviewed -a\", expectedSortCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertParseSuccess(parser, \" \\n reviewed -a  \\t\", expectedSortCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 38
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/UnfavCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.logic.commands.UnfavCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class UnfavCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private UnfavCommandParser parser \u003d new UnfavCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void parse_validArgs_returnsUnfavCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UnfavCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 25
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/FlashcardDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class FlashcardDeckTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private final FlashcardDeck flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(Collections.emptyList(), flashcardDeck.getFlashcardList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flashcardDeck.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void resetData_withValidReadOnlyFlashcardDeck_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck newData \u003d getTypicalFlashcardDeck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(newData, flashcardDeck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void resetData_withDuplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard copiedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(FLASHCARD_1, copiedFlashcardOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeckStub newData \u003d new FlashcardDeckStub(newFlashcards);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e flashcardDeck.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flashcardDeck.hasFlashcard(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void hasFlashcard_flashcardNotInFlashcardDeck_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(flashcardDeck.hasFlashcard(FLASHCARD_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void hasFlashcard_flashcardInFlashcardDeck_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.addFlashcard(FLASHCARD_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(flashcardDeck.hasFlashcard(FLASHCARD_1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void hasFlashcard_flashcardWithSameIdentityFieldsInFlashcardDeck_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        flashcardDeck.addFlashcard(FLASHCARD_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard editedFlashcardTwo \u003d new FlashcardBuilder(FLASHCARD_2).withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(flashcardDeck.hasFlashcard(editedFlashcardTwo));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashcardDeck.getFlashcardList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * A stub ReadOnlyFlashcardDeck whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static class FlashcardDeckStub implements ReadOnlyFlashcardDeck {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeckStub(Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 32,
      "minzzelo": 6,
      "-": 58,
      "kimberlyohq": 4
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "//        modelManager.updateFilteredPersonList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 108,
      "-": 4,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void setFlashcardDeckFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFlashcardDeckFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/AnswerContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class AnswerContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"oop\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"oop\", \"uml\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                AnswerContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                AnswerContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate firstPredicateCopy \u003d new AnswerContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_answerContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                AnswerContainsKeywordsPredicate(Collections.singletonList(\"object\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new AnswerContainsKeywordsPredicate(Arrays.asList(\"object\", \"oriented\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new AnswerContainsKeywordsPredicate(Arrays.asList(\"object\", \"association\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new AnswerContainsKeywordsPredicate(Arrays.asList(\"ObjeCT\", \"PrograMMING\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_answerDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        AnswerContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new AnswerContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new AnswerContainsKeywordsPredicate(Arrays.asList(\"UML\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withAnswer(\"object oriented programming\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        //Keywords match question, but does not match question"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new AnswerContainsKeywordsPredicate(Arrays.asList(\"oop\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 85
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/AnswerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // invalid answers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // valid answers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Object-oriented programming\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Object-oriented programming (OOP) is a computer programming model that \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                + \"organizes software design around data, or objects, rather than functions and logic.\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 38
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/CategoryContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class CategoryContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Design\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Requirements\", \"Implementation\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                CategoryContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicateCopy \u003d new CategoryContainsKeywordsPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_categoryContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                CategoryContainsKeywordsPredicate(Collections.singletonList(\"Design\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Design\", \"Implementation\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Collections.singletonList(\"DEsiGN\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Partial matching of keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Collections.singletonList(\"des\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_categoryDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Implementation\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Design\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        //Keywords match question, but does not match category"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"oop\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 79
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "class CategoryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 27
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/DiagramTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "class DiagramTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \"ImageTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path INVALID_FILE_TYPE \u003d TEST_DATA_FOLDER.resolve(\"invalidFileType.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path NON_EXISTENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"nonExistentFile.jpg\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path VALID_FILE_TYPE \u003d TEST_DATA_FOLDER.resolve(\"valid_image.jpg\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Diagram(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void read_invalidFileType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Diagram.isValidImageFileType(INVALID_FILE_TYPE.toString()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void read_missingFile() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Diagram.isValidImageFileType(NON_EXISTENT_FILE.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void read_validFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Diagram.isValidImageFileType(VALID_FILE_TYPE.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "moyj01": 40
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CATEGORY_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_NOTE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_STATISTICS_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(FLASHCARD_1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.isSameQuestion(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different answer -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different note -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withNote(VALID_NOTE_1).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different isFavourite status -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withFavouriteStatus(true).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different tag -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different tag -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different statistics -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withStatistics(VALID_STATISTICS_1).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(FLASHCARD_1.isSameQuestion(editedFlashcardOne));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard flashcardOneCopy \u003d new FlashcardBuilder(FLASHCARD_1).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(FLASHCARD_1.equals(flashcardOneCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(FLASHCARD_1.equals(FLASHCARD_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(FLASHCARD_2));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different questions -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withCategory(VALID_CATEGORY_2).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withNote(VALID_NOTE_2).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different isFavourite status -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withFavouriteStatus(true).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // different statistics -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        editedFlashcardOne \u003d new FlashcardBuilder(FLASHCARD_1).withStatistics(VALID_STATISTICS_1).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(FLASHCARD_1.equals(editedFlashcardOne));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 7,
      "minzzelo": 62,
      "tanzhuoyao-nus": 9,
      "kimberlyohq": 26
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/NoteContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class NoteContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"important\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"take\", \"note\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                NoteContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                NoteContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate firstPredicateCopy \u003d new NoteContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_noteContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                NoteContainsKeywordsPredicate(Collections.singletonList(\"oop\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withNote(\"oop\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Arrays.asList(\"tested\", \"important\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withNote(\"tested and important!\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Arrays.asList(\"tested\", \"important\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withNote(\"tested\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Arrays.asList(\"TesteD\", \"imPORTant\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withNote(\"tested and important!\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Note contains special characters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Collections.singletonList(\"tested\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withNote(\"important-tested\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_noteDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        NoteContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new NoteContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withNote(\"Tested\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Empty Note"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Collections.singletonList(\"Tested\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withNote(\"\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Arrays.asList(\"Tested\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withNote(\"Important\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        //Keywords match category, but does not match note"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new NoteContainsKeywordsPredicate(Arrays.asList(\"Design\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Tested\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 87
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Note(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 14
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/QuestionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"oop\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"oop\", \"uml\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "             QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "             QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            QuestionContainsKeywordsPredicate(Collections.singletonList(\"oop\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"association\", \"uml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            new FlashcardBuilder().withQuestion(\"How to show association in UML diagrams?\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"OOP\", \"uml\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"oOp\", \"iS\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Question contains special characters"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Collections.singletonList(\"oop\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP/OOP?\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP-OOP?\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"UML\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        //Keywords match answer, but does not match question"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"programming\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withAnswer(\"programming paradigm\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "kimberlyohq": 84
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // invalid questions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is OOP?\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"-\")); // one character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Explain Object-oriented programming (OOP) in two sentences\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 35
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/RatingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sgn00"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sgn00"
        },
        "content": "class RatingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        String invalidRating \u003d \"asdasdas\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(Rating.isValidRating(\"35\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertFalse(Rating.isValidRating(\"asdasdasdasdasd\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        // valid ratings"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(Rating.isValidRating(\"2\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sgn00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sgn00": 37
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void constructor_invalidReviewFrequency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(-3, 1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void constructor_invalidSuccessFrequency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(3, -1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void constructor_reviewFrequencyLesserThanSuccessFrequency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(3, 5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void getSuccessRate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics newStatistics \u003d new Statistics();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(newStatistics.getSuccessFrequency(), 0.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics updatedStatistics \u003d new Statistics(3, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        double actualSuccessRate \u003d ((double) 2 / (double) 3) * 100.0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(updatedStatistics.getSuccessRate(), actualSuccessRate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void incrementReviewFrequency() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics updatedStatistics \u003d statistics.incrementReviewFrequency();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(updatedStatistics.getReviewFrequency(), statistics.getReviewFrequency() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void incrementSuccessFrequency() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics statistics \u003d new Statistics(3, 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Statistics updatedStatistics \u003d statistics.incrementSuccessFrequency();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(updatedStatistics.getSuccessFrequency(), statistics.getSuccessFrequency() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void isValidStatistics() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid review frequency"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(-3, 0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid success frequency"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(3, -1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // invalid relationship between review and success frequencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(3, 5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // valid statistics"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(0, 0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(5, 3));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 69
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/TagsContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class TagsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"oop\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"oop\", \"uml\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                TagsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                TagsContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicateCopy \u003d new TagsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_tagsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                TagsContainsKeywordsPredicate(Collections.singletonList(\"design\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"design\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"association\", \"uml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new FlashcardBuilder().withTags(\"association\", \"uml\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"OOP\", \"uml\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"association\", \"uml\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"uML\", \"AssoCIATION\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"association\", \"uml\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void test_tagsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new TagsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"association\", \"uml\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"design\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"association\", \"uml\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        //Keywords match question, but does not match tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"OOP\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"What is OOP?\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withTags(\"tested\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kimberlyohq": 83
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(FLASHCARD_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(FLASHCARD_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void contains_flashcardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(FLASHCARD_1).withQuestion(\"What does SDLC stand for?\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withAnswer(\"Software development life cycle\").withCategory(\"SDLC\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedFlashcard));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(FLASHCARD_1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, FLASHCARD_1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(FLASHCARD_1, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, ()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            -\u003e uniqueFlashcardList.setFlashcard(FLASHCARD_1, FLASHCARD_1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.setFlashcard(FLASHCARD_1, FLASHCARD_1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedUniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        Flashcard editedOne \u003d new FlashcardBuilder(FLASHCARD_1).withQuestion(\"What does SDLC stand for?\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .withAnswer(\"Software development life cycle\").withCategory(\"SDLC\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.setFlashcard(FLASHCARD_1, editedOne);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedUniqueFlashcardList.add(editedOne);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.setFlashcard(FLASHCARD_1, FLASHCARD_2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedUniqueFlashcardList.add(FLASHCARD_2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, ()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            -\u003e uniqueFlashcardList.setFlashcard(FLASHCARD_1, FLASHCARD_2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(FLASHCARD_1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void remove_existingFlashcard_removesFlashcard() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.remove(FLASHCARD_1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedUniqueFlashcardList.add(FLASHCARD_2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.add(FLASHCARD_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(FLASHCARD_2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        expectedUniqueFlashcardList.add(FLASHCARD_2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(FLASHCARD_1, FLASHCARD_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            -\u003e uniqueFlashcardList.setFlashcards(listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 7,
      "minzzelo": 4,
      "kimberlyohq": 164
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.FLASHCARD_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String INVALID_FAVOURITE_STATUS \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String VALID_QUESTION \u003d FLASHCARD_1.getQuestion().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String VALID_ANSWER \u003d FLASHCARD_1.getAnswer().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String VALID_CATEGORY \u003d FLASHCARD_1.getCategory().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String VALID_NOTE \u003d FLASHCARD_1.getNote().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private static final String VALID_RATING \u003d FLASHCARD_1.getRating().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAG \u003d FLASHCARD_1.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final Statistics VALID_STATISTICS \u003d FLASHCARD_1.getStatistics();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final String VALID_DIAGRAM \u003d FLASHCARD_1.getDiagram().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private static final String VALID_FAVOURITE_STATUS \u003d Boolean.toString(FLASHCARD_1.isFavourite());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(FLASHCARD_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        assertEquals(FLASHCARD_1, flashcard.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_QUESTION, VALID_ANSWER, VALID_CATEGORY, VALID_NOTE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                        VALID_RATING, VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER, VALID_CATEGORY,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                VALID_NOTE, VALID_RATING, VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, INVALID_ANSWER, VALID_CATEGORY, VALID_NOTE, VALID_RATING,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                        VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null, VALID_CATEGORY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                VALID_NOTE, VALID_RATING, VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, INVALID_CATEGORY, VALID_NOTE, VALID_RATING,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                        VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                null, VALID_NOTE, VALID_RATING, VALID_TAG, VALID_DIAGRAM, VALID_STATISTICS, VALID_FAVOURITE_STATUS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "minzzelo": 64,
      "tanzhuoyao-nus": 6,
      "kimberlyohq": 9,
      "sgn00": 7
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonFlashcardDeckStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class JsonFlashcardDeckStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \"JsonFlashcardDeckStorageTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void readFlashcardDeck_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFlashcardDeck(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFlashcardDeck\u003e readFlashcardDeck(String filePath) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return new JsonFlashcardDeckStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                .readFlashcardDeck(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertFalse(readFlashcardDeck(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardDeck(\"notJsonFormatFlashcardDeck.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void readFlashcardDeck_invalidFlashcard_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardDeck(\"invalidFlashcardFlashcardDeck.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void readFlashcardDeck_invalidAndValidFlashcards_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                readFlashcardDeck(\"invalidAndValidFlashcardsFlashcardDeck.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "moyj01": 59
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonSerializableFlashcardDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "public class JsonSerializableFlashcardDeckTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            \"JsonSerializableFlashcardDeckTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardsFlashcardDeck.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            .resolve(\"duplicateFlashcardsFlashcardDeck.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcardFlashcardDeck.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void toModelType_typicalFlashcardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        JsonSerializableFlashcardDeck dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                JsonSerializableFlashcardDeck.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck flashcardDeckFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck typicalFlashcardDeck \u003d TypicalFlashcards.getTypicalFlashcardDeck();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(flashcardDeckFromFile, typicalFlashcardDeck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void toModelType_duplicateFlashcards_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        JsonSerializableFlashcardDeck dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                JsonSerializableFlashcardDeck.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFlashcardDeck.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        JsonSerializableFlashcardDeck dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moyj01"
        },
        "content": "                JsonSerializableFlashcardDeck.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moyj01"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 48
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        userPrefs.setFlashcardDeckFilePath(Paths.get(\"flashcarddeck.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcards.getTypicalFlashcardDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        JsonFlashcardDeckStorage flashcardDeckStorage \u003d new JsonFlashcardDeckStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        storageManager \u003d new StorageManager(flashcardDeckStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void flashcardDeckReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "         * {@link JsonFlashcardDeckStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moyj01"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFlashcardDeckStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck original \u003d getTypicalFlashcardDeck();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        storageManager.saveFlashcardDeck(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        ReadOnlyFlashcardDeck retrieved \u003d storageManager.readFlashcardDeck().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertEquals(original, new FlashcardDeck(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public void getFlashcardDeckFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        assertNotNull(storageManager.getFlashcardDeckFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": " * A utility class to help with building EditFlashcardDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.descriptor \u003d new EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns an {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setQuestion(flashcard.getQuestion());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setAnswer(flashcard.getAnswer());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setCategory(flashcard.getCategory());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setNote(flashcard.getNote());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        descriptor.setRating(flashcard.getRating());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        descriptor.setDiagram(flashcard.getDiagram());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Question} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Category} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Note} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withNote(String note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        descriptor.setNote(new Note(note));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public EditFlashcardDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Sets the {@code Tags} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Sets the {@code Diagram} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public EditFlashcardDescriptorBuilder withDiagram(String diagramFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        descriptor.setDiagram(new Diagram(diagramFilePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 16,
      "minzzelo": 59,
      "-": 5,
      "tanzhuoyao-nus": 15,
      "sgn00": 9,
      "kimberlyohq": 2
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Diagram;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sgn00"
        },
        "content": "import seedu.flashcard.model.flashcard.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "import seedu.flashcard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moyj01"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What does OOP stand for?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Object oriented programming\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"General\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static final String DEFAULT_DIAGRAM \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Statistics DEFAULT_STATISTICS \u003d new Statistics();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final boolean DEFAULT_FAVOURITE_STATUS \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private Diagram diagram;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        diagram \u003d new Diagram(DEFAULT_DIAGRAM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        statistics \u003d DEFAULT_STATISTICS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        isFavourite \u003d DEFAULT_FAVOURITE_STATUS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        question \u003d flashcardToCopy.getQuestion();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        answer \u003d flashcardToCopy.getAnswer();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        category \u003d flashcardToCopy.getCategory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        note \u003d flashcardToCopy.getNote();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        rating \u003d flashcardToCopy.getRating();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        diagram \u003d flashcardToCopy.getDiagram();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        statistics \u003d flashcardToCopy.getStatistics();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        isFavourite \u003d flashcardToCopy.isFavourite();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Category} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Note} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder withNote(String note) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     * Sets the {@code Rating} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sgn00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    public FlashcardBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sgn00"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sgn00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sgn00"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     * Sets the {@code Tags} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public FlashcardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     * Sets the {@code Diagram} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "moyj01"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public FlashcardBuilder withDiagram(String diagramFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        this.diagram \u003d new Diagram(diagramFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "moyj01"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Sets the {@code Statistics} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FlashcardBuilder withStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Sets the {@code isFavourite} status of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public FlashcardBuilder withFavouriteStatus(boolean isFavourite) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new Flashcard(question, answer, category, note, rating, tags, diagram, statistics, isFavourite);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 19,
      "minzzelo": 87,
      "tanzhuoyao-nus": 17,
      "sgn00": 13,
      "kimberlyohq": 12
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(flashcard);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public static String getPersonDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        sb.append(PREFIX_NAME + flashcard.getName().fullName + \" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        sb.append(PREFIX_PHONE + flashcard.getPhone().value + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        sb.append(PREFIX_EMAIL + flashcard.getEmail().value + \" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + flashcard.getAddress().value + \" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "minzzelo": 42,
      "-": 5,
      "kimberlyohq": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 4,
      "-": 45,
      "kimberlyohq": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.FlashcardDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import seedu.flashcard.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final Flashcard FLASHCARD_1 \u003d new FlashcardBuilder().withQuestion(\"What does SDLC stand for?\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withAnswer(\"Software development life cycle\").withCategory(\"SDLC\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            .withRating(\"2\").withTags(\"revise\").withDiagram(\"\").withFavouriteStatus(false)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final Flashcard FLASHCARD_2 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "            .withQuestion(\"What is a revision control software?\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withAnswer(\"It is the software tool that automate the process of Revision Control\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            .withCategory(\"Revision History\").withDiagram(\"\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moyj01"
        },
        "content": "            .withFavouriteStatus(true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "    public static final Flashcard FLASHCARD_3 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            .withQuestion(\"It is recommended that assertions to be used liberally in the code. True or False?\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withAnswer(\"True\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Flashcard FLASHCARD_4 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withQuestion(\"Can the singleton pattern can reduce testability?\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withAnswer(\"Yes\").withCategory(\"Singleton\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withStatistics(new Statistics(3, 2))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Flashcard FLASHCARD_5 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withQuestion(\"The Command pattern uses polymorphism. True or False?\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withAnswer(\"True\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withCategory(\"Command Pattern\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withStatistics(new Statistics(1, 0))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static final Flashcard FLASHCARD_6 \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withQuestion(\"IMore test cases is always better. True or False?\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            .withStatistics(new Statistics(5, 2))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "            .withAnswer(\"True\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    private TypicalFlashcards() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical flashcards."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moyj01"
        },
        "content": "    public static FlashcardDeck getTypicalFlashcardDeck() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moyj01"
        },
        "content": "        FlashcardDeck ab \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Returns an {@code AddressBook} with flashcards that have been reviewed before."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static FlashcardDeck getReviewedFlashcardDeck() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        FlashcardDeck ab \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (Flashcard flashcard : getReviewedFlashcards()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanzhuoyao-nus"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FLASHCARD_1, FLASHCARD_2, FLASHCARD_3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static List\u003cFlashcard\u003e getReviewedFlashcards() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FLASHCARD_4, FLASHCARD_5, FLASHCARD_6));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 9,
      "minzzelo": 67,
      "tanzhuoyao-nus": 6,
      "kimberlyohq": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kimberlyohq"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 2,
      "-": 7,
      "kimberlyohq": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moyj01"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moyj01"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moyj01": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003c?import seedu.flashcard.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moyj01"
        },
        "content": "\u003cfx:root type\u003d\"seedu.flashcard.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "moyj01": 1,
      "-": 5
    }
  }
]
